// ==============================================================
// Generated by Vitis HLS v2025.1
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2025 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="compute_compute,hls_ip_2025_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7a35t-cpg236-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=17.540000,HLS_SYN_LAT=10006,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=723,HLS_SYN_LUT=515,HLS_VERSION=2025_1}" *)

module compute (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        a,
        b,
        c,
        c_ap_vld
);

parameter    ap_ST_fsm_state1 = 6'd1;
parameter    ap_ST_fsm_state2 = 6'd2;
parameter    ap_ST_fsm_state3 = 6'd4;
parameter    ap_ST_fsm_state4 = 6'd8;
parameter    ap_ST_fsm_state5 = 6'd16;
parameter    ap_ST_fsm_state6 = 6'd32;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [31:0] a;
input  [31:0] b;
output  [31:0] c;
output   c_ap_vld;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg c_ap_vld;

(* fsm_encoding = "none" *) reg   [5:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire  signed [63:0] sext_ln2_fu_79_p1;
wire  signed [63:0] sext_ln3_fu_85_p1;
wire   [63:0] grp_fu_71_p2;
reg   [63:0] aa_reg_127;
wire    ap_CS_fsm_state2;
wire   [63:0] grp_fu_75_p2;
reg   [63:0] bb_reg_132;
wire   [62:0] trunc_ln4_fu_95_p1;
reg   [62:0] trunc_ln4_reg_137;
wire    ap_CS_fsm_state3;
wire   [0:0] icmp_ln6_fu_99_p2;
reg   [0:0] icmp_ln6_reg_142;
wire    grp_compute_Pipeline_loop_i_fu_65_ap_start;
wire    grp_compute_Pipeline_loop_i_fu_65_ap_done;
wire    grp_compute_Pipeline_loop_i_fu_65_ap_idle;
wire    grp_compute_Pipeline_loop_i_fu_65_ap_ready;
wire   [31:0] grp_compute_Pipeline_loop_i_fu_65_temp_out;
wire    grp_compute_Pipeline_loop_i_fu_65_temp_out_ap_vld;
reg   [31:0] ap_phi_mux_storemerge_i_phi_fu_57_p4;
reg   [31:0] storemerge_i_reg_53;
wire    ap_CS_fsm_state4;
wire    ap_CS_fsm_state6;
reg    grp_compute_Pipeline_loop_i_fu_65_ap_start_reg;
reg   [5:0] ap_NS_fsm;
wire    ap_NS_fsm_state4;
wire    ap_CS_fsm_state5;
wire  signed [31:0] grp_fu_71_p0;
wire  signed [31:0] grp_fu_71_p1;
wire  signed [31:0] grp_fu_75_p0;
wire  signed [31:0] grp_fu_75_p1;
wire   [63:0] result_fu_91_p2;
reg    ap_ST_fsm_state1_blk;
wire    ap_ST_fsm_state2_blk;
wire    ap_ST_fsm_state3_blk;
wire    ap_ST_fsm_state4_blk;
reg    ap_ST_fsm_state5_blk;
wire    ap_ST_fsm_state6_blk;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 6'd1;
#0 grp_compute_Pipeline_loop_i_fu_65_ap_start_reg = 1'b0;
end

compute_compute_Pipeline_loop_i grp_compute_Pipeline_loop_i_fu_65(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_compute_Pipeline_loop_i_fu_65_ap_start),
    .ap_done(grp_compute_Pipeline_loop_i_fu_65_ap_done),
    .ap_idle(grp_compute_Pipeline_loop_i_fu_65_ap_idle),
    .ap_ready(grp_compute_Pipeline_loop_i_fu_65_ap_ready),
    .result(trunc_ln4_reg_137),
    .temp_out(grp_compute_Pipeline_loop_i_fu_65_temp_out),
    .temp_out_ap_vld(grp_compute_Pipeline_loop_i_fu_65_temp_out_ap_vld)
);

compute_mul_32s_32s_64_2_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 64 ))
mul_32s_32s_64_2_1_U5(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_71_p0),
    .din1(grp_fu_71_p1),
    .ce(1'b1),
    .dout(grp_fu_71_p2)
);

compute_mul_32s_32s_64_2_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 64 ))
mul_32s_32s_64_2_1_U6(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_75_p0),
    .din1(grp_fu_75_p1),
    .ce(1'b1),
    .dout(grp_fu_75_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        grp_compute_Pipeline_loop_i_fu_65_ap_start_reg <= 1'b0;
    end else begin
        if (((icmp_ln6_fu_99_p2 == 1'd0) & (1'b1 == ap_NS_fsm_state4) & (1'b1 == ap_CS_fsm_state3))) begin
            grp_compute_Pipeline_loop_i_fu_65_ap_start_reg <= 1'b1;
        end else if ((grp_compute_Pipeline_loop_i_fu_65_ap_ready == 1'b1)) begin
            grp_compute_Pipeline_loop_i_fu_65_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln6_reg_142 == 1'd0) & (1'b1 == ap_CS_fsm_state6))) begin
        storemerge_i_reg_53 <= grp_compute_Pipeline_loop_i_fu_65_temp_out;
    end else if (((icmp_ln6_reg_142 == 1'd1) & (1'b1 == ap_CS_fsm_state4))) begin
        storemerge_i_reg_53 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        aa_reg_127 <= grp_fu_71_p2;
        bb_reg_132 <= grp_fu_75_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        icmp_ln6_reg_142 <= icmp_ln6_fu_99_p2;
        trunc_ln4_reg_137 <= trunc_ln4_fu_95_p1;
    end
end

always @ (*) begin
    if ((ap_start == 1'b0)) begin
        ap_ST_fsm_state1_blk = 1'b1;
    end else begin
        ap_ST_fsm_state1_blk = 1'b0;
    end
end

assign ap_ST_fsm_state2_blk = 1'b0;

assign ap_ST_fsm_state3_blk = 1'b0;

assign ap_ST_fsm_state4_blk = 1'b0;

always @ (*) begin
    if ((grp_compute_Pipeline_loop_i_fu_65_ap_done == 1'b0)) begin
        ap_ST_fsm_state5_blk = 1'b1;
    end else begin
        ap_ST_fsm_state5_blk = 1'b0;
    end
end

assign ap_ST_fsm_state6_blk = 1'b0;

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln6_reg_142 == 1'd0) & (1'b1 == ap_CS_fsm_state6))) begin
        ap_phi_mux_storemerge_i_phi_fu_57_p4 = grp_compute_Pipeline_loop_i_fu_65_temp_out;
    end else begin
        ap_phi_mux_storemerge_i_phi_fu_57_p4 = storemerge_i_reg_53;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        c_ap_vld = 1'b1;
    end else begin
        c_ap_vld = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            if (((icmp_ln6_reg_142 == 1'd1) & (1'b1 == ap_CS_fsm_state4))) begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end
        end
        ap_ST_fsm_state5 : begin
            if (((grp_compute_Pipeline_loop_i_fu_65_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state5))) begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_NS_fsm_state4 = ap_NS_fsm[32'd3];

assign c = ap_phi_mux_storemerge_i_phi_fu_57_p4;

assign grp_compute_Pipeline_loop_i_fu_65_ap_start = grp_compute_Pipeline_loop_i_fu_65_ap_start_reg;

assign grp_fu_71_p0 = sext_ln2_fu_79_p1;

assign grp_fu_71_p1 = sext_ln2_fu_79_p1;

assign grp_fu_75_p0 = sext_ln3_fu_85_p1;

assign grp_fu_75_p1 = sext_ln3_fu_85_p1;

assign icmp_ln6_fu_99_p2 = (($signed(result_fu_91_p2) < $signed(64'd1)) ? 1'b1 : 1'b0);

assign result_fu_91_p2 = (aa_reg_127 - bb_reg_132);

assign sext_ln2_fu_79_p1 = $signed(a);

assign sext_ln3_fu_85_p1 = $signed(b);

assign trunc_ln4_fu_95_p1 = result_fu_91_p2[62:0];

endmodule //compute
