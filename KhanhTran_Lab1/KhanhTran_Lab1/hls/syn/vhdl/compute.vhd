-- ==============================================================
-- Generated by Vitis HLS v2025.1
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2025 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity compute is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    a : IN STD_LOGIC_VECTOR (31 downto 0);
    b : IN STD_LOGIC_VECTOR (31 downto 0);
    c : OUT STD_LOGIC_VECTOR (31 downto 0);
    c_ap_vld : OUT STD_LOGIC );
end;


architecture behav of compute is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "compute_compute,hls_ip_2025_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7a35t-cpg236-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=17.540000,HLS_SYN_LAT=10006,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=723,HLS_SYN_LUT=515,HLS_VERSION=2025_1}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (5 downto 0) := "000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (5 downto 0) := "000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (5 downto 0) := "001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (5 downto 0) := "010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (5 downto 0) := "100000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv64_1 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000001";

    signal ap_CS_fsm : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal sext_ln2_fu_79_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln3_fu_85_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_71_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal aa_reg_127 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal grp_fu_75_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal bb_reg_132 : STD_LOGIC_VECTOR (63 downto 0);
    signal trunc_ln4_fu_95_p1 : STD_LOGIC_VECTOR (62 downto 0);
    signal trunc_ln4_reg_137 : STD_LOGIC_VECTOR (62 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal icmp_ln6_fu_99_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln6_reg_142 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_compute_Pipeline_loop_i_fu_65_ap_start : STD_LOGIC;
    signal grp_compute_Pipeline_loop_i_fu_65_ap_done : STD_LOGIC;
    signal grp_compute_Pipeline_loop_i_fu_65_ap_idle : STD_LOGIC;
    signal grp_compute_Pipeline_loop_i_fu_65_ap_ready : STD_LOGIC;
    signal grp_compute_Pipeline_loop_i_fu_65_temp_out : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_compute_Pipeline_loop_i_fu_65_temp_out_ap_vld : STD_LOGIC;
    signal ap_phi_mux_storemerge_i_phi_fu_57_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal storemerge_i_reg_53 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal grp_compute_Pipeline_loop_i_fu_65_ap_start_reg : STD_LOGIC := '0';
    signal ap_NS_fsm : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_NS_fsm_state4 : STD_LOGIC;
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal grp_fu_71_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_71_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_75_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_75_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal result_fu_91_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_ST_fsm_state1_blk : STD_LOGIC;
    signal ap_ST_fsm_state2_blk : STD_LOGIC;
    signal ap_ST_fsm_state3_blk : STD_LOGIC;
    signal ap_ST_fsm_state4_blk : STD_LOGIC;
    signal ap_ST_fsm_state5_blk : STD_LOGIC;
    signal ap_ST_fsm_state6_blk : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component compute_compute_Pipeline_loop_i IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        result : IN STD_LOGIC_VECTOR (62 downto 0);
        temp_out : OUT STD_LOGIC_VECTOR (31 downto 0);
        temp_out_ap_vld : OUT STD_LOGIC );
    end component;


    component compute_mul_32s_32s_64_2_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;



begin
    grp_compute_Pipeline_loop_i_fu_65 : component compute_compute_Pipeline_loop_i
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_compute_Pipeline_loop_i_fu_65_ap_start,
        ap_done => grp_compute_Pipeline_loop_i_fu_65_ap_done,
        ap_idle => grp_compute_Pipeline_loop_i_fu_65_ap_idle,
        ap_ready => grp_compute_Pipeline_loop_i_fu_65_ap_ready,
        result => trunc_ln4_reg_137,
        temp_out => grp_compute_Pipeline_loop_i_fu_65_temp_out,
        temp_out_ap_vld => grp_compute_Pipeline_loop_i_fu_65_temp_out_ap_vld);

    mul_32s_32s_64_2_1_U5 : component compute_mul_32s_32s_64_2_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_71_p0,
        din1 => grp_fu_71_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_71_p2);

    mul_32s_32s_64_2_1_U6 : component compute_mul_32s_32s_64_2_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_75_p0,
        din1 => grp_fu_75_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_75_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    grp_compute_Pipeline_loop_i_fu_65_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_compute_Pipeline_loop_i_fu_65_ap_start_reg <= ap_const_logic_0;
            else
                if (((icmp_ln6_fu_99_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_NS_fsm_state4) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                    grp_compute_Pipeline_loop_i_fu_65_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_compute_Pipeline_loop_i_fu_65_ap_ready = ap_const_logic_1)) then 
                    grp_compute_Pipeline_loop_i_fu_65_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    storemerge_i_reg_53_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln6_reg_142 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state6))) then 
                storemerge_i_reg_53 <= grp_compute_Pipeline_loop_i_fu_65_temp_out;
            elsif (((icmp_ln6_reg_142 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
                storemerge_i_reg_53 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                aa_reg_127 <= grp_fu_71_p2;
                bb_reg_132 <= grp_fu_75_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                icmp_ln6_reg_142 <= icmp_ln6_fu_99_p2;
                trunc_ln4_reg_137 <= trunc_ln4_fu_95_p1;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, icmp_ln6_reg_142, grp_compute_Pipeline_loop_i_fu_65_ap_done, ap_CS_fsm_state4, ap_CS_fsm_state5)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                if (((icmp_ln6_reg_142 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
                    ap_NS_fsm <= ap_ST_fsm_state6;
                else
                    ap_NS_fsm <= ap_ST_fsm_state5;
                end if;
            when ap_ST_fsm_state5 => 
                if (((grp_compute_Pipeline_loop_i_fu_65_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state5))) then
                    ap_NS_fsm <= ap_ST_fsm_state6;
                else
                    ap_NS_fsm <= ap_ST_fsm_state5;
                end if;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXXXXX";
        end case;
    end process;
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_NS_fsm_state4 <= ap_NS_fsm(3);

    ap_ST_fsm_state1_blk_assign_proc : process(ap_start)
    begin
        if ((ap_start = ap_const_logic_0)) then 
            ap_ST_fsm_state1_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state1_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state2_blk <= ap_const_logic_0;
    ap_ST_fsm_state3_blk <= ap_const_logic_0;
    ap_ST_fsm_state4_blk <= ap_const_logic_0;

    ap_ST_fsm_state5_blk_assign_proc : process(grp_compute_Pipeline_loop_i_fu_65_ap_done)
    begin
        if ((grp_compute_Pipeline_loop_i_fu_65_ap_done = ap_const_logic_0)) then 
            ap_ST_fsm_state5_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state5_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state6_blk <= ap_const_logic_0;

    ap_done_assign_proc : process(ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_phi_mux_storemerge_i_phi_fu_57_p4_assign_proc : process(icmp_ln6_reg_142, grp_compute_Pipeline_loop_i_fu_65_temp_out, storemerge_i_reg_53, ap_CS_fsm_state6)
    begin
        if (((icmp_ln6_reg_142 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state6))) then 
            ap_phi_mux_storemerge_i_phi_fu_57_p4 <= grp_compute_Pipeline_loop_i_fu_65_temp_out;
        else 
            ap_phi_mux_storemerge_i_phi_fu_57_p4 <= storemerge_i_reg_53;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    c <= ap_phi_mux_storemerge_i_phi_fu_57_p4;

    c_ap_vld_assign_proc : process(ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            c_ap_vld <= ap_const_logic_1;
        else 
            c_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    grp_compute_Pipeline_loop_i_fu_65_ap_start <= grp_compute_Pipeline_loop_i_fu_65_ap_start_reg;
    grp_fu_71_p0 <= sext_ln2_fu_79_p1(32 - 1 downto 0);
    grp_fu_71_p1 <= sext_ln2_fu_79_p1(32 - 1 downto 0);
    grp_fu_75_p0 <= sext_ln3_fu_85_p1(32 - 1 downto 0);
    grp_fu_75_p1 <= sext_ln3_fu_85_p1(32 - 1 downto 0);
    icmp_ln6_fu_99_p2 <= "1" when (signed(result_fu_91_p2) < signed(ap_const_lv64_1)) else "0";
    result_fu_91_p2 <= std_logic_vector(unsigned(aa_reg_127) - unsigned(bb_reg_132));
        sext_ln2_fu_79_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(a),64));

        sext_ln3_fu_85_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(b),64));

    trunc_ln4_fu_95_p1 <= result_fu_91_p2(63 - 1 downto 0);
end behav;
