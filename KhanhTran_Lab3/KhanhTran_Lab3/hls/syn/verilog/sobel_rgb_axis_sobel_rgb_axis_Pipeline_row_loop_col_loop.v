// ==============================================================
// Generated by Vitis HLS v2025.1
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2025 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module sobel_rgb_axis_sobel_rgb_axis_Pipeline_row_loop_col_loop (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        in_axis_TVALID,
        out_axis_TREADY,
        width,
        bound,
        sub133,
        in_axis_TDATA,
        in_axis_TREADY,
        in_axis_TKEEP,
        in_axis_TSTRB,
        in_axis_TUSER,
        in_axis_TLAST,
        in_axis_TID,
        in_axis_TDEST,
        sub,
        out_axis_TDATA,
        out_axis_TVALID,
        out_axis_TKEEP,
        out_axis_TSTRB,
        out_axis_TUSER,
        out_axis_TLAST,
        out_axis_TID,
        out_axis_TDEST,
        line1_address1,
        line1_ce1,
        line1_we1,
        line1_d1,
        line1_q1,
        line0_address0,
        line0_ce0,
        line0_q0,
        line0_address1,
        line0_ce1,
        line0_we1,
        line0_d1
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input   in_axis_TVALID;
input   out_axis_TREADY;
input  [31:0] width;
input  [40:0] bound;
input  [31:0] sub133;
input  [23:0] in_axis_TDATA;
output   in_axis_TREADY;
input  [2:0] in_axis_TKEEP;
input  [2:0] in_axis_TSTRB;
input  [0:0] in_axis_TUSER;
input  [0:0] in_axis_TLAST;
input  [0:0] in_axis_TID;
input  [0:0] in_axis_TDEST;
input  [31:0] sub;
output  [23:0] out_axis_TDATA;
output   out_axis_TVALID;
output  [2:0] out_axis_TKEEP;
output  [2:0] out_axis_TSTRB;
output  [0:0] out_axis_TUSER;
output  [0:0] out_axis_TLAST;
output  [0:0] out_axis_TID;
output  [0:0] out_axis_TDEST;
output  [9:0] line1_address1;
output   line1_ce1;
output   line1_we1;
output  [7:0] line1_d1;
input  [7:0] line1_q1;
output  [9:0] line0_address0;
output   line0_ce0;
input  [7:0] line0_q0;
output  [9:0] line0_address1;
output   line0_ce1;
output   line0_we1;
output  [7:0] line0_d1;

reg ap_idle;
reg in_axis_TREADY;
reg out_axis_TVALID;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_enable_reg_pp0_iter3;
reg    ap_enable_reg_pp0_iter4;
reg    ap_enable_reg_pp0_iter5;
reg    ap_enable_reg_pp0_iter6;
reg    ap_enable_reg_pp0_iter7;
reg    ap_enable_reg_pp0_iter8;
reg    ap_idle_pp0;
reg   [0:0] icmp_ln65_reg_1047;
reg    ap_block_state3_pp0_stage0_iter2_grp1;
reg    ap_block_pp0_stage0_subdone;
wire   [0:0] icmp_ln65_fu_327_p2;
reg    ap_condition_exit_pp0_iter1_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
reg    in_axis_TDATA_blk_n;
wire    ap_block_pp0_stage0_grp1;
reg    out_axis_TDATA_blk_n;
wire    ap_block_pp0_stage0_11001_grp0;
wire    ap_block_pp0_stage0_subdone_grp0;
reg    ap_block_pp0_stage0_11001_grp1;
reg    ap_block_pp0_stage0_11001;
wire   [0:0] icmp_ln72_fu_350_p2;
reg   [0:0] icmp_ln72_reg_1051;
reg   [0:0] icmp_ln72_reg_1051_pp0_iter3_reg;
reg   [0:0] icmp_ln72_reg_1051_pp0_iter4_reg;
reg   [0:0] icmp_ln72_reg_1051_pp0_iter5_reg;
wire   [0:0] first_iter_0_fu_400_p2;
reg   [0:0] first_iter_0_reg_1061;
reg   [0:0] first_iter_0_reg_1061_pp0_iter3_reg;
reg   [0:0] first_iter_0_reg_1061_pp0_iter4_reg;
reg   [0:0] first_iter_0_reg_1061_pp0_iter5_reg;
reg   [0:0] first_iter_0_reg_1061_pp0_iter6_reg;
reg   [0:0] first_iter_0_reg_1061_pp0_iter7_reg;
wire   [0:0] cmp130_fu_422_p2;
reg   [0:0] cmp130_reg_1067;
reg   [0:0] cmp130_reg_1067_pp0_iter3_reg;
reg   [0:0] cmp130_reg_1067_pp0_iter4_reg;
reg   [0:0] cmp130_reg_1067_pp0_iter5_reg;
reg   [0:0] cmp130_reg_1067_pp0_iter6_reg;
reg   [0:0] cmp130_reg_1067_pp0_iter7_reg;
wire   [0:0] cmp134_fu_428_p2;
reg   [0:0] cmp134_reg_1073;
reg   [0:0] cmp134_reg_1073_pp0_iter3_reg;
reg   [0:0] cmp134_reg_1073_pp0_iter4_reg;
reg   [0:0] cmp134_reg_1073_pp0_iter5_reg;
reg   [0:0] cmp134_reg_1073_pp0_iter6_reg;
reg   [0:0] cmp134_reg_1073_pp0_iter7_reg;
reg   [2:0] din_keep_reg_1078;
reg   [2:0] din_keep_reg_1078_pp0_iter3_reg;
reg   [2:0] din_keep_reg_1078_pp0_iter4_reg;
reg   [2:0] din_keep_reg_1078_pp0_iter5_reg;
reg   [2:0] din_keep_reg_1078_pp0_iter6_reg;
reg   [2:0] din_keep_reg_1078_pp0_iter7_reg;
reg   [2:0] din_strb_reg_1083;
reg   [2:0] din_strb_reg_1083_pp0_iter3_reg;
reg   [2:0] din_strb_reg_1083_pp0_iter4_reg;
reg   [2:0] din_strb_reg_1083_pp0_iter5_reg;
reg   [2:0] din_strb_reg_1083_pp0_iter6_reg;
reg   [2:0] din_strb_reg_1083_pp0_iter7_reg;
reg   [0:0] din_id_reg_1088;
reg   [0:0] din_id_reg_1088_pp0_iter3_reg;
reg   [0:0] din_id_reg_1088_pp0_iter4_reg;
reg   [0:0] din_id_reg_1088_pp0_iter5_reg;
reg   [0:0] din_id_reg_1088_pp0_iter6_reg;
reg   [0:0] din_id_reg_1088_pp0_iter7_reg;
reg   [0:0] din_dest_reg_1093;
reg   [0:0] din_dest_reg_1093_pp0_iter3_reg;
reg   [0:0] din_dest_reg_1093_pp0_iter4_reg;
reg   [0:0] din_dest_reg_1093_pp0_iter5_reg;
reg   [0:0] din_dest_reg_1093_pp0_iter6_reg;
reg   [0:0] din_dest_reg_1093_pp0_iter7_reg;
reg   [7:0] g_reg_1098;
reg   [7:0] g_reg_1098_pp0_iter3_reg;
reg   [9:0] line1_addr_reg_1113;
reg   [9:0] line0_addr_reg_1118;
reg   [9:0] line0_addr_reg_1118_pp0_iter3_reg;
reg   [9:0] line0_addr_reg_1118_pp0_iter4_reg;
reg   [9:0] line0_addr_reg_1118_pp0_iter5_reg;
wire   [0:0] and_ln102_fu_503_p2;
reg   [0:0] and_ln102_reg_1124;
reg   [0:0] and_ln102_reg_1124_pp0_iter3_reg;
reg   [0:0] and_ln102_reg_1124_pp0_iter4_reg;
reg   [0:0] and_ln102_reg_1124_pp0_iter5_reg;
reg   [0:0] and_ln102_reg_1124_pp0_iter6_reg;
reg   [0:0] and_ln102_reg_1124_pp0_iter7_reg;
wire   [0:0] dout_last_fu_509_p2;
reg   [0:0] dout_last_reg_1131;
reg   [0:0] dout_last_reg_1131_pp0_iter3_reg;
reg   [0:0] dout_last_reg_1131_pp0_iter4_reg;
reg   [0:0] dout_last_reg_1131_pp0_iter5_reg;
reg   [0:0] dout_last_reg_1131_pp0_iter6_reg;
reg   [0:0] dout_last_reg_1131_pp0_iter7_reg;
reg   [7:0] line0_load_reg_1137;
reg   [7:0] line0_load_reg_1137_pp0_iter4_reg;
reg   [7:0] line0_load_reg_1137_pp0_iter5_reg;
wire   [15:0] mul_ln16_1_fu_533_p2;
reg   [7:0] line1_load_reg_1148;
reg   [7:0] line1_load_reg_1148_pp0_iter5_reg;
reg   [7:0] gray_reg_1154;
wire   [8:0] add_ln104_fu_613_p2;
reg   [8:0] add_ln104_reg_1161;
wire   [10:0] sub_ln107_1_fu_659_p2;
reg   [10:0] sub_ln107_1_reg_1166;
wire   [9:0] trunc_ln112_fu_796_p1;
reg   [9:0] trunc_ln112_reg_1171;
wire   [9:0] trunc_ln113_fu_800_p1;
reg   [9:0] trunc_ln113_reg_1177;
reg   [0:0] tmp_2_reg_1183;
reg   [0:0] tmp_3_reg_1188;
wire   [7:0] edge_fu_867_p2;
reg   [7:0] edge_reg_1193;
wire   [0:0] icmp_ln120_fu_889_p2;
reg   [0:0] icmp_ln120_reg_1198;
reg    ap_condition_exit_pp0_iter2_stage0;
wire   [63:0] zext_ln72_fu_433_p1;
reg   [7:0] p_0_0_011261621_fu_142;
wire   [7:0] select_ln65_4_fu_565_p3;
wire    ap_loop_init;
reg   [7:0] p_0_0_011251622_fu_146;
reg   [7:0] p_0_0_011241623_fu_150;
wire   [7:0] select_ln65_3_fu_690_p3;
reg   [7:0] p_0_0_011231624_fu_154;
reg   [7:0] p_0_0_011221625_fu_158;
wire   [7:0] select_ln65_1_fu_551_p3;
reg   [7:0] p_0_0_011211626_fu_162;
reg   [10:0] x_fu_166;
wire   [10:0] add_ln72_fu_514_p2;
reg   [30:0] y_fu_170;
wire   [30:0] select_ln65_6_fu_376_p3;
reg   [40:0] indvar_flatten_fu_174;
wire   [40:0] add_ln65_fu_332_p2;
wire    ap_block_pp0_stage0;
reg    ap_block_pp0_stage0_01001_grp1;
reg    line0_ce0_local;
reg    line0_we1_local;
reg    line0_ce1_local;
reg    line1_ce1_local;
reg    line1_we1_local;
wire   [31:0] zext_ln72_1_fu_346_p1;
wire   [30:0] add_ln65_1_fu_370_p2;
wire   [9:0] trunc_ln72_fu_358_p1;
wire   [9:0] select_ln65_7_fu_388_p3;
wire   [10:0] select_ln65_fu_362_p3;
wire   [29:0] tmp_fu_406_p4;
wire   [31:0] zext_ln65_fu_384_p1;
wire   [7:0] r_fu_459_p3;
wire   [7:0] b_fu_475_p1;
wire   [9:0] tmp_1_fu_487_p4;
wire   [0:0] icmp_fu_416_p2;
wire   [0:0] icmp_ln102_fu_497_p2;
wire   [31:0] select_ln65_7_cast_fu_396_p1;
wire   [7:0] mul_ln16_1_fu_533_p0;
wire   [8:0] mul_ln16_1_fu_533_p1;
wire   [12:0] grp_fu_955_p3;
wire   [15:0] zext_ln16_2_fu_579_p1;
wire   [15:0] grp_fu_946_p3;
(* use_dsp48 = "no" *) wire   [15:0] acc_fu_582_p2;
wire   [7:0] select_ln65_5_fu_572_p3;
wire   [7:0] select_ln65_2_fu_558_p3;
wire   [8:0] zext_ln105_3_fu_609_p1;
wire   [8:0] zext_ln103_1_fu_601_p1;
wire   [8:0] shl_ln1_fu_619_p3;
wire   [8:0] shl_ln2_fu_631_p3;
wire   [9:0] zext_ln108_1_fu_639_p1;
wire   [9:0] zext_ln105_2_fu_605_p1;
wire   [9:0] add_ln108_fu_643_p2;
wire   [10:0] zext_ln107_fu_649_p1;
wire   [10:0] zext_ln108_fu_627_p1;
wire   [10:0] sub_ln107_fu_653_p2;
wire   [10:0] zext_ln104_fu_597_p1;
wire   [7:0] select_ln65_8_fu_700_p3;
wire   [8:0] shl_ln_fu_707_p3;
wire   [8:0] shl_ln104_1_fu_719_p3;
wire   [9:0] zext_ln104_3_fu_736_p1;
wire   [9:0] zext_ln104_1_fu_715_p1;
wire   [9:0] add_ln104_1_fu_739_p2;
wire   [10:0] zext_ln103_fu_697_p1;
wire   [10:0] zext_ln104_4_fu_745_p1;
wire   [9:0] zext_ln105_fu_726_p1;
wire   [9:0] zext_ln104_2_fu_733_p1;
wire   [9:0] add_ln105_fu_755_p2;
wire   [10:0] zext_ln105_4_fu_761_p1;
wire   [10:0] sub_ln104_fu_749_p2;
wire   [10:0] sub_ln108_fu_771_p2;
wire   [10:0] zext_ln105_1_fu_730_p1;
wire   [10:0] gx_fu_765_p2;
wire   [10:0] gy_fu_776_p2;
wire   [10:0] gx_2_fu_782_p3;
wire   [10:0] gy_2_fu_789_p3;
wire   [9:0] ax_fu_829_p2;
wire   [9:0] ax_1_fu_834_p3;
wire   [9:0] ay_fu_844_p2;
wire   [9:0] ay_1_fu_849_p3;
wire   [7:0] trunc_ln116_fu_855_p1;
wire   [7:0] trunc_ln115_fu_840_p1;
wire   [10:0] zext_ln118_1_fu_863_p1;
wire   [10:0] zext_ln118_fu_859_p1;
wire   [10:0] mag_fu_873_p2;
wire   [2:0] tmp_4_fu_879_p4;
wire   [7:0] edge_1_fu_895_p3;
wire   [0:0] or_ln123_1_fu_912_p2;
wire   [0:0] or_ln123_fu_908_p2;
wire   [0:0] border_fu_916_p2;
wire   [7:0] edge_2_fu_901_p3;
wire   [7:0] edge_3_fu_922_p3;
wire   [7:0] grp_fu_946_p0;
wire   [6:0] grp_fu_946_p1;
wire   [7:0] grp_fu_955_p0;
wire   [4:0] grp_fu_955_p1;
wire   [7:0] grp_fu_955_p2;
reg    grp_fu_946_ce;
reg    grp_fu_955_ce;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg    ap_loop_exit_ready_pp0_iter2_reg;
reg    ap_loop_exit_ready_pp0_iter3_reg;
reg    ap_loop_exit_ready_pp0_iter4_reg;
reg    ap_loop_exit_ready_pp0_iter5_reg;
reg    ap_loop_exit_ready_pp0_iter6_reg;
reg    ap_loop_exit_ready_pp0_iter7_reg;
reg   [0:0] ap_NS_fsm;
reg    ap_block_pp0;
reg    ap_enable_operation_77;
reg    ap_enable_state3_pp0_iter2_stage0;
wire    ap_enable_operation_88;
reg    ap_enable_state4_pp0_iter3_stage0;
wire    ap_enable_operation_131;
reg    ap_enable_state7_pp0_iter6_stage0;
wire    ap_enable_operation_89;
wire    ap_enable_operation_87;
wire    ap_enable_operation_97;
reg    ap_enable_state5_pp0_iter4_stage0;
wire    ap_enable_pp0;
wire    ap_start_int;
wire    ap_ready_sig;
wire    ap_done_sig;
wire   [14:0] grp_fu_946_p00;
wire   [12:0] grp_fu_955_p00;
wire   [15:0] mul_ln16_1_fu_533_p00;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
#0 ap_enable_reg_pp0_iter4 = 1'b0;
#0 ap_enable_reg_pp0_iter5 = 1'b0;
#0 ap_enable_reg_pp0_iter6 = 1'b0;
#0 ap_enable_reg_pp0_iter7 = 1'b0;
#0 ap_enable_reg_pp0_iter8 = 1'b0;
#0 p_0_0_011261621_fu_142 = 8'd0;
#0 p_0_0_011251622_fu_146 = 8'd0;
#0 p_0_0_011241623_fu_150 = 8'd0;
#0 p_0_0_011231624_fu_154 = 8'd0;
#0 p_0_0_011221625_fu_158 = 8'd0;
#0 p_0_0_011211626_fu_162 = 8'd0;
#0 x_fu_166 = 11'd0;
#0 y_fu_170 = 31'd0;
#0 indvar_flatten_fu_174 = 41'd0;
#0 ap_done_reg = 1'b0;
end

sobel_rgb_axis_mul_8ns_9ns_16_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 9 ),
    .dout_WIDTH( 16 ))
mul_8ns_9ns_16_1_1_U4(
    .din0(mul_ln16_1_fu_533_p0),
    .din1(mul_ln16_1_fu_533_p1),
    .dout(mul_ln16_1_fu_533_p2)
);

sobel_rgb_axis_mac_muladd_8ns_7ns_16ns_16_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 7 ),
    .din2_WIDTH( 16 ),
    .dout_WIDTH( 16 ))
mac_muladd_8ns_7ns_16ns_16_4_1_U5(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_946_p0),
    .din1(grp_fu_946_p1),
    .din2(mul_ln16_1_fu_533_p2),
    .ce(grp_fu_946_ce),
    .dout(grp_fu_946_p3)
);

sobel_rgb_axis_mac_muladd_8ns_5ns_8ns_13_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 5 ),
    .din2_WIDTH( 8 ),
    .dout_WIDTH( 13 ))
mac_muladd_8ns_5ns_8ns_13_4_1_U6(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_955_p0),
    .din1(grp_fu_955_p1),
    .din2(grp_fu_955_p2),
    .ce(grp_fu_955_ce),
    .dout(grp_fu_955_p3)
);

sobel_rgb_axis_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready_sig),
    .ap_done(ap_done_sig),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter1_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((ap_loop_exit_ready_pp0_iter7_reg == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter1_stage0)) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter2_stage0)) begin
            ap_enable_reg_pp0_iter3 <= 1'b0;
        end else if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter4 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter5 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter6 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter7 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter7 <= ap_enable_reg_pp0_iter6;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter8 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter8 <= ap_enable_reg_pp0_iter7;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            indvar_flatten_fu_174 <= 41'd0;
        end else if (((icmp_ln65_fu_327_p2 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
            indvar_flatten_fu_174 <= add_ln65_fu_332_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001_grp1)) begin
        if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            p_0_0_011211626_fu_162 <= 8'd0;
        end else if ((ap_enable_reg_pp0_iter5 == 1'b1)) begin
            p_0_0_011211626_fu_162 <= {{acc_fu_582_p2[15:8]}};
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001_grp1)) begin
        if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            p_0_0_011221625_fu_158 <= 8'd0;
        end else if ((ap_enable_reg_pp0_iter5 == 1'b1)) begin
            p_0_0_011221625_fu_158 <= select_ln65_1_fu_551_p3;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001_grp1)) begin
        if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            p_0_0_011231624_fu_154 <= 8'd0;
        end else if ((ap_enable_reg_pp0_iter6 == 1'b1)) begin
            p_0_0_011231624_fu_154 <= line0_load_reg_1137_pp0_iter5_reg;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001_grp1)) begin
        if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            p_0_0_011241623_fu_150 <= 8'd0;
        end else if ((ap_enable_reg_pp0_iter6 == 1'b1)) begin
            p_0_0_011241623_fu_150 <= select_ln65_3_fu_690_p3;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001_grp1)) begin
        if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            p_0_0_011251622_fu_146 <= 8'd0;
        end else if ((ap_enable_reg_pp0_iter5 == 1'b1)) begin
            p_0_0_011251622_fu_146 <= line1_load_reg_1148;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001_grp1)) begin
        if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            p_0_0_011261621_fu_142 <= 8'd0;
        end else if ((ap_enable_reg_pp0_iter5 == 1'b1)) begin
            p_0_0_011261621_fu_142 <= select_ln65_4_fu_565_p3;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001_grp1)) begin
        if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            x_fu_166 <= 11'd0;
        end else if (((icmp_ln65_reg_1047 == 1'd0) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
            x_fu_166 <= add_ln72_fu_514_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001_grp1)) begin
        if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            y_fu_170 <= 31'd0;
        end else if (((icmp_ln65_reg_1047 == 1'd0) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
            y_fu_170 <= select_ln65_6_fu_376_p3;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001_grp1)) begin
        add_ln104_reg_1161 <= add_ln104_fu_613_p2;
        and_ln102_reg_1124 <= and_ln102_fu_503_p2;
        and_ln102_reg_1124_pp0_iter3_reg <= and_ln102_reg_1124;
        and_ln102_reg_1124_pp0_iter4_reg <= and_ln102_reg_1124_pp0_iter3_reg;
        and_ln102_reg_1124_pp0_iter5_reg <= and_ln102_reg_1124_pp0_iter4_reg;
        and_ln102_reg_1124_pp0_iter6_reg <= and_ln102_reg_1124_pp0_iter5_reg;
        and_ln102_reg_1124_pp0_iter7_reg <= and_ln102_reg_1124_pp0_iter6_reg;
        cmp130_reg_1067 <= cmp130_fu_422_p2;
        cmp130_reg_1067_pp0_iter3_reg <= cmp130_reg_1067;
        cmp130_reg_1067_pp0_iter4_reg <= cmp130_reg_1067_pp0_iter3_reg;
        cmp130_reg_1067_pp0_iter5_reg <= cmp130_reg_1067_pp0_iter4_reg;
        cmp130_reg_1067_pp0_iter6_reg <= cmp130_reg_1067_pp0_iter5_reg;
        cmp130_reg_1067_pp0_iter7_reg <= cmp130_reg_1067_pp0_iter6_reg;
        cmp134_reg_1073 <= cmp134_fu_428_p2;
        cmp134_reg_1073_pp0_iter3_reg <= cmp134_reg_1073;
        cmp134_reg_1073_pp0_iter4_reg <= cmp134_reg_1073_pp0_iter3_reg;
        cmp134_reg_1073_pp0_iter5_reg <= cmp134_reg_1073_pp0_iter4_reg;
        cmp134_reg_1073_pp0_iter6_reg <= cmp134_reg_1073_pp0_iter5_reg;
        cmp134_reg_1073_pp0_iter7_reg <= cmp134_reg_1073_pp0_iter6_reg;
        din_dest_reg_1093 <= in_axis_TDEST;
        din_dest_reg_1093_pp0_iter3_reg <= din_dest_reg_1093;
        din_dest_reg_1093_pp0_iter4_reg <= din_dest_reg_1093_pp0_iter3_reg;
        din_dest_reg_1093_pp0_iter5_reg <= din_dest_reg_1093_pp0_iter4_reg;
        din_dest_reg_1093_pp0_iter6_reg <= din_dest_reg_1093_pp0_iter5_reg;
        din_dest_reg_1093_pp0_iter7_reg <= din_dest_reg_1093_pp0_iter6_reg;
        din_id_reg_1088 <= in_axis_TID;
        din_id_reg_1088_pp0_iter3_reg <= din_id_reg_1088;
        din_id_reg_1088_pp0_iter4_reg <= din_id_reg_1088_pp0_iter3_reg;
        din_id_reg_1088_pp0_iter5_reg <= din_id_reg_1088_pp0_iter4_reg;
        din_id_reg_1088_pp0_iter6_reg <= din_id_reg_1088_pp0_iter5_reg;
        din_id_reg_1088_pp0_iter7_reg <= din_id_reg_1088_pp0_iter6_reg;
        din_keep_reg_1078 <= in_axis_TKEEP;
        din_keep_reg_1078_pp0_iter3_reg <= din_keep_reg_1078;
        din_keep_reg_1078_pp0_iter4_reg <= din_keep_reg_1078_pp0_iter3_reg;
        din_keep_reg_1078_pp0_iter5_reg <= din_keep_reg_1078_pp0_iter4_reg;
        din_keep_reg_1078_pp0_iter6_reg <= din_keep_reg_1078_pp0_iter5_reg;
        din_keep_reg_1078_pp0_iter7_reg <= din_keep_reg_1078_pp0_iter6_reg;
        din_strb_reg_1083 <= in_axis_TSTRB;
        din_strb_reg_1083_pp0_iter3_reg <= din_strb_reg_1083;
        din_strb_reg_1083_pp0_iter4_reg <= din_strb_reg_1083_pp0_iter3_reg;
        din_strb_reg_1083_pp0_iter5_reg <= din_strb_reg_1083_pp0_iter4_reg;
        din_strb_reg_1083_pp0_iter6_reg <= din_strb_reg_1083_pp0_iter5_reg;
        din_strb_reg_1083_pp0_iter7_reg <= din_strb_reg_1083_pp0_iter6_reg;
        dout_last_reg_1131 <= dout_last_fu_509_p2;
        dout_last_reg_1131_pp0_iter3_reg <= dout_last_reg_1131;
        dout_last_reg_1131_pp0_iter4_reg <= dout_last_reg_1131_pp0_iter3_reg;
        dout_last_reg_1131_pp0_iter5_reg <= dout_last_reg_1131_pp0_iter4_reg;
        dout_last_reg_1131_pp0_iter6_reg <= dout_last_reg_1131_pp0_iter5_reg;
        dout_last_reg_1131_pp0_iter7_reg <= dout_last_reg_1131_pp0_iter6_reg;
        edge_reg_1193 <= edge_fu_867_p2;
        first_iter_0_reg_1061 <= first_iter_0_fu_400_p2;
        first_iter_0_reg_1061_pp0_iter3_reg <= first_iter_0_reg_1061;
        first_iter_0_reg_1061_pp0_iter4_reg <= first_iter_0_reg_1061_pp0_iter3_reg;
        first_iter_0_reg_1061_pp0_iter5_reg <= first_iter_0_reg_1061_pp0_iter4_reg;
        first_iter_0_reg_1061_pp0_iter6_reg <= first_iter_0_reg_1061_pp0_iter5_reg;
        first_iter_0_reg_1061_pp0_iter7_reg <= first_iter_0_reg_1061_pp0_iter6_reg;
        g_reg_1098 <= {{in_axis_TDATA[15:8]}};
        g_reg_1098_pp0_iter3_reg <= g_reg_1098;
        gray_reg_1154 <= {{acc_fu_582_p2[15:8]}};
        icmp_ln120_reg_1198 <= icmp_ln120_fu_889_p2;
        icmp_ln72_reg_1051 <= icmp_ln72_fu_350_p2;
        icmp_ln72_reg_1051_pp0_iter3_reg <= icmp_ln72_reg_1051;
        icmp_ln72_reg_1051_pp0_iter4_reg <= icmp_ln72_reg_1051_pp0_iter3_reg;
        icmp_ln72_reg_1051_pp0_iter5_reg <= icmp_ln72_reg_1051_pp0_iter4_reg;
        line0_addr_reg_1118 <= zext_ln72_fu_433_p1;
        line0_addr_reg_1118_pp0_iter3_reg <= line0_addr_reg_1118;
        line0_addr_reg_1118_pp0_iter4_reg <= line0_addr_reg_1118_pp0_iter3_reg;
        line0_addr_reg_1118_pp0_iter5_reg <= line0_addr_reg_1118_pp0_iter4_reg;
        line0_load_reg_1137_pp0_iter4_reg <= line0_load_reg_1137;
        line0_load_reg_1137_pp0_iter5_reg <= line0_load_reg_1137_pp0_iter4_reg;
        line1_addr_reg_1113 <= zext_ln72_fu_433_p1;
        line1_load_reg_1148_pp0_iter5_reg <= line1_load_reg_1148;
        sub_ln107_1_reg_1166 <= sub_ln107_1_fu_659_p2;
        tmp_2_reg_1183 <= gx_2_fu_782_p3[32'd10];
        tmp_3_reg_1188 <= gy_2_fu_789_p3[32'd10];
        trunc_ln112_reg_1171 <= trunc_ln112_fu_796_p1;
        trunc_ln113_reg_1177 <= trunc_ln113_fu_800_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready;
        icmp_ln65_reg_1047 <= icmp_ln65_fu_327_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        ap_loop_exit_ready_pp0_iter3_reg <= ap_loop_exit_ready_pp0_iter2_reg;
        ap_loop_exit_ready_pp0_iter4_reg <= ap_loop_exit_ready_pp0_iter3_reg;
        ap_loop_exit_ready_pp0_iter5_reg <= ap_loop_exit_ready_pp0_iter4_reg;
        ap_loop_exit_ready_pp0_iter6_reg <= ap_loop_exit_ready_pp0_iter5_reg;
        ap_loop_exit_ready_pp0_iter7_reg <= ap_loop_exit_ready_pp0_iter6_reg;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001_grp1) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        line0_load_reg_1137 <= line0_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001_grp1) & (ap_enable_reg_pp0_iter4 == 1'b1))) begin
        line1_load_reg_1148 <= line1_q1;
    end
end

always @ (*) begin
    if (((icmp_ln65_fu_327_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_condition_exit_pp0_iter1_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter1_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (icmp_ln65_reg_1047 == 1'd1) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        ap_condition_exit_pp0_iter2_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter2_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_exit_ready_pp0_iter7_reg == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b0) & (ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter8 == 1'b0) & (ap_enable_reg_pp0_iter7 == 1'b0) & (ap_enable_reg_pp0_iter6 == 1'b0) & (ap_enable_reg_pp0_iter5 == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if ((1'b0 == ap_block_pp0_stage0_11001_grp1)) begin
        grp_fu_946_ce = 1'b1;
    end else begin
        grp_fu_946_ce = 1'b0;
    end
end

always @ (*) begin
    if ((1'b0 == ap_block_pp0_stage0_11001_grp1)) begin
        grp_fu_955_ce = 1'b1;
    end else begin
        grp_fu_955_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_grp1) & (icmp_ln65_reg_1047 == 1'd0) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        in_axis_TDATA_blk_n = in_axis_TVALID;
    end else begin
        in_axis_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001_grp1) & (icmp_ln65_reg_1047 == 1'd0) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        in_axis_TREADY = 1'b1;
    end else begin
        in_axis_TREADY = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001_grp1) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        line0_ce0_local = 1'b1;
    end else begin
        line0_ce0_local = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001_grp1) & (ap_enable_reg_pp0_iter6 == 1'b1))) begin
        line0_ce1_local = 1'b1;
    end else begin
        line0_ce1_local = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001_grp1) & (ap_enable_reg_pp0_iter6 == 1'b1))) begin
        line0_we1_local = 1'b1;
    end else begin
        line0_we1_local = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001_grp1) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        line1_ce1_local = 1'b1;
    end else begin
        line1_ce1_local = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001_grp1) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        line1_we1_local = 1'b1;
    end else begin
        line1_we1_local = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_grp1) & (ap_enable_reg_pp0_iter8 == 1'b1))) begin
        out_axis_TDATA_blk_n = out_axis_TREADY;
    end else begin
        out_axis_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001_grp1) & (ap_enable_reg_pp0_iter8 == 1'b1))) begin
        out_axis_TVALID = 1'b1;
    end else begin
        out_axis_TVALID = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign acc_fu_582_p2 = (zext_ln16_2_fu_579_p1 + grp_fu_946_p3);

assign add_ln104_1_fu_739_p2 = (zext_ln104_3_fu_736_p1 + zext_ln104_1_fu_715_p1);

assign add_ln104_fu_613_p2 = (zext_ln105_3_fu_609_p1 + zext_ln103_1_fu_601_p1);

assign add_ln105_fu_755_p2 = (zext_ln105_fu_726_p1 + zext_ln104_2_fu_733_p1);

assign add_ln108_fu_643_p2 = (zext_ln108_1_fu_639_p1 + zext_ln105_2_fu_605_p1);

assign add_ln65_1_fu_370_p2 = (y_fu_170 + 31'd1);

assign add_ln65_fu_332_p2 = (indvar_flatten_fu_174 + 41'd1);

assign add_ln72_fu_514_p2 = (select_ln65_fu_362_p3 + 11'd1);

assign and_ln102_fu_503_p2 = (icmp_ln102_fu_497_p2 & icmp_fu_416_p2);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

always @ (*) begin
    ap_block_pp0 = ((ap_ST_fsm_pp0_stage0 == ap_CS_fsm) & (1'b1 == ap_block_pp0_stage0_subdone));
end

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001_grp1 = (((out_axis_TREADY == 1'b0) & (ap_enable_reg_pp0_iter8 == 1'b1)) | ((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_block_state3_pp0_stage0_iter2_grp1)));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = (((out_axis_TREADY == 1'b0) & (ap_enable_reg_pp0_iter8 == 1'b1)) | ((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_block_state3_pp0_stage0_iter2_grp1)));
end

assign ap_block_pp0_stage0_11001_grp0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_11001_grp1 = (((out_axis_TREADY == 1'b0) & (ap_enable_reg_pp0_iter8 == 1'b1)) | ((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_block_state3_pp0_stage0_iter2_grp1)));
end

assign ap_block_pp0_stage0_grp1 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_subdone = (((out_axis_TREADY == 1'b0) & (ap_enable_reg_pp0_iter8 == 1'b1)) | ((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_block_state3_pp0_stage0_iter2_grp1)));
end

assign ap_block_pp0_stage0_subdone_grp0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state3_pp0_stage0_iter2_grp1 = ((icmp_ln65_reg_1047 == 1'd0) & (in_axis_TVALID == 1'b0));
end

assign ap_done = ap_done_sig;

assign ap_enable_operation_131 = (1'b1 == 1'b1);

always @ (*) begin
    ap_enable_operation_77 = (icmp_ln65_reg_1047 == 1'd0);
end

assign ap_enable_operation_87 = (1'b1 == 1'b1);

assign ap_enable_operation_88 = (1'b1 == 1'b1);

assign ap_enable_operation_89 = (1'b1 == 1'b1);

assign ap_enable_operation_97 = (1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start_int;

always @ (*) begin
    ap_enable_state3_pp0_iter2_stage0 = ((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0));
end

always @ (*) begin
    ap_enable_state4_pp0_iter3_stage0 = ((ap_enable_reg_pp0_iter3 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0));
end

always @ (*) begin
    ap_enable_state5_pp0_iter4_stage0 = ((ap_enable_reg_pp0_iter4 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0));
end

always @ (*) begin
    ap_enable_state7_pp0_iter6_stage0 = ((ap_enable_reg_pp0_iter6 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0));
end

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter1_stage0;

assign ap_ready = ap_ready_sig;

assign ax_1_fu_834_p3 = ((tmp_2_reg_1183[0:0] == 1'b1) ? ax_fu_829_p2 : trunc_ln112_reg_1171);

assign ax_fu_829_p2 = (10'd0 - trunc_ln112_reg_1171);

assign ay_1_fu_849_p3 = ((tmp_3_reg_1188[0:0] == 1'b1) ? ay_fu_844_p2 : trunc_ln113_reg_1177);

assign ay_fu_844_p2 = (10'd0 - trunc_ln113_reg_1177);

assign b_fu_475_p1 = in_axis_TDATA[7:0];

assign border_fu_916_p2 = (or_ln123_fu_908_p2 | or_ln123_1_fu_912_p2);

assign cmp130_fu_422_p2 = ((select_ln65_6_fu_376_p3 == 31'd0) ? 1'b1 : 1'b0);

assign cmp134_fu_428_p2 = ((zext_ln65_fu_384_p1 == sub133) ? 1'b1 : 1'b0);

assign dout_last_fu_509_p2 = ((select_ln65_7_cast_fu_396_p1 == sub) ? 1'b1 : 1'b0);

assign edge_1_fu_895_p3 = ((icmp_ln120_reg_1198[0:0] == 1'b1) ? 8'd255 : edge_reg_1193);

assign edge_2_fu_901_p3 = ((and_ln102_reg_1124_pp0_iter7_reg[0:0] == 1'b1) ? edge_1_fu_895_p3 : 8'd0);

assign edge_3_fu_922_p3 = ((border_fu_916_p2[0:0] == 1'b1) ? 8'd0 : edge_2_fu_901_p3);

assign edge_fu_867_p2 = (trunc_ln116_fu_855_p1 + trunc_ln115_fu_840_p1);

assign first_iter_0_fu_400_p2 = ((select_ln65_fu_362_p3 == 11'd0) ? 1'b1 : 1'b0);

assign grp_fu_946_p0 = grp_fu_946_p00;

assign grp_fu_946_p00 = r_fu_459_p3;

assign grp_fu_946_p1 = 15'd77;

assign grp_fu_955_p0 = grp_fu_955_p00;

assign grp_fu_955_p00 = b_fu_475_p1;

assign grp_fu_955_p1 = 13'd29;

assign grp_fu_955_p2 = 13'd128;

assign gx_2_fu_782_p3 = ((and_ln102_reg_1124_pp0_iter5_reg[0:0] == 1'b1) ? gx_fu_765_p2 : 11'd0);

assign gx_fu_765_p2 = (zext_ln105_4_fu_761_p1 + sub_ln104_fu_749_p2);

assign gy_2_fu_789_p3 = ((and_ln102_reg_1124_pp0_iter5_reg[0:0] == 1'b1) ? gy_fu_776_p2 : 11'd0);

assign gy_fu_776_p2 = (sub_ln108_fu_771_p2 + zext_ln105_1_fu_730_p1);

assign icmp_fu_416_p2 = ((tmp_fu_406_p4 != 30'd0) ? 1'b1 : 1'b0);

assign icmp_ln102_fu_497_p2 = ((tmp_1_fu_487_p4 != 10'd0) ? 1'b1 : 1'b0);

assign icmp_ln120_fu_889_p2 = ((tmp_4_fu_879_p4 != 3'd0) ? 1'b1 : 1'b0);

assign icmp_ln65_fu_327_p2 = ((indvar_flatten_fu_174 == bound) ? 1'b1 : 1'b0);

assign icmp_ln72_fu_350_p2 = (($signed(zext_ln72_1_fu_346_p1) < $signed(width)) ? 1'b1 : 1'b0);

assign line0_address0 = zext_ln72_fu_433_p1;

assign line0_address1 = line0_addr_reg_1118_pp0_iter5_reg;

assign line0_ce0 = line0_ce0_local;

assign line0_ce1 = line0_ce1_local;

assign line0_d1 = gray_reg_1154;

assign line0_we1 = line0_we1_local;

assign line1_address1 = line1_addr_reg_1113;

assign line1_ce1 = line1_ce1_local;

assign line1_d1 = line0_q0;

assign line1_we1 = line1_we1_local;

assign mag_fu_873_p2 = (zext_ln118_1_fu_863_p1 + zext_ln118_fu_859_p1);

assign mul_ln16_1_fu_533_p0 = mul_ln16_1_fu_533_p00;

assign mul_ln16_1_fu_533_p00 = g_reg_1098_pp0_iter3_reg;

assign mul_ln16_1_fu_533_p1 = 16'd150;

assign or_ln123_1_fu_912_p2 = (dout_last_reg_1131_pp0_iter7_reg | cmp134_reg_1073_pp0_iter7_reg);

assign or_ln123_fu_908_p2 = (first_iter_0_reg_1061_pp0_iter7_reg | cmp130_reg_1067_pp0_iter7_reg);

assign out_axis_TDATA = {{{edge_3_fu_922_p3}, {edge_3_fu_922_p3}}, {edge_3_fu_922_p3}};

assign out_axis_TDEST = din_dest_reg_1093_pp0_iter7_reg;

assign out_axis_TID = din_id_reg_1088_pp0_iter7_reg;

assign out_axis_TKEEP = din_keep_reg_1078_pp0_iter7_reg;

assign out_axis_TLAST = dout_last_reg_1131_pp0_iter7_reg;

assign out_axis_TSTRB = din_strb_reg_1083_pp0_iter7_reg;

assign out_axis_TUSER = (first_iter_0_reg_1061_pp0_iter7_reg & cmp130_reg_1067_pp0_iter7_reg);

assign r_fu_459_p3 = {{in_axis_TDATA[23:16]}};

assign select_ln65_1_fu_551_p3 = ((icmp_ln72_reg_1051_pp0_iter4_reg[0:0] == 1'b1) ? p_0_0_011211626_fu_162 : 8'd0);

assign select_ln65_2_fu_558_p3 = ((icmp_ln72_reg_1051_pp0_iter4_reg[0:0] == 1'b1) ? p_0_0_011221625_fu_158 : 8'd0);

assign select_ln65_3_fu_690_p3 = ((icmp_ln72_reg_1051_pp0_iter5_reg[0:0] == 1'b1) ? p_0_0_011231624_fu_154 : 8'd0);

assign select_ln65_4_fu_565_p3 = ((icmp_ln72_reg_1051_pp0_iter4_reg[0:0] == 1'b1) ? p_0_0_011251622_fu_146 : 8'd0);

assign select_ln65_5_fu_572_p3 = ((icmp_ln72_reg_1051_pp0_iter4_reg[0:0] == 1'b1) ? p_0_0_011261621_fu_142 : 8'd0);

assign select_ln65_6_fu_376_p3 = ((icmp_ln72_fu_350_p2[0:0] == 1'b1) ? y_fu_170 : add_ln65_1_fu_370_p2);

assign select_ln65_7_cast_fu_396_p1 = select_ln65_7_fu_388_p3;

assign select_ln65_7_fu_388_p3 = ((icmp_ln72_fu_350_p2[0:0] == 1'b1) ? trunc_ln72_fu_358_p1 : 10'd0);

assign select_ln65_8_fu_700_p3 = ((icmp_ln72_reg_1051_pp0_iter5_reg[0:0] == 1'b1) ? p_0_0_011241623_fu_150 : 8'd0);

assign select_ln65_fu_362_p3 = ((icmp_ln72_fu_350_p2[0:0] == 1'b1) ? x_fu_166 : 11'd0);

assign shl_ln104_1_fu_719_p3 = {{line0_load_reg_1137_pp0_iter5_reg}, {1'd0}};

assign shl_ln1_fu_619_p3 = {{select_ln65_4_fu_565_p3}, {1'd0}};

assign shl_ln2_fu_631_p3 = {{select_ln65_1_fu_551_p3}, {1'd0}};

assign shl_ln_fu_707_p3 = {{select_ln65_8_fu_700_p3}, {1'd0}};

assign sub_ln104_fu_749_p2 = (zext_ln103_fu_697_p1 - zext_ln104_4_fu_745_p1);

assign sub_ln107_1_fu_659_p2 = (sub_ln107_fu_653_p2 - zext_ln104_fu_597_p1);

assign sub_ln107_fu_653_p2 = (zext_ln107_fu_649_p1 - zext_ln108_fu_627_p1);

assign sub_ln108_fu_771_p2 = (sub_ln107_1_reg_1166 - zext_ln103_fu_697_p1);

assign tmp_1_fu_487_p4 = {{select_ln65_fu_362_p3[10:1]}};

assign tmp_4_fu_879_p4 = {{mag_fu_873_p2[10:8]}};

assign tmp_fu_406_p4 = {{select_ln65_6_fu_376_p3[30:1]}};

assign trunc_ln112_fu_796_p1 = gx_2_fu_782_p3[9:0];

assign trunc_ln113_fu_800_p1 = gy_2_fu_789_p3[9:0];

assign trunc_ln115_fu_840_p1 = ax_1_fu_834_p3[7:0];

assign trunc_ln116_fu_855_p1 = ay_1_fu_849_p3[7:0];

assign trunc_ln72_fu_358_p1 = x_fu_166[9:0];

assign zext_ln103_1_fu_601_p1 = select_ln65_5_fu_572_p3;

assign zext_ln103_fu_697_p1 = line1_load_reg_1148_pp0_iter5_reg;

assign zext_ln104_1_fu_715_p1 = shl_ln_fu_707_p3;

assign zext_ln104_2_fu_733_p1 = gray_reg_1154;

assign zext_ln104_3_fu_736_p1 = add_ln104_reg_1161;

assign zext_ln104_4_fu_745_p1 = add_ln104_1_fu_739_p2;

assign zext_ln104_fu_597_p1 = select_ln65_5_fu_572_p3;

assign zext_ln105_1_fu_730_p1 = gray_reg_1154;

assign zext_ln105_2_fu_605_p1 = select_ln65_2_fu_558_p3;

assign zext_ln105_3_fu_609_p1 = select_ln65_2_fu_558_p3;

assign zext_ln105_4_fu_761_p1 = add_ln105_fu_755_p2;

assign zext_ln105_fu_726_p1 = shl_ln104_1_fu_719_p3;

assign zext_ln107_fu_649_p1 = add_ln108_fu_643_p2;

assign zext_ln108_1_fu_639_p1 = shl_ln2_fu_631_p3;

assign zext_ln108_fu_627_p1 = shl_ln1_fu_619_p3;

assign zext_ln118_1_fu_863_p1 = ay_1_fu_849_p3;

assign zext_ln118_fu_859_p1 = ax_1_fu_834_p3;

assign zext_ln16_2_fu_579_p1 = grp_fu_955_p3;

assign zext_ln65_fu_384_p1 = select_ln65_6_fu_376_p3;

assign zext_ln72_1_fu_346_p1 = x_fu_166;

assign zext_ln72_fu_433_p1 = select_ln65_fu_362_p3;

endmodule //sobel_rgb_axis_sobel_rgb_axis_Pipeline_row_loop_col_loop
