

================================================================
== Vitis HLS Report for 'sobel_rgb_axis_Pipeline_row_loop_col_loop'
================================================================
* Date:           Fri Oct 24 15:14:33 2025

* Version:        2025.1 (Build 6135595 on May 21 2025)
* Project:        KhanhTran_Lab3
* Solution:       hls (Vivado IP Flow Target)
* Product family: artix7
* Target device:  xc7a35t-cpg236-1


================================================================
== Performance Estimates
================================================================
+ Timing: 
    * Summary: 
    +--------+----------+----------+------------+
    |  Clock |  Target  | Estimated| Uncertainty|
    +--------+----------+----------+------------+
    |ap_clk  |  10.00 ns|  7.343 ns|     2.70 ns|
    +--------+----------+----------+------------+

+ Latency: 
    * Summary: 
    +---------+---------+----------+----------+-----+-----+------------------------------------------------+
    |  Latency (cycles) |  Latency (absolute) |  Interval |                    Pipeline                    |
    |   min   |   max   |    min   |    max   | min | max |                      Type                      |
    +---------+---------+----------+----------+-----+-----+------------------------------------------------+
    |        ?|        ?|         ?|         ?|    0|    0|  loop auto-rewind stp (delay=0 clock cycles(s))|
    +---------+---------+----------+----------+-----+-----+------------------------------------------------+

    + Detail: 
        * Instance: 
        N/A

        * Loop: 
        +---------------------+---------+---------+----------+-----------+-----------+------+----------+
        |                     |  Latency (cycles) | Iteration|  Initiation Interval  | Trip |          |
        |      Loop Name      |   min   |   max   |  Latency |  achieved |   target  | Count| Pipelined|
        +---------------------+---------+---------+----------+-----------+-----------+------+----------+
        |- row_loop_col_loop  |        ?|        ?|         8|          1|          1|     ?|       yes|
        +---------------------+---------+---------+----------+-----------+-----------+------+----------+

============================================================
+ Verbose Summary: Synthesis Manager
============================================================
InlineROM: 1
ExposeGlobal: 0
============================================================
+ Verbose Summary: CDFG Model
============================================================
IsTopModel: 0
ResetActiveHigh: 1
IsCombinational: 0
IsDatapathOnly: 0
HasWiredReturn: 1
HasMFsm: 2
HasVarLatency: 1
IsPipeline: 0
IsRtlPipelined: 0
IsInstanceOverlapped: 0
IsDontTouch: 0
HasImplIP: 0
IsGatedGlobalClock: 0

+ Individual pipeline summary: 
  * Pipeline-0: initiation interval (II) = 1, depth = 9


============================================================
+ Verbose Summary: Schedule
============================================================
* Number of FSM states : 9
* Pipeline : 1
  Pipeline-0 : II = 1, D = 9, States = { 1 2 3 4 5 6 7 8 9 }
* Dataflow Pipeline: 0

* FSM state transitions: 
1 --> 2 
2 --> 3 
3 --> 4 
4 --> 5 
5 --> 6 
6 --> 7 
7 --> 8 
8 --> 9 
9 --> 

* FSM state operations: 

State 1 <SV = 0> <Delay = 1.61>
ST_1 : Operation 11 [1/1] (0.00ns)   --->   "%p_0_0_011261621 = alloca i32 1"   --->   Operation 11 'alloca' 'p_0_0_011261621' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 12 [1/1] (0.00ns)   --->   "%p_0_0_011251622 = alloca i32 1"   --->   Operation 12 'alloca' 'p_0_0_011251622' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 13 [1/1] (0.00ns)   --->   "%p_0_0_011241623 = alloca i32 1"   --->   Operation 13 'alloca' 'p_0_0_011241623' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 14 [1/1] (0.00ns)   --->   "%p_0_0_011231624 = alloca i32 1"   --->   Operation 14 'alloca' 'p_0_0_011231624' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 15 [1/1] (0.00ns)   --->   "%p_0_0_011221625 = alloca i32 1"   --->   Operation 15 'alloca' 'p_0_0_011221625' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 16 [1/1] (0.00ns)   --->   "%p_0_0_011211626 = alloca i32 1"   --->   Operation 16 'alloca' 'p_0_0_011211626' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 17 [1/1] (0.00ns)   --->   "%x = alloca i32 1" [sobel.cpp:72]   --->   Operation 17 'alloca' 'x' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 18 [1/1] (0.00ns)   --->   "%y = alloca i32 1" [sobel.cpp:65]   --->   Operation 18 'alloca' 'y' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 19 [1/1] (0.00ns)   --->   "%indvar_flatten = alloca i32 1"   --->   Operation 19 'alloca' 'indvar_flatten' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 20 [1/1] (0.00ns)   --->   "%specaxissidechannel_ln0 = specaxissidechannel void @_ssdm_op_SpecAXISSideChannel, i24 %out_axis_V_data_V, i3 %out_axis_V_keep_V, i3 %out_axis_V_strb_V, i1 %out_axis_V_user_V, i1 %out_axis_V_last_V, i1 %out_axis_V_id_V, i1 %out_axis_V_dest_V, void @empty_7"   --->   Operation 20 'specaxissidechannel' 'specaxissidechannel_ln0' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 21 [1/1] (0.00ns)   --->   "%specaxissidechannel_ln0 = specaxissidechannel void @_ssdm_op_SpecAXISSideChannel, i24 %in_axis_V_data_V, i3 %in_axis_V_keep_V, i3 %in_axis_V_strb_V, i1 %in_axis_V_user_V, i1 %in_axis_V_last_V, i1 %in_axis_V_id_V, i1 %in_axis_V_dest_V, void @empty_8"   --->   Operation 21 'specaxissidechannel' 'specaxissidechannel_ln0' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 22 [1/1] (0.00ns)   --->   "%specmemcore_ln0 = specmemcore void @_ssdm_op_SpecMemCore, i8 %line1, i64 666, i64 22, i64 18446744073709551615"   --->   Operation 22 'specmemcore' 'specmemcore_ln0' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 23 [1/1] (0.00ns)   --->   "%specmemcore_ln0 = specmemcore void @_ssdm_op_SpecMemCore, i8 %line0, i64 666, i64 22, i64 18446744073709551615"   --->   Operation 23 'specmemcore' 'specmemcore_ln0' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 24 [1/1] (0.00ns)   --->   "%specinterface_ln0 = specinterface void @_ssdm_op_SpecInterface, i1 %out_axis_V_dest_V, i1 %out_axis_V_id_V, i1 %out_axis_V_last_V, i1 %out_axis_V_user_V, i3 %out_axis_V_strb_V, i3 %out_axis_V_keep_V, i24 %out_axis_V_data_V, void @empty, i32 0, i32 0, void @empty_0, i32 0, i32 0, void @empty_1, void @empty_1, void @empty_1, i32 0, i32 0, i32 0, i32 0, void @empty_1, void @empty_1, i32 4294967295, i32 0, i32 0"   --->   Operation 24 'specinterface' 'specinterface_ln0' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 25 [1/1] (0.00ns)   --->   "%specinterface_ln0 = specinterface void @_ssdm_op_SpecInterface, i1 %in_axis_V_dest_V, i1 %in_axis_V_id_V, i1 %in_axis_V_last_V, i1 %in_axis_V_user_V, i3 %in_axis_V_strb_V, i3 %in_axis_V_keep_V, i24 %in_axis_V_data_V, void @empty, i32 0, i32 0, void @empty_0, i32 0, i32 0, void @empty_1, void @empty_1, void @empty_1, i32 0, i32 0, i32 0, i32 0, void @empty_1, void @empty_1, i32 4294967295, i32 0, i32 0"   --->   Operation 25 'specinterface' 'specinterface_ln0' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 26 [1/1] (0.00ns)   --->   "%sub_read = read i32 @_ssdm_op_Read.ap_auto.i32, i32 %sub"   --->   Operation 26 'read' 'sub_read' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 27 [1/1] (0.00ns)   --->   "%sub133_read = read i32 @_ssdm_op_Read.ap_auto.i32, i32 %sub133"   --->   Operation 27 'read' 'sub133_read' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 28 [1/1] (0.00ns)   --->   "%bound_read = read i41 @_ssdm_op_Read.ap_auto.i41, i41 %bound"   --->   Operation 28 'read' 'bound_read' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 29 [1/1] (0.00ns)   --->   "%width_read = read i32 @_ssdm_op_Read.ap_auto.i32, i32 %width"   --->   Operation 29 'read' 'width_read' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 30 [1/1] (1.61ns)   --->   "%store_ln0 = store i41 0, i41 %indvar_flatten"   --->   Operation 30 'store' 'store_ln0' <Predicate = true> <Delay = 1.61>
ST_1 : Operation 31 [1/1] (1.61ns)   --->   "%store_ln65 = store i31 0, i31 %y" [sobel.cpp:65]   --->   Operation 31 'store' 'store_ln65' <Predicate = true> <Delay = 1.61>
ST_1 : Operation 32 [1/1] (1.61ns)   --->   "%store_ln72 = store i11 0, i11 %x" [sobel.cpp:72]   --->   Operation 32 'store' 'store_ln72' <Predicate = true> <Delay = 1.61>
ST_1 : Operation 33 [1/1] (1.61ns)   --->   "%store_ln0 = store i8 0, i8 %p_0_0_011211626"   --->   Operation 33 'store' 'store_ln0' <Predicate = true> <Delay = 1.61>
ST_1 : Operation 34 [1/1] (1.61ns)   --->   "%store_ln0 = store i8 0, i8 %p_0_0_011221625"   --->   Operation 34 'store' 'store_ln0' <Predicate = true> <Delay = 1.61>
ST_1 : Operation 35 [1/1] (1.61ns)   --->   "%store_ln0 = store i8 0, i8 %p_0_0_011231624"   --->   Operation 35 'store' 'store_ln0' <Predicate = true> <Delay = 1.61>
ST_1 : Operation 36 [1/1] (1.61ns)   --->   "%store_ln0 = store i8 0, i8 %p_0_0_011241623"   --->   Operation 36 'store' 'store_ln0' <Predicate = true> <Delay = 1.61>
ST_1 : Operation 37 [1/1] (1.61ns)   --->   "%store_ln0 = store i8 0, i8 %p_0_0_011251622"   --->   Operation 37 'store' 'store_ln0' <Predicate = true> <Delay = 1.61>
ST_1 : Operation 38 [1/1] (1.61ns)   --->   "%store_ln0 = store i8 0, i8 %p_0_0_011261621"   --->   Operation 38 'store' 'store_ln0' <Predicate = true> <Delay = 1.61>
ST_1 : Operation 39 [1/1] (0.00ns)   --->   "%br_ln65 = br void %for.body32" [sobel.cpp:65]   --->   Operation 39 'br' 'br_ln65' <Predicate = true> <Delay = 0.00>

State 2 <SV = 1> <Delay = 4.52>
ST_2 : Operation 40 [1/1] (0.00ns)   --->   "%indvar_flatten_load = load i41 %indvar_flatten" [sobel.cpp:65]   --->   Operation 40 'load' 'indvar_flatten_load' <Predicate = true> <Delay = 0.00>
ST_2 : Operation 41 [1/1] (2.91ns)   --->   "%icmp_ln65 = icmp_eq  i41 %indvar_flatten_load, i41 %bound_read" [sobel.cpp:65]   --->   Operation 41 'icmp' 'icmp_ln65' <Predicate = true> <Delay = 2.91> <CoreInst = "Cmp">   --->   Core 9 'Cmp' <Latency = 0> <II = 1> <Delay = 2.91> <FuncUnit> <Opcode : 'seteq' 'setne' 'setle' 'setge' 'setlt' 'setgt'> <InPorts = 2> <OutPorts = 1>
ST_2 : Operation 42 [1/1] (2.91ns)   --->   "%add_ln65 = add i41 %indvar_flatten_load, i41 1" [sobel.cpp:65]   --->   Operation 42 'add' 'add_ln65' <Predicate = true> <Delay = 2.91> <CoreInst = "Adder">   --->   Core 1 'Adder' <Latency = 0> <II = 1> <Delay = 2.91> <FuncUnit> <Opcode : 'add' 'sub'> <InPorts = 2> <OutPorts = 1>
ST_2 : Operation 43 [1/1] (0.00ns)   --->   "%br_ln65 = br i1 %icmp_ln65, void %for.inc161, void %for.end163.exitStub" [sobel.cpp:65]   --->   Operation 43 'br' 'br_ln65' <Predicate = true> <Delay = 0.00>
ST_2 : Operation 44 [1/1] (1.61ns)   --->   "%store_ln65 = store i41 %add_ln65, i41 %indvar_flatten" [sobel.cpp:65]   --->   Operation 44 'store' 'store_ln65' <Predicate = (!icmp_ln65)> <Delay = 1.61>

State 3 <SV = 2> <Delay = 7.34>
ST_3 : Operation 45 [1/1] (0.00ns)   --->   "%x_1 = load i11 %x" [sobel.cpp:72]   --->   Operation 45 'load' 'x_1' <Predicate = true> <Delay = 0.00>
ST_3 : Operation 46 [1/1] (0.00ns)   --->   "%zext_ln72_1 = zext i11 %x_1" [sobel.cpp:72]   --->   Operation 46 'zext' 'zext_ln72_1' <Predicate = true> <Delay = 0.00>
ST_3 : Operation 47 [1/1] (2.70ns)   --->   "%icmp_ln72 = icmp_slt  i32 %zext_ln72_1, i32 %width_read" [sobel.cpp:72]   --->   Operation 47 'icmp' 'icmp_ln72' <Predicate = true> <Delay = 2.70> <CoreInst = "Cmp">   --->   Core 9 'Cmp' <Latency = 0> <II = 1> <Delay = 2.70> <FuncUnit> <Opcode : 'seteq' 'setne' 'setle' 'setge' 'setlt' 'setgt'> <InPorts = 2> <OutPorts = 1>
ST_3 : Operation 48 [1/1] (0.00ns)   --->   "%y_load = load i31 %y" [sobel.cpp:65]   --->   Operation 48 'load' 'y_load' <Predicate = (!icmp_ln65)> <Delay = 0.00>
ST_3 : Operation 49 [1/1] (0.00ns) (grouped into LUT with out node dout_last)   --->   "%trunc_ln72 = trunc i11 %x_1" [sobel.cpp:72]   --->   Operation 49 'trunc' 'trunc_ln72' <Predicate = (!icmp_ln65)> <Delay = 0.00>
ST_3 : Operation 50 [1/1] (0.90ns)   --->   "%select_ln65 = select i1 %icmp_ln72, i11 %x_1, i11 0" [sobel.cpp:65]   --->   Operation 50 'select' 'select_ln65' <Predicate = (!icmp_ln65)> <Delay = 0.90> <CoreInst = "Sel">   --->   Core 73 'Sel' <Latency = 0> <II = 1> <Delay = 0.90> <FuncUnit> <Opcode : 'select'> <InPorts = 3> <OutPorts = 1>
ST_3 : Operation 51 [1/1] (2.66ns)   --->   "%add_ln65_1 = add i31 %y_load, i31 1" [sobel.cpp:65]   --->   Operation 51 'add' 'add_ln65_1' <Predicate = (!icmp_ln65)> <Delay = 2.66> <CoreInst = "Adder">   --->   Core 1 'Adder' <Latency = 0> <II = 1> <Delay = 2.66> <FuncUnit> <Opcode : 'add' 'sub'> <InPorts = 2> <OutPorts = 1>
ST_3 : Operation 52 [1/1] (0.94ns)   --->   "%select_ln65_6 = select i1 %icmp_ln72, i31 %y_load, i31 %add_ln65_1" [sobel.cpp:65]   --->   Operation 52 'select' 'select_ln65_6' <Predicate = (!icmp_ln65)> <Delay = 0.94> <CoreInst = "Sel">   --->   Core 73 'Sel' <Latency = 0> <II = 1> <Delay = 0.94> <FuncUnit> <Opcode : 'select'> <InPorts = 3> <OutPorts = 1>
ST_3 : Operation 53 [1/1] (0.00ns)   --->   "%zext_ln65 = zext i31 %select_ln65_6" [sobel.cpp:65]   --->   Operation 53 'zext' 'zext_ln65' <Predicate = (!icmp_ln65)> <Delay = 0.00>
ST_3 : Operation 54 [1/1] (0.00ns) (grouped into LUT with out node dout_last)   --->   "%select_ln65_7 = select i1 %icmp_ln72, i10 %trunc_ln72, i10 0" [sobel.cpp:65]   --->   Operation 54 'select' 'select_ln65_7' <Predicate = (!icmp_ln65)> <Delay = 0.00> <CoreInst = "Sel">   --->   Core 73 'Sel' <Latency = 0> <II = 1> <Delay = 1.12> <FuncUnit> <Opcode : 'select'> <InPorts = 3> <OutPorts = 1>
ST_3 : Operation 55 [1/1] (0.00ns) (grouped into LUT with out node dout_last)   --->   "%select_ln65_7_cast = zext i10 %select_ln65_7" [sobel.cpp:65]   --->   Operation 55 'zext' 'select_ln65_7_cast' <Predicate = (!icmp_ln65)> <Delay = 0.00>
ST_3 : Operation 56 [1/1] (2.12ns)   --->   "%first_iter_0 = icmp_eq  i11 %select_ln65, i11 0" [sobel.cpp:65]   --->   Operation 56 'icmp' 'first_iter_0' <Predicate = (!icmp_ln65)> <Delay = 2.12> <CoreInst = "Cmp">   --->   Core 9 'Cmp' <Latency = 0> <II = 1> <Delay = 2.12> <FuncUnit> <Opcode : 'seteq' 'setne' 'setle' 'setge' 'setlt' 'setgt'> <InPorts = 2> <OutPorts = 1>
ST_3 : Operation 57 [1/1] (0.00ns)   --->   "%tmp = partselect i30 @_ssdm_op_PartSelect.i30.i31.i32.i32, i31 %select_ln65_6, i32 1, i32 30" [sobel.cpp:65]   --->   Operation 57 'partselect' 'tmp' <Predicate = (!icmp_ln65)> <Delay = 0.00>
ST_3 : Operation 58 [1/1] (2.63ns)   --->   "%icmp = icmp_ne  i30 %tmp, i30 0" [sobel.cpp:65]   --->   Operation 58 'icmp' 'icmp' <Predicate = (!icmp_ln65)> <Delay = 2.63> <CoreInst = "Cmp">   --->   Core 9 'Cmp' <Latency = 0> <II = 1> <Delay = 2.63> <FuncUnit> <Opcode : 'seteq' 'setne' 'setle' 'setge' 'setlt' 'setgt'> <InPorts = 2> <OutPorts = 1>
ST_3 : Operation 59 [1/1] (2.66ns)   --->   "%cmp130 = icmp_eq  i31 %select_ln65_6, i31 0" [sobel.cpp:65]   --->   Operation 59 'icmp' 'cmp130' <Predicate = (!icmp_ln65)> <Delay = 2.66> <CoreInst = "Cmp">   --->   Core 9 'Cmp' <Latency = 0> <II = 1> <Delay = 2.66> <FuncUnit> <Opcode : 'seteq' 'setne' 'setle' 'setge' 'setlt' 'setgt'> <InPorts = 2> <OutPorts = 1>
ST_3 : Operation 60 [1/1] (2.70ns)   --->   "%cmp134 = icmp_eq  i32 %zext_ln65, i32 %sub133_read" [sobel.cpp:65]   --->   Operation 60 'icmp' 'cmp134' <Predicate = (!icmp_ln65)> <Delay = 2.70> <CoreInst = "Cmp">   --->   Core 9 'Cmp' <Latency = 0> <II = 1> <Delay = 2.70> <FuncUnit> <Opcode : 'seteq' 'setne' 'setle' 'setge' 'setlt' 'setgt'> <InPorts = 2> <OutPorts = 1>
ST_3 : Operation 61 [1/1] (0.00ns)   --->   "%zext_ln72 = zext i11 %select_ln65" [sobel.cpp:72]   --->   Operation 61 'zext' 'zext_ln72' <Predicate = (!icmp_ln65)> <Delay = 0.00>
ST_3 : Operation 62 [1/1] (0.51ns)   --->   "%empty = read i34 @_ssdm_op_Read.axis.volatile.i24P0A.i3P0A.i3P0A.i1P0A.i1P0A.i1P0A.i1P0A, i24 %in_axis_V_data_V, i3 %in_axis_V_keep_V, i3 %in_axis_V_strb_V, i1 %in_axis_V_user_V, i1 %in_axis_V_last_V, i1 %in_axis_V_id_V, i1 %in_axis_V_dest_V" [sobel.cpp:76]   --->   Operation 62 'read' 'empty' <Predicate = (!icmp_ln65)> <Delay = 0.51> <CoreInst = "regslice">   --->   Core 135 'regslice' <Latency = 0> <II = 1> <Delay = 2.17> <Adapter> <Opcode : 'read' 'write'>
ST_3 : Operation 63 [1/1] (0.00ns)   --->   "%din_data = extractvalue i34 %empty" [sobel.cpp:76]   --->   Operation 63 'extractvalue' 'din_data' <Predicate = (!icmp_ln65)> <Delay = 0.00>
ST_3 : Operation 64 [1/1] (0.00ns)   --->   "%din_keep = extractvalue i34 %empty" [sobel.cpp:76]   --->   Operation 64 'extractvalue' 'din_keep' <Predicate = (!icmp_ln65)> <Delay = 0.00>
ST_3 : Operation 65 [1/1] (0.00ns)   --->   "%din_strb = extractvalue i34 %empty" [sobel.cpp:76]   --->   Operation 65 'extractvalue' 'din_strb' <Predicate = (!icmp_ln65)> <Delay = 0.00>
ST_3 : Operation 66 [1/1] (0.00ns)   --->   "%din_id = extractvalue i34 %empty" [sobel.cpp:76]   --->   Operation 66 'extractvalue' 'din_id' <Predicate = (!icmp_ln65)> <Delay = 0.00>
ST_3 : Operation 67 [1/1] (0.00ns)   --->   "%din_dest = extractvalue i34 %empty" [sobel.cpp:76]   --->   Operation 67 'extractvalue' 'din_dest' <Predicate = (!icmp_ln65)> <Delay = 0.00>
ST_3 : Operation 68 [1/1] (0.00ns)   --->   "%r = partselect i8 @_ssdm_op_PartSelect.i8.i24.i32, i24 %din_data, i32 16" [sobel.cpp:77]   --->   Operation 68 'partselect' 'r' <Predicate = (!icmp_ln65)> <Delay = 0.00>
ST_3 : Operation 69 [1/1] (0.00ns)   --->   "%g = partselect i8 @_ssdm_op_PartSelect.i8.i24.i32, i24 %din_data, i32 8" [sobel.cpp:78]   --->   Operation 69 'partselect' 'g' <Predicate = (!icmp_ln65)> <Delay = 0.00>
ST_3 : Operation 70 [1/1] (0.00ns)   --->   "%b = trunc i24 %din_data" [sobel.cpp:79]   --->   Operation 70 'trunc' 'b' <Predicate = (!icmp_ln65)> <Delay = 0.00>
ST_3 : Operation 71 [1/1] (0.00ns)   --->   "%zext_ln15 = zext i8 %r" [sobel.cpp:15->sobel.cpp:80]   --->   Operation 71 'zext' 'zext_ln15' <Predicate = (!icmp_ln65)> <Delay = 0.00>
ST_3 : Operation 72 [1/1] (0.00ns)   --->   "%zext_ln16 = zext i8 %b" [sobel.cpp:16->sobel.cpp:80]   --->   Operation 72 'zext' 'zext_ln16' <Predicate = (!icmp_ln65)> <Delay = 0.00>
ST_3 : Operation 73 [3/3] (1.45ns) (grouped into DSP with root node add_ln16)   --->   "%mul_ln16 = mul i15 %zext_ln15, i15 77" [sobel.cpp:16->sobel.cpp:80]   --->   Operation 73 'mul' 'mul_ln16' <Predicate = (!icmp_ln65)> <Delay = 1.45> <CoreInst = "DSP48">   --->   Core 116 'DSP48' <Latency = 3> <II = 1> <Delay = 2.15> <IPBlock> <Opcode : 'add' 'sub' 'mul' 'select'> <InPorts = 0> <OutPorts = 1> <Sync> <CReg>
ST_3 : Operation 74 [3/3] (1.45ns) (grouped into DSP with root node add_ln16_1)   --->   "%mul_ln16_2 = mul i13 %zext_ln16, i13 29" [sobel.cpp:16->sobel.cpp:80]   --->   Operation 74 'mul' 'mul_ln16_2' <Predicate = (!icmp_ln65)> <Delay = 1.45> <CoreInst = "DSP48">   --->   Core 116 'DSP48' <Latency = 3> <II = 1> <Delay = 2.15> <IPBlock> <Opcode : 'add' 'sub' 'mul' 'select'> <InPorts = 0> <OutPorts = 1> <Sync> <CReg>
ST_3 : Operation 75 [1/1] (0.00ns)   --->   "%line1_addr = getelementptr i8 %line1, i64 0, i64 %zext_ln72" [sobel.cpp:83]   --->   Operation 75 'getelementptr' 'line1_addr' <Predicate = (!icmp_ln65)> <Delay = 0.00>
ST_3 : Operation 76 [1/1] (0.00ns)   --->   "%line0_addr = getelementptr i8 %line0, i64 0, i64 %zext_ln72" [sobel.cpp:84]   --->   Operation 76 'getelementptr' 'line0_addr' <Predicate = (!icmp_ln65)> <Delay = 0.00>
ST_3 : Operation 77 [2/2] (3.25ns)   --->   "%line0_load = load i10 %line0_addr" [sobel.cpp:93]   --->   Operation 77 'load' 'line0_load' <Predicate = (!icmp_ln65)> <Delay = 3.25> <CoreInst = "RAM_2P_BRAM">   --->   Core 90 'RAM_2P_BRAM' <Latency = 1> <II = 1> <Delay = 3.25> <Storage> <Opcode : 'load' 'store'> <Ports = 2> <Width = 8> <Depth = 1024> <RAM>
ST_3 : Operation 78 [1/1] (0.00ns)   --->   "%tmp_1 = partselect i10 @_ssdm_op_PartSelect.i10.i11.i32.i32, i11 %select_ln65, i32 1, i32 10" [sobel.cpp:102]   --->   Operation 78 'partselect' 'tmp_1' <Predicate = (!icmp_ln65)> <Delay = 0.00>
ST_3 : Operation 79 [1/1] (2.12ns)   --->   "%icmp_ln102 = icmp_ne  i10 %tmp_1, i10 0" [sobel.cpp:102]   --->   Operation 79 'icmp' 'icmp_ln102' <Predicate = (!icmp_ln65)> <Delay = 2.12> <CoreInst = "Cmp">   --->   Core 9 'Cmp' <Latency = 0> <II = 1> <Delay = 2.12> <FuncUnit> <Opcode : 'seteq' 'setne' 'setle' 'setge' 'setlt' 'setgt'> <InPorts = 2> <OutPorts = 1>
ST_3 : Operation 80 [1/1] (0.97ns)   --->   "%and_ln102 = and i1 %icmp, i1 %icmp_ln102" [sobel.cpp:102]   --->   Operation 80 'and' 'and_ln102' <Predicate = (!icmp_ln65)> <Delay = 0.97> <CoreInst = "LogicGate">   --->   Core 74 'LogicGate' <Latency = 0> <II = 1> <Delay = 0.97> <FuncUnit> <Opcode : 'and' 'or' 'xor'> <InPorts = 2> <OutPorts = 1>
ST_3 : Operation 81 [1/1] (2.70ns) (out node of the LUT)   --->   "%dout_last = icmp_eq  i32 %select_ln65_7_cast, i32 %sub_read" [sobel.cpp:123]   --->   Operation 81 'icmp' 'dout_last' <Predicate = (!icmp_ln65)> <Delay = 2.70> <CoreInst = "Cmp">   --->   Core 9 'Cmp' <Latency = 0> <II = 1> <Delay = 2.70> <FuncUnit> <Opcode : 'seteq' 'setne' 'setle' 'setge' 'setlt' 'setgt'> <InPorts = 2> <OutPorts = 1>
ST_3 : Operation 82 [1/1] (2.12ns)   --->   "%add_ln72 = add i11 %select_ln65, i11 1" [sobel.cpp:72]   --->   Operation 82 'add' 'add_ln72' <Predicate = (!icmp_ln65)> <Delay = 2.12> <CoreInst = "Adder">   --->   Core 1 'Adder' <Latency = 0> <II = 1> <Delay = 2.12> <FuncUnit> <Opcode : 'add' 'sub'> <InPorts = 2> <OutPorts = 1>
ST_3 : Operation 83 [1/1] (1.61ns)   --->   "%store_ln65 = store i31 %select_ln65_6, i31 %y" [sobel.cpp:65]   --->   Operation 83 'store' 'store_ln65' <Predicate = (!icmp_ln65)> <Delay = 1.61>
ST_3 : Operation 84 [1/1] (1.61ns)   --->   "%store_ln72 = store i11 %add_ln72, i11 %x" [sobel.cpp:72]   --->   Operation 84 'store' 'store_ln72' <Predicate = (!icmp_ln65)> <Delay = 1.61>

State 4 <SV = 3> <Delay = 6.51>
ST_4 : Operation 85 [2/3] (1.45ns) (grouped into DSP with root node add_ln16)   --->   "%mul_ln16 = mul i15 %zext_ln15, i15 77" [sobel.cpp:16->sobel.cpp:80]   --->   Operation 85 'mul' 'mul_ln16' <Predicate = true> <Delay = 1.45> <CoreInst = "DSP48">   --->   Core 116 'DSP48' <Latency = 3> <II = 1> <Delay = 2.15> <IPBlock> <Opcode : 'add' 'sub' 'mul' 'select'> <InPorts = 0> <OutPorts = 1> <Sync> <CReg>
ST_4 : Operation 86 [2/3] (1.45ns) (grouped into DSP with root node add_ln16_1)   --->   "%mul_ln16_2 = mul i13 %zext_ln16, i13 29" [sobel.cpp:16->sobel.cpp:80]   --->   Operation 86 'mul' 'mul_ln16_2' <Predicate = true> <Delay = 1.45> <CoreInst = "DSP48">   --->   Core 116 'DSP48' <Latency = 3> <II = 1> <Delay = 2.15> <IPBlock> <Opcode : 'add' 'sub' 'mul' 'select'> <InPorts = 0> <OutPorts = 1> <Sync> <CReg>
ST_4 : Operation 87 [2/2] (3.25ns)   --->   "%line1_load = load i10 %line1_addr" [sobel.cpp:92]   --->   Operation 87 'load' 'line1_load' <Predicate = true> <Delay = 3.25> <CoreInst = "RAM_2P_BRAM">   --->   Core 90 'RAM_2P_BRAM' <Latency = 1> <II = 1> <Delay = 3.25> <Storage> <Opcode : 'load' 'store'> <Ports = 2> <Width = 8> <Depth = 1024> <RAM>
ST_4 : Operation 88 [1/2] ( I:3.25ns O:3.25ns )   --->   "%line0_load = load i10 %line0_addr" [sobel.cpp:93]   --->   Operation 88 'load' 'line0_load' <Predicate = true> <Delay = 3.25> <CoreInst = "RAM_2P_BRAM">   --->   Core 90 'RAM_2P_BRAM' <Latency = 1> <II = 1> <Delay = 3.25> <Storage> <Opcode : 'load' 'store'> <Ports = 2> <Width = 8> <Depth = 1024> <RAM>
ST_4 : Operation 89 [1/1] ( I:3.25ns O:3.25ns )   --->   "%store_ln97 = store i8 %line0_load, i10 %line1_addr" [sobel.cpp:97]   --->   Operation 89 'store' 'store_ln97' <Predicate = true> <Delay = 3.25> <CoreInst = "RAM_2P_BRAM">   --->   Core 90 'RAM_2P_BRAM' <Latency = 1> <II = 1> <Delay = 3.25> <Storage> <Opcode : 'load' 'store'> <Ports = 2> <Width = 8> <Depth = 1024> <RAM>

State 5 <SV = 4> <Delay = 6.56>
ST_5 : Operation 90 [1/1] (0.00ns)   --->   "%zext_ln15_1 = zext i8 %g" [sobel.cpp:15->sobel.cpp:80]   --->   Operation 90 'zext' 'zext_ln15_1' <Predicate = true> <Delay = 0.00>
ST_5 : Operation 91 [1/3] (0.00ns) (grouped into DSP with root node add_ln16)   --->   "%mul_ln16 = mul i15 %zext_ln15, i15 77" [sobel.cpp:16->sobel.cpp:80]   --->   Operation 91 'mul' 'mul_ln16' <Predicate = true> <Delay = 0.00> <CoreInst = "DSP48">   --->   Core 116 'DSP48' <Latency = 3> <II = 1> <Delay = 2.15> <IPBlock> <Opcode : 'add' 'sub' 'mul' 'select'> <InPorts = 0> <OutPorts = 1> <Sync> <CReg>
ST_5 : Operation 92 [1/1] (0.00ns) (grouped into DSP with root node add_ln16)   --->   "%zext_ln16_1 = zext i15 %mul_ln16" [sobel.cpp:16->sobel.cpp:80]   --->   Operation 92 'zext' 'zext_ln16_1' <Predicate = true> <Delay = 0.00>
ST_5 : Operation 93 [1/1] (4.46ns)   --->   "%mul_ln16_1 = mul i16 %zext_ln15_1, i16 150" [sobel.cpp:16->sobel.cpp:80]   --->   Operation 93 'mul' 'mul_ln16_1' <Predicate = true> <Delay = 4.46> <CoreInst = "Multiplier">   --->   Core 3 'Multiplier' <Latency = 0> <II = 1> <Delay = 4.46> <FuncUnit> <Opcode : 'mul'> <InPorts = 2> <OutPorts = 1>
ST_5 : Operation 94 [1/3] (0.00ns) (grouped into DSP with root node add_ln16_1)   --->   "%mul_ln16_2 = mul i13 %zext_ln16, i13 29" [sobel.cpp:16->sobel.cpp:80]   --->   Operation 94 'mul' 'mul_ln16_2' <Predicate = true> <Delay = 0.00> <CoreInst = "DSP48">   --->   Core 116 'DSP48' <Latency = 3> <II = 1> <Delay = 2.15> <IPBlock> <Opcode : 'add' 'sub' 'mul' 'select'> <InPorts = 0> <OutPorts = 1> <Sync> <CReg>
ST_5 : Operation 95 [2/2] (2.10ns) (root node of the DSP)   --->   "%add_ln16 = add i16 %zext_ln16_1, i16 %mul_ln16_1" [sobel.cpp:16->sobel.cpp:80]   --->   Operation 95 'add' 'add_ln16' <Predicate = true> <Delay = 2.10> <CoreInst = "DSP48">   --->   Core 116 'DSP48' <Latency = 3> <II = 1> <Delay = 2.15> <IPBlock> <Opcode : 'add' 'sub' 'mul' 'select'> <InPorts = 0> <OutPorts = 1> <Sync> <CReg>
ST_5 : Operation 96 [2/2] (2.10ns) (root node of the DSP)   --->   "%add_ln16_1 = add i13 %mul_ln16_2, i13 128" [sobel.cpp:16->sobel.cpp:80]   --->   Operation 96 'add' 'add_ln16_1' <Predicate = true> <Delay = 2.10> <CoreInst = "DSP48">   --->   Core 116 'DSP48' <Latency = 3> <II = 1> <Delay = 2.15> <IPBlock> <Opcode : 'add' 'sub' 'mul' 'select'> <InPorts = 0> <OutPorts = 1> <Sync> <CReg>
ST_5 : Operation 97 [1/2] ( I:3.25ns O:3.25ns )   --->   "%line1_load = load i10 %line1_addr" [sobel.cpp:92]   --->   Operation 97 'load' 'line1_load' <Predicate = true> <Delay = 3.25> <CoreInst = "RAM_2P_BRAM">   --->   Core 90 'RAM_2P_BRAM' <Latency = 1> <II = 1> <Delay = 3.25> <Storage> <Opcode : 'load' 'store'> <Ports = 2> <Width = 8> <Depth = 1024> <RAM>

State 6 <SV = 5> <Delay = 6.97>
ST_6 : Operation 98 [1/1] (0.00ns)   --->   "%p_0_0_011261621_load = load i8 %p_0_0_011261621" [sobel.cpp:65]   --->   Operation 98 'load' 'p_0_0_011261621_load' <Predicate = (and_ln102 & icmp_ln72)> <Delay = 0.00>
ST_6 : Operation 99 [1/1] (0.00ns)   --->   "%p_0_0_011251622_load = load i8 %p_0_0_011251622" [sobel.cpp:65]   --->   Operation 99 'load' 'p_0_0_011251622_load' <Predicate = (icmp_ln72)> <Delay = 0.00>
ST_6 : Operation 100 [1/1] (0.00ns)   --->   "%p_0_0_011221625_load = load i8 %p_0_0_011221625" [sobel.cpp:65]   --->   Operation 100 'load' 'p_0_0_011221625_load' <Predicate = (and_ln102 & icmp_ln72)> <Delay = 0.00>
ST_6 : Operation 101 [1/1] (0.00ns)   --->   "%p_0_0_011211626_load = load i8 %p_0_0_011211626" [sobel.cpp:65]   --->   Operation 101 'load' 'p_0_0_011211626_load' <Predicate = (icmp_ln72)> <Delay = 0.00>
ST_6 : Operation 102 [1/1] (1.04ns)   --->   "%select_ln65_1 = select i1 %icmp_ln72, i8 %p_0_0_011211626_load, i8 0" [sobel.cpp:65]   --->   Operation 102 'select' 'select_ln65_1' <Predicate = true> <Delay = 1.04> <CoreInst = "Sel">   --->   Core 73 'Sel' <Latency = 0> <II = 1> <Delay = 1.04> <FuncUnit> <Opcode : 'select'> <InPorts = 3> <OutPorts = 1>
ST_6 : Operation 103 [1/1] (1.04ns)   --->   "%select_ln65_2 = select i1 %icmp_ln72, i8 %p_0_0_011221625_load, i8 0" [sobel.cpp:65]   --->   Operation 103 'select' 'select_ln65_2' <Predicate = (and_ln102)> <Delay = 1.04> <CoreInst = "Sel">   --->   Core 73 'Sel' <Latency = 0> <II = 1> <Delay = 1.04> <FuncUnit> <Opcode : 'select'> <InPorts = 3> <OutPorts = 1>
ST_6 : Operation 104 [1/1] (1.04ns)   --->   "%select_ln65_4 = select i1 %icmp_ln72, i8 %p_0_0_011251622_load, i8 0" [sobel.cpp:65]   --->   Operation 104 'select' 'select_ln65_4' <Predicate = true> <Delay = 1.04> <CoreInst = "Sel">   --->   Core 73 'Sel' <Latency = 0> <II = 1> <Delay = 1.04> <FuncUnit> <Opcode : 'select'> <InPorts = 3> <OutPorts = 1>
ST_6 : Operation 105 [1/1] (1.04ns)   --->   "%select_ln65_5 = select i1 %icmp_ln72, i8 %p_0_0_011261621_load, i8 0" [sobel.cpp:65]   --->   Operation 105 'select' 'select_ln65_5' <Predicate = (and_ln102)> <Delay = 1.04> <CoreInst = "Sel">   --->   Core 73 'Sel' <Latency = 0> <II = 1> <Delay = 1.04> <FuncUnit> <Opcode : 'select'> <InPorts = 3> <OutPorts = 1>
ST_6 : Operation 106 [1/2] (2.10ns) (root node of the DSP)   --->   "%add_ln16 = add i16 %zext_ln16_1, i16 %mul_ln16_1" [sobel.cpp:16->sobel.cpp:80]   --->   Operation 106 'add' 'add_ln16' <Predicate = true> <Delay = 2.10> <CoreInst = "DSP48">   --->   Core 116 'DSP48' <Latency = 3> <II = 1> <Delay = 2.15> <IPBlock> <Opcode : 'add' 'sub' 'mul' 'select'> <InPorts = 0> <OutPorts = 1> <Sync> <CReg>
ST_6 : Operation 107 [1/2] (2.10ns) (root node of the DSP)   --->   "%add_ln16_1 = add i13 %mul_ln16_2, i13 128" [sobel.cpp:16->sobel.cpp:80]   --->   Operation 107 'add' 'add_ln16_1' <Predicate = true> <Delay = 2.10> <CoreInst = "DSP48">   --->   Core 116 'DSP48' <Latency = 3> <II = 1> <Delay = 2.15> <IPBlock> <Opcode : 'add' 'sub' 'mul' 'select'> <InPorts = 0> <OutPorts = 1> <Sync> <CReg>
ST_6 : Operation 108 [1/1] (0.00ns)   --->   "%zext_ln16_2 = zext i13 %add_ln16_1" [sobel.cpp:16->sobel.cpp:80]   --->   Operation 108 'zext' 'zext_ln16_2' <Predicate = true> <Delay = 0.00>
ST_6 : Operation 109 [1/1] (2.14ns)   --->   "%acc = add i16 %zext_ln16_2, i16 %add_ln16" [sobel.cpp:16->sobel.cpp:80]   --->   Operation 109 'add' 'acc' <Predicate = true> <Delay = 2.14> <CoreInst = "Adder">   --->   Core 1 'Adder' <Latency = 0> <II = 1> <Delay = 2.14> <FuncUnit> <Opcode : 'add' 'sub'> <InPorts = 2> <OutPorts = 1>
ST_6 : Operation 110 [1/1] (0.00ns)   --->   "%gray = partselect i8 @_ssdm_op_PartSelect.i8.i16.i32.i32, i16 %acc, i32 8, i32 15" [sobel.cpp:17->sobel.cpp:80]   --->   Operation 110 'partselect' 'gray' <Predicate = true> <Delay = 0.00>
ST_6 : Operation 111 [1/1] (0.00ns)   --->   "%zext_ln104 = zext i8 %select_ln65_5" [sobel.cpp:104]   --->   Operation 111 'zext' 'zext_ln104' <Predicate = (and_ln102)> <Delay = 0.00>
ST_6 : Operation 112 [1/1] (0.00ns)   --->   "%zext_ln103_1 = zext i8 %select_ln65_5" [sobel.cpp:103]   --->   Operation 112 'zext' 'zext_ln103_1' <Predicate = (and_ln102)> <Delay = 0.00>
ST_6 : Operation 113 [1/1] (0.00ns)   --->   "%zext_ln105_2 = zext i8 %select_ln65_2" [sobel.cpp:105]   --->   Operation 113 'zext' 'zext_ln105_2' <Predicate = (and_ln102)> <Delay = 0.00>
ST_6 : Operation 114 [1/1] (0.00ns)   --->   "%zext_ln105_3 = zext i8 %select_ln65_2" [sobel.cpp:105]   --->   Operation 114 'zext' 'zext_ln105_3' <Predicate = (and_ln102)> <Delay = 0.00>
ST_6 : Operation 115 [1/1] (2.11ns)   --->   "%add_ln104 = add i9 %zext_ln105_3, i9 %zext_ln103_1" [sobel.cpp:104]   --->   Operation 115 'add' 'add_ln104' <Predicate = (and_ln102)> <Delay = 2.11> <CoreInst = "Adder">   --->   Core 1 'Adder' <Latency = 0> <II = 1> <Delay = 2.11> <FuncUnit> <Opcode : 'add' 'sub'> <InPorts = 2> <OutPorts = 1>
ST_6 : Operation 116 [1/1] (0.00ns)   --->   "%shl_ln1 = bitconcatenate i9 @_ssdm_op_BitConcatenate.i9.i8.i1, i8 %select_ln65_4, i1 0" [sobel.cpp:107]   --->   Operation 116 'bitconcatenate' 'shl_ln1' <Predicate = (and_ln102)> <Delay = 0.00>
ST_6 : Operation 117 [1/1] (0.00ns)   --->   "%zext_ln108 = zext i9 %shl_ln1" [sobel.cpp:108]   --->   Operation 117 'zext' 'zext_ln108' <Predicate = (and_ln102)> <Delay = 0.00>
ST_6 : Operation 118 [1/1] (0.00ns)   --->   "%shl_ln2 = bitconcatenate i9 @_ssdm_op_BitConcatenate.i9.i8.i1, i8 %select_ln65_1, i1 0" [sobel.cpp:108]   --->   Operation 118 'bitconcatenate' 'shl_ln2' <Predicate = (and_ln102)> <Delay = 0.00>
ST_6 : Operation 119 [1/1] (0.00ns)   --->   "%zext_ln108_1 = zext i9 %shl_ln2" [sobel.cpp:108]   --->   Operation 119 'zext' 'zext_ln108_1' <Predicate = (and_ln102)> <Delay = 0.00>
ST_6 : Operation 120 [1/1] (2.11ns)   --->   "%add_ln108 = add i10 %zext_ln108_1, i10 %zext_ln105_2" [sobel.cpp:108]   --->   Operation 120 'add' 'add_ln108' <Predicate = (and_ln102)> <Delay = 2.11> <CoreInst = "Adder">   --->   Core 1 'Adder' <Latency = 0> <II = 1> <Delay = 2.11> <FuncUnit> <Opcode : 'add' 'sub'> <InPorts = 2> <OutPorts = 1>
ST_6 : Operation 121 [1/1] (0.00ns)   --->   "%zext_ln107 = zext i10 %add_ln108" [sobel.cpp:107]   --->   Operation 121 'zext' 'zext_ln107' <Predicate = (and_ln102)> <Delay = 0.00>
ST_6 : Operation 122 [1/1] (0.00ns) (grouped into TernaryAdder)   --->   "%sub_ln107 = sub i11 %zext_ln107, i11 %zext_ln108" [sobel.cpp:107]   --->   Operation 122 'sub' 'sub_ln107' <Predicate = (and_ln102)> <Delay = 0.00> <CoreInst = "TAddSub">   --->   Core 10 'TAddSub' <Latency = 0> <II = 1> <Delay = 1.90> <IPBlock> <Opcode : 'add' 'sub'> <InPorts = 3> <OutPorts = 1> <Sync> <CReg>
ST_6 : Operation 123 [1/1] (3.81ns) (root node of TernaryAdder)   --->   "%sub_ln107_1 = sub i11 %sub_ln107, i11 %zext_ln104" [sobel.cpp:107]   --->   Operation 123 'sub' 'sub_ln107_1' <Predicate = (and_ln102)> <Delay = 3.81> <CoreInst = "TAddSub">   --->   Core 10 'TAddSub' <Latency = 0> <II = 1> <Delay = 1.90> <IPBlock> <Opcode : 'add' 'sub'> <InPorts = 3> <OutPorts = 1> <Sync> <CReg>
ST_6 : Operation 124 [1/1] (1.61ns)   --->   "%store_ln17 = store i8 %gray, i8 %p_0_0_011211626" [sobel.cpp:17->sobel.cpp:80]   --->   Operation 124 'store' 'store_ln17' <Predicate = true> <Delay = 1.61>
ST_6 : Operation 125 [1/1] (1.61ns)   --->   "%store_ln65 = store i8 %select_ln65_1, i8 %p_0_0_011221625" [sobel.cpp:65]   --->   Operation 125 'store' 'store_ln65' <Predicate = true> <Delay = 1.61>
ST_6 : Operation 126 [1/1] (1.61ns)   --->   "%store_ln92 = store i8 %line1_load, i8 %p_0_0_011251622" [sobel.cpp:92]   --->   Operation 126 'store' 'store_ln92' <Predicate = true> <Delay = 1.61>
ST_6 : Operation 127 [1/1] (1.61ns)   --->   "%store_ln65 = store i8 %select_ln65_4, i8 %p_0_0_011261621" [sobel.cpp:65]   --->   Operation 127 'store' 'store_ln65' <Predicate = true> <Delay = 1.61>

State 7 <SV = 6> <Delay = 6.83>
ST_7 : Operation 128 [1/1] (0.00ns)   --->   "%p_0_0_011241623_load = load i8 %p_0_0_011241623" [sobel.cpp:65]   --->   Operation 128 'load' 'p_0_0_011241623_load' <Predicate = (and_ln102 & icmp_ln72)> <Delay = 0.00>
ST_7 : Operation 129 [1/1] (0.00ns)   --->   "%p_0_0_011231624_load = load i8 %p_0_0_011231624" [sobel.cpp:65]   --->   Operation 129 'load' 'p_0_0_011231624_load' <Predicate = (icmp_ln72)> <Delay = 0.00>
ST_7 : Operation 130 [1/1] (1.04ns)   --->   "%select_ln65_3 = select i1 %icmp_ln72, i8 %p_0_0_011231624_load, i8 0" [sobel.cpp:65]   --->   Operation 130 'select' 'select_ln65_3' <Predicate = true> <Delay = 1.04> <CoreInst = "Sel">   --->   Core 73 'Sel' <Latency = 0> <II = 1> <Delay = 1.04> <FuncUnit> <Opcode : 'select'> <InPorts = 3> <OutPorts = 1>
ST_7 : Operation 131 [1/1] ( I:3.25ns O:3.25ns )   --->   "%store_ln98 = store i8 %gray, i10 %line0_addr" [sobel.cpp:98]   --->   Operation 131 'store' 'store_ln98' <Predicate = true> <Delay = 3.25> <CoreInst = "RAM_2P_BRAM">   --->   Core 90 'RAM_2P_BRAM' <Latency = 1> <II = 1> <Delay = 3.25> <Storage> <Opcode : 'load' 'store'> <Ports = 2> <Width = 8> <Depth = 1024> <RAM>
ST_7 : Operation 132 [1/1] (0.00ns)   --->   "%zext_ln103 = zext i8 %line1_load" [sobel.cpp:103]   --->   Operation 132 'zext' 'zext_ln103' <Predicate = (and_ln102)> <Delay = 0.00>
ST_7 : Operation 133 [1/1] (0.00ns) (grouped into LUT with out node add_ln104_1)   --->   "%select_ln65_8 = select i1 %icmp_ln72, i8 %p_0_0_011241623_load, i8 0" [sobel.cpp:65]   --->   Operation 133 'select' 'select_ln65_8' <Predicate = (and_ln102)> <Delay = 0.00> <CoreInst = "Sel">   --->   Core 73 'Sel' <Latency = 0> <II = 1> <Delay = 1.04> <FuncUnit> <Opcode : 'select'> <InPorts = 3> <OutPorts = 1>
ST_7 : Operation 134 [1/1] (0.00ns) (grouped into LUT with out node add_ln104_1)   --->   "%shl_ln = bitconcatenate i9 @_ssdm_op_BitConcatenate.i9.i8.i1, i8 %select_ln65_8, i1 0" [sobel.cpp:104]   --->   Operation 134 'bitconcatenate' 'shl_ln' <Predicate = (and_ln102)> <Delay = 0.00>
ST_7 : Operation 135 [1/1] (0.00ns) (grouped into LUT with out node add_ln104_1)   --->   "%zext_ln104_1 = zext i9 %shl_ln" [sobel.cpp:104]   --->   Operation 135 'zext' 'zext_ln104_1' <Predicate = (and_ln102)> <Delay = 0.00>
ST_7 : Operation 136 [1/1] (0.00ns)   --->   "%shl_ln104_1 = bitconcatenate i9 @_ssdm_op_BitConcatenate.i9.i8.i1, i8 %line0_load, i1 0" [sobel.cpp:104]   --->   Operation 136 'bitconcatenate' 'shl_ln104_1' <Predicate = (and_ln102)> <Delay = 0.00>
ST_7 : Operation 137 [1/1] (0.00ns)   --->   "%zext_ln105 = zext i9 %shl_ln104_1" [sobel.cpp:105]   --->   Operation 137 'zext' 'zext_ln105' <Predicate = (and_ln102)> <Delay = 0.00>
ST_7 : Operation 138 [1/1] (0.00ns)   --->   "%zext_ln105_1 = zext i8 %gray" [sobel.cpp:105]   --->   Operation 138 'zext' 'zext_ln105_1' <Predicate = (and_ln102)> <Delay = 0.00>
ST_7 : Operation 139 [1/1] (0.00ns)   --->   "%zext_ln104_2 = zext i8 %gray" [sobel.cpp:104]   --->   Operation 139 'zext' 'zext_ln104_2' <Predicate = (and_ln102)> <Delay = 0.00>
ST_7 : Operation 140 [1/1] (0.00ns) (grouped into LUT with out node add_ln104_1)   --->   "%zext_ln104_3 = zext i9 %add_ln104" [sobel.cpp:104]   --->   Operation 140 'zext' 'zext_ln104_3' <Predicate = (and_ln102)> <Delay = 0.00>
ST_7 : Operation 141 [1/1] (2.11ns) (out node of the LUT)   --->   "%add_ln104_1 = add i10 %zext_ln104_3, i10 %zext_ln104_1" [sobel.cpp:104]   --->   Operation 141 'add' 'add_ln104_1' <Predicate = (and_ln102)> <Delay = 2.11> <CoreInst = "Adder">   --->   Core 1 'Adder' <Latency = 0> <II = 1> <Delay = 2.11> <FuncUnit> <Opcode : 'add' 'sub'> <InPorts = 2> <OutPorts = 1>
ST_7 : Operation 142 [1/1] (0.00ns)   --->   "%zext_ln104_4 = zext i10 %add_ln104_1" [sobel.cpp:104]   --->   Operation 142 'zext' 'zext_ln104_4' <Predicate = (and_ln102)> <Delay = 0.00>
ST_7 : Operation 143 [1/1] (0.00ns) (grouped into TernaryAdder)   --->   "%sub_ln104 = sub i11 %zext_ln103, i11 %zext_ln104_4" [sobel.cpp:104]   --->   Operation 143 'sub' 'sub_ln104' <Predicate = (and_ln102)> <Delay = 0.00> <CoreInst = "TAddSub">   --->   Core 10 'TAddSub' <Latency = 0> <II = 1> <Delay = 1.90> <IPBlock> <Opcode : 'add' 'sub'> <InPorts = 3> <OutPorts = 1> <Sync> <CReg>
ST_7 : Operation 144 [1/1] (2.11ns)   --->   "%add_ln105 = add i10 %zext_ln105, i10 %zext_ln104_2" [sobel.cpp:105]   --->   Operation 144 'add' 'add_ln105' <Predicate = (and_ln102)> <Delay = 2.11> <CoreInst = "Adder">   --->   Core 1 'Adder' <Latency = 0> <II = 1> <Delay = 2.11> <FuncUnit> <Opcode : 'add' 'sub'> <InPorts = 2> <OutPorts = 1>
ST_7 : Operation 145 [1/1] (0.00ns)   --->   "%zext_ln105_4 = zext i10 %add_ln105" [sobel.cpp:105]   --->   Operation 145 'zext' 'zext_ln105_4' <Predicate = (and_ln102)> <Delay = 0.00>
ST_7 : Operation 146 [1/1] (3.81ns) (root node of TernaryAdder)   --->   "%gx = add i11 %zext_ln105_4, i11 %sub_ln104" [sobel.cpp:105]   --->   Operation 146 'add' 'gx' <Predicate = (and_ln102)> <Delay = 3.81> <CoreInst = "TAddSub">   --->   Core 10 'TAddSub' <Latency = 0> <II = 1> <Delay = 1.90> <IPBlock> <Opcode : 'add' 'sub'> <InPorts = 3> <OutPorts = 1> <Sync> <CReg>
ST_7 : Operation 147 [1/1] (0.00ns) (grouped into TernaryAdder)   --->   "%sub_ln108 = sub i11 %sub_ln107_1, i11 %zext_ln103" [sobel.cpp:108]   --->   Operation 147 'sub' 'sub_ln108' <Predicate = (and_ln102)> <Delay = 0.00> <CoreInst = "TAddSub">   --->   Core 10 'TAddSub' <Latency = 0> <II = 1> <Delay = 1.90> <IPBlock> <Opcode : 'add' 'sub'> <InPorts = 3> <OutPorts = 1> <Sync> <CReg>
ST_7 : Operation 148 [1/1] (3.81ns) (root node of TernaryAdder)   --->   "%gy = add i11 %sub_ln108, i11 %zext_ln105_1" [sobel.cpp:108]   --->   Operation 148 'add' 'gy' <Predicate = (and_ln102)> <Delay = 3.81> <CoreInst = "TAddSub">   --->   Core 10 'TAddSub' <Latency = 0> <II = 1> <Delay = 1.90> <IPBlock> <Opcode : 'add' 'sub'> <InPorts = 3> <OutPorts = 1> <Sync> <CReg>
ST_7 : Operation 149 [1/1] (0.90ns)   --->   "%gx_2 = select i1 %and_ln102, i11 %gx, i11 0" [sobel.cpp:102]   --->   Operation 149 'select' 'gx_2' <Predicate = (and_ln102)> <Delay = 0.90> <CoreInst = "Sel">   --->   Core 73 'Sel' <Latency = 0> <II = 1> <Delay = 0.90> <FuncUnit> <Opcode : 'select'> <InPorts = 3> <OutPorts = 1>
ST_7 : Operation 150 [1/1] (0.90ns)   --->   "%gy_2 = select i1 %and_ln102, i11 %gy, i11 0" [sobel.cpp:102]   --->   Operation 150 'select' 'gy_2' <Predicate = (and_ln102)> <Delay = 0.90> <CoreInst = "Sel">   --->   Core 73 'Sel' <Latency = 0> <II = 1> <Delay = 0.90> <FuncUnit> <Opcode : 'select'> <InPorts = 3> <OutPorts = 1>
ST_7 : Operation 151 [1/1] (0.00ns)   --->   "%trunc_ln112 = trunc i11 %gx_2" [sobel.cpp:112]   --->   Operation 151 'trunc' 'trunc_ln112' <Predicate = (and_ln102)> <Delay = 0.00>
ST_7 : Operation 152 [1/1] (0.00ns)   --->   "%trunc_ln113 = trunc i11 %gy_2" [sobel.cpp:113]   --->   Operation 152 'trunc' 'trunc_ln113' <Predicate = (and_ln102)> <Delay = 0.00>
ST_7 : Operation 153 [1/1] (0.00ns)   --->   "%tmp_2 = bitselect i1 @_ssdm_op_BitSelect.i1.i11.i32, i11 %gx_2, i32 10" [sobel.cpp:115]   --->   Operation 153 'bitselect' 'tmp_2' <Predicate = (and_ln102)> <Delay = 0.00>
ST_7 : Operation 154 [1/1] (0.00ns)   --->   "%tmp_3 = bitselect i1 @_ssdm_op_BitSelect.i1.i11.i32, i11 %gy_2, i32 10" [sobel.cpp:116]   --->   Operation 154 'bitselect' 'tmp_3' <Predicate = (and_ln102)> <Delay = 0.00>
ST_7 : Operation 155 [1/1] (1.61ns)   --->   "%store_ln93 = store i8 %line0_load, i8 %p_0_0_011231624" [sobel.cpp:93]   --->   Operation 155 'store' 'store_ln93' <Predicate = true> <Delay = 1.61>
ST_7 : Operation 156 [1/1] (1.61ns)   --->   "%store_ln65 = store i8 %select_ln65_3, i8 %p_0_0_011241623" [sobel.cpp:65]   --->   Operation 156 'store' 'store_ln65' <Predicate = true> <Delay = 1.61>

State 8 <SV = 7> <Delay = 7.05>
ST_8 : Operation 157 [1/1] (2.12ns)   --->   "%ax = sub i10 0, i10 %trunc_ln112" [sobel.cpp:115]   --->   Operation 157 'sub' 'ax' <Predicate = (and_ln102 & tmp_2)> <Delay = 2.12> <CoreInst = "Adder">   --->   Core 1 'Adder' <Latency = 0> <II = 1> <Delay = 2.12> <FuncUnit> <Opcode : 'add' 'sub'> <InPorts = 2> <OutPorts = 1>
ST_8 : Operation 158 [1/1] (1.12ns)   --->   "%ax_1 = select i1 %tmp_2, i10 %ax, i10 %trunc_ln112" [sobel.cpp:115]   --->   Operation 158 'select' 'ax_1' <Predicate = (and_ln102)> <Delay = 1.12> <CoreInst = "Sel">   --->   Core 73 'Sel' <Latency = 0> <II = 1> <Delay = 1.12> <FuncUnit> <Opcode : 'select'> <InPorts = 3> <OutPorts = 1>
ST_8 : Operation 159 [1/1] (0.00ns)   --->   "%trunc_ln115 = trunc i10 %ax_1" [sobel.cpp:115]   --->   Operation 159 'trunc' 'trunc_ln115' <Predicate = (and_ln102)> <Delay = 0.00>
ST_8 : Operation 160 [1/1] (2.12ns)   --->   "%ay = sub i10 0, i10 %trunc_ln113" [sobel.cpp:116]   --->   Operation 160 'sub' 'ay' <Predicate = (and_ln102 & tmp_3)> <Delay = 2.12> <CoreInst = "Adder">   --->   Core 1 'Adder' <Latency = 0> <II = 1> <Delay = 2.12> <FuncUnit> <Opcode : 'add' 'sub'> <InPorts = 2> <OutPorts = 1>
ST_8 : Operation 161 [1/1] (1.12ns)   --->   "%ay_1 = select i1 %tmp_3, i10 %ay, i10 %trunc_ln113" [sobel.cpp:116]   --->   Operation 161 'select' 'ay_1' <Predicate = (and_ln102)> <Delay = 1.12> <CoreInst = "Sel">   --->   Core 73 'Sel' <Latency = 0> <II = 1> <Delay = 1.12> <FuncUnit> <Opcode : 'select'> <InPorts = 3> <OutPorts = 1>
ST_8 : Operation 162 [1/1] (0.00ns)   --->   "%trunc_ln116 = trunc i10 %ay_1" [sobel.cpp:116]   --->   Operation 162 'trunc' 'trunc_ln116' <Predicate = (and_ln102)> <Delay = 0.00>
ST_8 : Operation 163 [1/1] (0.00ns)   --->   "%zext_ln118 = zext i10 %ax_1" [sobel.cpp:118]   --->   Operation 163 'zext' 'zext_ln118' <Predicate = (and_ln102)> <Delay = 0.00>
ST_8 : Operation 164 [1/1] (0.00ns)   --->   "%zext_ln118_1 = zext i10 %ay_1" [sobel.cpp:118]   --->   Operation 164 'zext' 'zext_ln118_1' <Predicate = (and_ln102)> <Delay = 0.00>
ST_8 : Operation 165 [1/1] (2.11ns)   --->   "%edge = add i8 %trunc_ln116, i8 %trunc_ln115" [sobel.cpp:120]   --->   Operation 165 'add' 'edge' <Predicate = (and_ln102)> <Delay = 2.11> <CoreInst = "Adder">   --->   Core 1 'Adder' <Latency = 0> <II = 1> <Delay = 2.11> <FuncUnit> <Opcode : 'add' 'sub'> <InPorts = 2> <OutPorts = 1>
ST_8 : Operation 166 [1/1] (2.12ns)   --->   "%mag = add i11 %zext_ln118_1, i11 %zext_ln118" [sobel.cpp:118]   --->   Operation 166 'add' 'mag' <Predicate = (and_ln102)> <Delay = 2.12> <CoreInst = "Adder">   --->   Core 1 'Adder' <Latency = 0> <II = 1> <Delay = 2.12> <FuncUnit> <Opcode : 'add' 'sub'> <InPorts = 2> <OutPorts = 1>
ST_8 : Operation 167 [1/1] (0.00ns)   --->   "%tmp_4 = partselect i3 @_ssdm_op_PartSelect.i3.i11.i32.i32, i11 %mag, i32 8, i32 10" [sobel.cpp:120]   --->   Operation 167 'partselect' 'tmp_4' <Predicate = (and_ln102)> <Delay = 0.00>
ST_8 : Operation 168 [1/1] (1.68ns)   --->   "%icmp_ln120 = icmp_ne  i3 %tmp_4, i3 0" [sobel.cpp:120]   --->   Operation 168 'icmp' 'icmp_ln120' <Predicate = (and_ln102)> <Delay = 1.68> <CoreInst = "Cmp">   --->   Core 9 'Cmp' <Latency = 0> <II = 1> <Delay = 1.68> <FuncUnit> <Opcode : 'seteq' 'setne' 'setle' 'setge' 'setlt' 'setgt'> <InPorts = 2> <OutPorts = 1>
ST_8 : Operation 181 [1/1] (1.61ns)   --->   "%ret_ln0 = ret"   --->   Operation 181 'ret' 'ret_ln0' <Predicate = (icmp_ln65)> <Delay = 1.61>

State 9 <SV = 8> <Delay = 3.63>
ST_9 : Operation 169 [1/1] (0.00ns)   --->   "%specloopname_ln0 = specloopname void @_ssdm_op_SpecLoopName, void @row_loop_col_loop_str"   --->   Operation 169 'specloopname' 'specloopname_ln0' <Predicate = true> <Delay = 0.00>
ST_9 : Operation 170 [1/1] (0.00ns)   --->   "%specpipeline_ln73 = specpipeline void @_ssdm_op_SpecPipeline, i32 1, i32 0, i32 0, i32 0, void @empty_1" [sobel.cpp:73]   --->   Operation 170 'specpipeline' 'specpipeline_ln73' <Predicate = true> <Delay = 0.00>
ST_9 : Operation 171 [1/1] (0.00ns) (grouped into LUT with out node edge_2)   --->   "%edge_1 = select i1 %icmp_ln120, i8 255, i8 %edge" [sobel.cpp:120]   --->   Operation 171 'select' 'edge_1' <Predicate = (and_ln102)> <Delay = 0.00> <CoreInst = "Sel">   --->   Core 73 'Sel' <Latency = 0> <II = 1> <Delay = 1.04> <FuncUnit> <Opcode : 'select'> <InPorts = 3> <OutPorts = 1>
ST_9 : Operation 172 [1/1] (1.04ns) (out node of the LUT)   --->   "%edge_2 = select i1 %and_ln102, i8 %edge_1, i8 0" [sobel.cpp:120]   --->   Operation 172 'select' 'edge_2' <Predicate = true> <Delay = 1.04> <CoreInst = "Sel">   --->   Core 73 'Sel' <Latency = 0> <II = 1> <Delay = 1.04> <FuncUnit> <Opcode : 'select'> <InPorts = 3> <OutPorts = 1>
ST_9 : Operation 173 [1/1] (0.00ns) (grouped into LUT with out node edge_3)   --->   "%or_ln123 = or i1 %first_iter_0, i1 %cmp130" [sobel.cpp:123]   --->   Operation 173 'or' 'or_ln123' <Predicate = true> <Delay = 0.00> <CoreInst = "LogicGate">   --->   Core 74 'LogicGate' <Latency = 0> <II = 1> <Delay = 0.97> <FuncUnit> <Opcode : 'and' 'or' 'xor'> <InPorts = 2> <OutPorts = 1>
ST_9 : Operation 174 [1/1] (0.00ns) (grouped into LUT with out node edge_3)   --->   "%or_ln123_1 = or i1 %dout_last, i1 %cmp134" [sobel.cpp:123]   --->   Operation 174 'or' 'or_ln123_1' <Predicate = true> <Delay = 0.00> <CoreInst = "LogicGate">   --->   Core 74 'LogicGate' <Latency = 0> <II = 1> <Delay = 0.97> <FuncUnit> <Opcode : 'and' 'or' 'xor'> <InPorts = 2> <OutPorts = 1>
ST_9 : Operation 175 [1/1] (0.00ns) (grouped into LUT with out node edge_3)   --->   "%border = or i1 %or_ln123_1, i1 %or_ln123" [sobel.cpp:123]   --->   Operation 175 'or' 'border' <Predicate = true> <Delay = 0.00> <CoreInst = "LogicGate">   --->   Core 74 'LogicGate' <Latency = 0> <II = 1> <Delay = 0.97> <FuncUnit> <Opcode : 'and' 'or' 'xor'> <InPorts = 2> <OutPorts = 1>
ST_9 : Operation 176 [1/1] (1.04ns) (out node of the LUT)   --->   "%edge_3 = select i1 %border, i8 0, i8 %edge_2" [sobel.cpp:124]   --->   Operation 176 'select' 'edge_3' <Predicate = true> <Delay = 1.04> <CoreInst = "Sel">   --->   Core 73 'Sel' <Latency = 0> <II = 1> <Delay = 1.04> <FuncUnit> <Opcode : 'select'> <InPorts = 3> <OutPorts = 1>
ST_9 : Operation 177 [1/1] (0.00ns)   --->   "%dout_data = bitconcatenate i24 @_ssdm_op_BitConcatenate.i24.i8.i8.i8, i8 %edge_3, i8 %edge_3, i8 %edge_3" [sobel.cpp:130]   --->   Operation 177 'bitconcatenate' 'dout_data' <Predicate = true> <Delay = 0.00>
ST_9 : Operation 178 [1/1] (0.97ns)   --->   "%dout_user = and i1 %cmp130, i1 %first_iter_0" [sobel.cpp:133]   --->   Operation 178 'and' 'dout_user' <Predicate = true> <Delay = 0.97> <CoreInst = "LogicGate">   --->   Core 74 'LogicGate' <Latency = 0> <II = 1> <Delay = 0.97> <FuncUnit> <Opcode : 'and' 'or' 'xor'> <InPorts = 2> <OutPorts = 1>
ST_9 : Operation 179 [1/1] (1.54ns)   --->   "%write_ln138 = write void @_ssdm_op_Write.axis.volatile.i24P0A.i3P0A.i3P0A.i1P0A.i1P0A.i1P0A.i1P0A, i24 %out_axis_V_data_V, i3 %out_axis_V_keep_V, i3 %out_axis_V_strb_V, i1 %out_axis_V_user_V, i1 %out_axis_V_last_V, i1 %out_axis_V_id_V, i1 %out_axis_V_dest_V, i24 %dout_data, i3 %din_keep, i3 %din_strb, i1 %dout_user, i1 %dout_last, i1 %din_id, i1 %din_dest" [sobel.cpp:138]   --->   Operation 179 'write' 'write_ln138' <Predicate = true> <Delay = 1.54> <CoreInst = "regslice">   --->   Core 135 'regslice' <Latency = 0> <II = 1> <Delay = 2.17> <Adapter> <Opcode : 'read' 'write'>
ST_9 : Operation 180 [1/1] (0.00ns)   --->   "%br_ln72 = br void %for.body32" [sobel.cpp:72]   --->   Operation 180 'br' 'br_ln72' <Predicate = true> <Delay = 0.00>


============================================================
+ Verbose Summary: Timing violations
============================================================
Target clock period: 10.000ns, clock uncertainty: 2.700ns.

 <State 1>: 1.610ns
The critical path consists of the following:
	'alloca' operation 41 bit ('indvar_flatten') [29]  (0.000 ns)
	'store' operation 0 bit ('store_ln0') of constant 0 on local variable 'indvar_flatten' [40]  (1.610 ns)

 <State 2>: 4.523ns
The critical path consists of the following:
	'load' operation 41 bit ('indvar_flatten_load', sobel.cpp:65) on local variable 'indvar_flatten' [52]  (0.000 ns)
	'icmp' operation 1 bit ('icmp_ln65', sobel.cpp:65) [55]  (2.913 ns)
	'store' operation 0 bit ('store_ln65', sobel.cpp:65) of variable 'add_ln65', sobel.cpp:65 on local variable 'indvar_flatten' [175]  (1.610 ns)

 <State 3>: 7.343ns
The critical path consists of the following:
	'load' operation 11 bit ('x', sobel.cpp:72) on local variable 'x', sobel.cpp:72 [51]  (0.000 ns)
	'icmp' operation 1 bit ('icmp_ln72', sobel.cpp:72) [54]  (2.702 ns)
	'select' operation 11 bit ('select_ln65', sobel.cpp:65) [68]  (0.905 ns)
	'add' operation 11 bit ('add_ln72', sobel.cpp:72) [174]  (2.127 ns)
	'store' operation 0 bit ('store_ln72', sobel.cpp:72) of variable 'add_ln72', sobel.cpp:72 on local variable 'x', sobel.cpp:72 [177]  (1.610 ns)

 <State 4>: 6.514ns
The critical path consists of the following:
	'load' operation 8 bit ('line0_load', sobel.cpp:93) on array 'line0' [110]  (3.257 ns)
	'store' operation 0 bit ('store_ln97', sobel.cpp:97) of variable 'line0_load', sobel.cpp:93 on array 'line1' [111]  (3.257 ns)

 <State 5>: 6.560ns
The critical path consists of the following:
	'mul' operation 16 bit ('mul_ln16_1', sobel.cpp:16->sobel.cpp:80) [100]  (4.460 ns)
	'add' operation 16 bit of DSP[102] ('add_ln16', sobel.cpp:16->sobel.cpp:80) [102]  (2.100 ns)

 <State 6>: 6.973ns
The critical path consists of the following:
	'load' operation 8 bit ('p_0_0_011221625_load', sobel.cpp:65) on local variable 'p_0_0_011221625' [63]  (0.000 ns)
	'select' operation 8 bit ('select_ln65_2', sobel.cpp:65) [70]  (1.041 ns)
	'add' operation 10 bit ('add_ln108', sobel.cpp:108) [140]  (2.119 ns)
	'sub' operation 11 bit ('sub_ln107', sobel.cpp:107) [142]  (0.000 ns)
	'sub' operation 11 bit ('sub_ln107_1', sobel.cpp:107) [143]  (3.813 ns)

 <State 7>: 6.836ns
The critical path consists of the following:
	'load' operation 8 bit ('p_0_0_011241623_load', sobel.cpp:65) on local variable 'p_0_0_011241623' [61]  (0.000 ns)
	'select' operation 8 bit ('select_ln65_8', sobel.cpp:65) [119]  (0.000 ns)
	'add' operation 10 bit ('add_ln104_1', sobel.cpp:104) [130]  (2.119 ns)
	'sub' operation 11 bit ('sub_ln104', sobel.cpp:104) [132]  (0.000 ns)
	'add' operation 11 bit ('gx', sobel.cpp:105) [135]  (3.813 ns)
	'select' operation 11 bit ('gx', sobel.cpp:102) [146]  (0.905 ns)

 <State 8>: 7.053ns
The critical path consists of the following:
	'sub' operation 10 bit ('ax', sobel.cpp:115) [151]  (2.123 ns)
	'select' operation 10 bit ('ax', sobel.cpp:115) [152]  (1.127 ns)
	'add' operation 11 bit ('mag', sobel.cpp:118) [161]  (2.123 ns)
	'icmp' operation 1 bit ('icmp_ln120', sobel.cpp:120) [163]  (1.680 ns)

 <State 9>: 3.630ns
The critical path consists of the following:
	'select' operation 8 bit ('edge', sobel.cpp:120) [164]  (0.000 ns)
	'select' operation 8 bit ('edge', sobel.cpp:120) [165]  (1.041 ns)
	'select' operation 8 bit ('edge', sobel.cpp:124) [170]  (1.041 ns)
	axis write operation ('write_ln138', sobel.cpp:138) on port 'out_axis_V_data_V' (sobel.cpp:138) [173]  (1.548 ns)


============================================================
+ Verbose Summary: Binding
============================================================
N/A
* FSMD analyzer results:
  - Output states:
 - Input state : 
  - Chain level:
	State 1
	State 2
	State 3
	State 4
	State 5
	State 6
	State 7
	State 8
	State 9


============================================================
+ Verbose Summary: Datapath Resource usage 
============================================================
N/A
