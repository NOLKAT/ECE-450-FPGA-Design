

================================================================
== Vitis HLS Report for 'sobel_rgb_axis_Pipeline_init_cols'
================================================================
* Date:           Fri Oct 24 15:14:31 2025

* Version:        2025.1 (Build 6135595 on May 21 2025)
* Project:        KhanhTran_Lab3
* Solution:       hls (Vivado IP Flow Target)
* Product family: artix7
* Target device:  xc7a35t-cpg236-1


================================================================
== Performance Estimates
================================================================
+ Timing: 
    * Summary: 
    +--------+----------+----------+------------+
    |  Clock |  Target  | Estimated| Uncertainty|
    +--------+----------+----------+------------+
    |ap_clk  |  10.00 ns|  5.922 ns|     2.70 ns|
    +--------+----------+----------+------------+

+ Latency: 
    * Summary: 
    +---------+---------+-----------+-----------+-----+------+------------------------------------------------+
    |  Latency (cycles) |   Latency (absolute)  |  Interval  |                    Pipeline                    |
    |   min   |   max   |    min    |    max    | min |  max |                      Type                      |
    +---------+---------+-----------+-----------+-----+------+------------------------------------------------+
    |        2|     1026|  20.000 ns|  10.260 us|    1|  1025|  loop auto-rewind stp (delay=0 clock cycles(s))|
    +---------+---------+-----------+-----------+-----+------+------------------------------------------------+

    + Detail: 
        * Instance: 
        N/A

        * Loop: 
        +-------------+---------+---------+----------+-----------+-----------+----------+----------+
        |             |  Latency (cycles) | Iteration|  Initiation Interval  |   Trip   |          |
        |  Loop Name  |   min   |   max   |  Latency |  achieved |   target  |   Count  | Pipelined|
        +-------------+---------+---------+----------+-----------+-----------+----------+----------+
        |- init_cols  |        0|     1024|         2|          1|          1|  0 ~ 1024|       yes|
        +-------------+---------+---------+----------+-----------+-----------+----------+----------+

============================================================
+ Verbose Summary: Synthesis Manager
============================================================
InlineROM: 1
ExposeGlobal: 0
============================================================
+ Verbose Summary: CDFG Model
============================================================
IsTopModel: 0
ResetActiveHigh: 1
IsCombinational: 0
IsDatapathOnly: 0
HasWiredReturn: 1
HasMFsm: 2
HasVarLatency: 1
IsPipeline: 0
IsRtlPipelined: 0
IsInstanceOverlapped: 0
IsDontTouch: 0
HasImplIP: 0
IsGatedGlobalClock: 0

+ Individual pipeline summary: 
  * Pipeline-0: initiation interval (II) = 1, depth = 2


============================================================
+ Verbose Summary: Schedule
============================================================
* Number of FSM states : 2
* Pipeline : 1
  Pipeline-0 : II = 1, D = 2, States = { 1 2 }
* Dataflow Pipeline: 0

* FSM state transitions: 
1 --> 2 
2 --> 

* FSM state operations: 

State 1 <SV = 0> <Delay = 5.92>
ST_1 : Operation 5 [1/1] (0.00ns)   --->   "%x = alloca i32 1" [sobel.cpp:58]   --->   Operation 5 'alloca' 'x' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 6 [1/1] (0.00ns)   --->   "%specmemcore_ln0 = specmemcore void @_ssdm_op_SpecMemCore, i8 %line1, i64 666, i64 22, i64 18446744073709551615"   --->   Operation 6 'specmemcore' 'specmemcore_ln0' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 7 [1/1] (0.00ns)   --->   "%specmemcore_ln0 = specmemcore void @_ssdm_op_SpecMemCore, i8 %line0, i64 666, i64 22, i64 18446744073709551615"   --->   Operation 7 'specmemcore' 'specmemcore_ln0' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 8 [1/1] (0.00ns)   --->   "%width_read = read i32 @_ssdm_op_Read.ap_auto.i32, i32 %width"   --->   Operation 8 'read' 'width_read' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 9 [1/1] (1.61ns)   --->   "%store_ln58 = store i11 0, i11 %x" [sobel.cpp:58]   --->   Operation 9 'store' 'store_ln58' <Predicate = true> <Delay = 1.61>
ST_1 : Operation 10 [1/1] (0.00ns)   --->   "%br_ln0 = br void %for.inc"   --->   Operation 10 'br' 'br_ln0' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 11 [1/1] (0.00ns)   --->   "%x_2 = load i11 %x" [sobel.cpp:58]   --->   Operation 11 'load' 'x_2' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 12 [1/1] (0.00ns)   --->   "%zext_ln58_1 = zext i11 %x_2" [sobel.cpp:58]   --->   Operation 12 'zext' 'zext_ln58_1' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 13 [1/1] (2.70ns)   --->   "%icmp_ln58 = icmp_slt  i32 %zext_ln58_1, i32 %width_read" [sobel.cpp:58]   --->   Operation 13 'icmp' 'icmp_ln58' <Predicate = true> <Delay = 2.70> <CoreInst = "Cmp">   --->   Core 9 'Cmp' <Latency = 0> <II = 1> <Delay = 2.70> <FuncUnit> <Opcode : 'seteq' 'setne' 'setle' 'setge' 'setlt' 'setgt'> <InPorts = 2> <OutPorts = 1>
ST_1 : Operation 14 [1/1] (2.12ns)   --->   "%add_ln58 = add i11 %x_2, i11 1" [sobel.cpp:58]   --->   Operation 14 'add' 'add_ln58' <Predicate = true> <Delay = 2.12> <CoreInst = "Adder">   --->   Core 1 'Adder' <Latency = 0> <II = 1> <Delay = 2.12> <FuncUnit> <Opcode : 'add' 'sub'> <InPorts = 2> <OutPorts = 1>
ST_1 : Operation 15 [1/1] (0.00ns)   --->   "%br_ln58 = br i1 %icmp_ln58, void %row_loop.exitStub, void %for.inc.split" [sobel.cpp:58]   --->   Operation 15 'br' 'br_ln58' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 16 [1/1] (1.61ns)   --->   "%store_ln58 = store i11 %add_ln58, i11 %x" [sobel.cpp:58]   --->   Operation 16 'store' 'store_ln58' <Predicate = (icmp_ln58)> <Delay = 1.61>
ST_1 : Operation 26 [1/1] (1.61ns)   --->   "%ret_ln0 = ret"   --->   Operation 26 'ret' 'ret_ln0' <Predicate = (!icmp_ln58)> <Delay = 1.61>

State 2 <SV = 1> <Delay = 3.25>
ST_2 : Operation 17 [1/1] (0.00ns)   --->   "%zext_ln58 = zext i11 %x_2" [sobel.cpp:58]   --->   Operation 17 'zext' 'zext_ln58' <Predicate = true> <Delay = 0.00>
ST_2 : Operation 18 [1/1] (0.00ns)   --->   "%specpipeline_ln59 = specpipeline void @_ssdm_op_SpecPipeline, i32 1, i32 0, i32 0, i32 0, void @empty_1" [sobel.cpp:59]   --->   Operation 18 'specpipeline' 'specpipeline_ln59' <Predicate = true> <Delay = 0.00>
ST_2 : Operation 19 [1/1] (0.00ns)   --->   "%speclooptripcount_ln58 = speclooptripcount void @_ssdm_op_SpecLoopTripCount, i64 0, i64 1024, i64 512" [sobel.cpp:58]   --->   Operation 19 'speclooptripcount' 'speclooptripcount_ln58' <Predicate = true> <Delay = 0.00>
ST_2 : Operation 20 [1/1] (0.00ns)   --->   "%specloopname_ln58 = specloopname void @_ssdm_op_SpecLoopName, void @empty_10" [sobel.cpp:58]   --->   Operation 20 'specloopname' 'specloopname_ln58' <Predicate = true> <Delay = 0.00>
ST_2 : Operation 21 [1/1] (0.00ns)   --->   "%line0_addr = getelementptr i8 %line0, i64 0, i64 %zext_ln58" [sobel.cpp:60]   --->   Operation 21 'getelementptr' 'line0_addr' <Predicate = true> <Delay = 0.00>
ST_2 : Operation 22 [1/1] ( I:3.25ns O:3.25ns )   --->   "%store_ln60 = store i8 0, i10 %line0_addr" [sobel.cpp:60]   --->   Operation 22 'store' 'store_ln60' <Predicate = true> <Delay = 3.25> <CoreInst = "RAM_2P_BRAM">   --->   Core 90 'RAM_2P_BRAM' <Latency = 1> <II = 1> <Delay = 3.25> <Storage> <Opcode : 'load' 'store'> <Ports = 2> <Width = 8> <Depth = 1024> <RAM>
ST_2 : Operation 23 [1/1] (0.00ns)   --->   "%line1_addr = getelementptr i8 %line1, i64 0, i64 %zext_ln58" [sobel.cpp:61]   --->   Operation 23 'getelementptr' 'line1_addr' <Predicate = true> <Delay = 0.00>
ST_2 : Operation 24 [1/1] ( I:3.25ns O:3.25ns )   --->   "%store_ln61 = store i8 0, i10 %line1_addr" [sobel.cpp:61]   --->   Operation 24 'store' 'store_ln61' <Predicate = true> <Delay = 3.25> <CoreInst = "RAM_2P_BRAM">   --->   Core 90 'RAM_2P_BRAM' <Latency = 1> <II = 1> <Delay = 3.25> <Storage> <Opcode : 'load' 'store'> <Ports = 2> <Width = 8> <Depth = 1024> <RAM>
ST_2 : Operation 25 [1/1] (0.00ns)   --->   "%br_ln58 = br void %for.inc" [sobel.cpp:58]   --->   Operation 25 'br' 'br_ln58' <Predicate = true> <Delay = 0.00>


============================================================
+ Verbose Summary: Timing violations
============================================================
Target clock period: 10.000ns, clock uncertainty: 2.700ns.

 <State 1>: 5.922ns
The critical path consists of the following:
	'store' operation 0 bit ('store_ln58', sobel.cpp:58) of constant 0 on local variable 'x', sobel.cpp:58 [8]  (1.610 ns)
	'load' operation 11 bit ('x', sobel.cpp:58) on local variable 'x', sobel.cpp:58 [11]  (0.000 ns)
	'icmp' operation 1 bit ('icmp_ln58', sobel.cpp:58) [13]  (2.702 ns)
	'store' operation 0 bit ('store_ln58', sobel.cpp:58) of variable 'add_ln58', sobel.cpp:58 on local variable 'x', sobel.cpp:58 [25]  (1.610 ns)

 <State 2>: 3.257ns
The critical path consists of the following:
	'getelementptr' operation 10 bit ('line0_addr', sobel.cpp:60) [21]  (0.000 ns)
	'store' operation 0 bit ('store_ln60', sobel.cpp:60) of constant 0 on array 'line0' [22]  (3.257 ns)


============================================================
+ Verbose Summary: Binding
============================================================
N/A
* FSMD analyzer results:
  - Output states:
 - Input state : 
  - Chain level:
	State 1
	State 2


============================================================
+ Verbose Summary: Datapath Resource usage 
============================================================
N/A
