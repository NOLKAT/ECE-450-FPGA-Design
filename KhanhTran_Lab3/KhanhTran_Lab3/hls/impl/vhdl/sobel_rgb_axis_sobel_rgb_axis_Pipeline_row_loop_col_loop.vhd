-- ==============================================================
-- Generated by Vitis HLS v2025.1
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2025 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity sobel_rgb_axis_sobel_rgb_axis_Pipeline_row_loop_col_loop is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    in_axis_TVALID : IN STD_LOGIC;
    out_axis_TREADY : IN STD_LOGIC;
    width : IN STD_LOGIC_VECTOR (31 downto 0);
    bound : IN STD_LOGIC_VECTOR (40 downto 0);
    sub133 : IN STD_LOGIC_VECTOR (31 downto 0);
    in_axis_TDATA : IN STD_LOGIC_VECTOR (23 downto 0);
    in_axis_TREADY : OUT STD_LOGIC;
    in_axis_TKEEP : IN STD_LOGIC_VECTOR (2 downto 0);
    in_axis_TSTRB : IN STD_LOGIC_VECTOR (2 downto 0);
    in_axis_TUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    in_axis_TLAST : IN STD_LOGIC_VECTOR (0 downto 0);
    in_axis_TID : IN STD_LOGIC_VECTOR (0 downto 0);
    in_axis_TDEST : IN STD_LOGIC_VECTOR (0 downto 0);
    sub : IN STD_LOGIC_VECTOR (31 downto 0);
    out_axis_TDATA : OUT STD_LOGIC_VECTOR (23 downto 0);
    out_axis_TVALID : OUT STD_LOGIC;
    out_axis_TKEEP : OUT STD_LOGIC_VECTOR (2 downto 0);
    out_axis_TSTRB : OUT STD_LOGIC_VECTOR (2 downto 0);
    out_axis_TUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    out_axis_TLAST : OUT STD_LOGIC_VECTOR (0 downto 0);
    out_axis_TID : OUT STD_LOGIC_VECTOR (0 downto 0);
    out_axis_TDEST : OUT STD_LOGIC_VECTOR (0 downto 0);
    line1_address1 : OUT STD_LOGIC_VECTOR (9 downto 0);
    line1_ce1 : OUT STD_LOGIC;
    line1_we1 : OUT STD_LOGIC;
    line1_d1 : OUT STD_LOGIC_VECTOR (7 downto 0);
    line1_q1 : IN STD_LOGIC_VECTOR (7 downto 0);
    line0_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    line0_ce0 : OUT STD_LOGIC;
    line0_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    line0_address1 : OUT STD_LOGIC_VECTOR (9 downto 0);
    line0_ce1 : OUT STD_LOGIC;
    line0_we1 : OUT STD_LOGIC;
    line0_d1 : OUT STD_LOGIC_VECTOR (7 downto 0) );
end;


architecture behav of sobel_rgb_axis_sobel_rgb_axis_Pipeline_row_loop_col_loop is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv11_0 : STD_LOGIC_VECTOR (10 downto 0) := "00000000000";
    constant ap_const_lv31_0 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000000000000";
    constant ap_const_lv41_0 : STD_LOGIC_VECTOR (40 downto 0) := "00000000000000000000000000000000000000000";
    constant ap_const_lv41_1 : STD_LOGIC_VECTOR (40 downto 0) := "00000000000000000000000000000000000000001";
    constant ap_const_lv31_1 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000000000001";
    constant ap_const_lv10_0 : STD_LOGIC_VECTOR (9 downto 0) := "0000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_1E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011110";
    constant ap_const_lv30_0 : STD_LOGIC_VECTOR (29 downto 0) := "000000000000000000000000000000";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv11_1 : STD_LOGIC_VECTOR (10 downto 0) := "00000000001";
    constant ap_const_lv16_96 : STD_LOGIC_VECTOR (15 downto 0) := "0000000010010110";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv8_FF : STD_LOGIC_VECTOR (7 downto 0) := "11111111";
    constant ap_const_lv15_4D : STD_LOGIC_VECTOR (14 downto 0) := "000000001001101";
    constant ap_const_lv13_1D : STD_LOGIC_VECTOR (12 downto 0) := "0000000011101";
    constant ap_const_lv13_80 : STD_LOGIC_VECTOR (12 downto 0) := "0000010000000";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter4 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter5 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter6 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter7 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter8 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal icmp_ln65_reg_1047 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_state3_pp0_stage0_iter2_grp1 : BOOLEAN;
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal icmp_ln65_fu_327_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_condition_exit_pp0_iter1_stage0 : STD_LOGIC;
    signal ap_loop_exit_ready : STD_LOGIC;
    signal ap_ready_int : STD_LOGIC;
    signal in_axis_TDATA_blk_n : STD_LOGIC;
    signal ap_block_pp0_stage0_grp1 : BOOLEAN;
    signal out_axis_TDATA_blk_n : STD_LOGIC;
    signal ap_block_pp0_stage0_11001_grp0 : BOOLEAN;
    signal ap_block_pp0_stage0_subdone_grp0 : BOOLEAN;
    signal ap_block_pp0_stage0_11001_grp1 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal icmp_ln72_fu_350_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln72_reg_1051 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln72_reg_1051_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln72_reg_1051_pp0_iter4_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln72_reg_1051_pp0_iter5_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal first_iter_0_fu_400_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal first_iter_0_reg_1061 : STD_LOGIC_VECTOR (0 downto 0);
    signal first_iter_0_reg_1061_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal first_iter_0_reg_1061_pp0_iter4_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal first_iter_0_reg_1061_pp0_iter5_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal first_iter_0_reg_1061_pp0_iter6_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal first_iter_0_reg_1061_pp0_iter7_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal cmp130_fu_422_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal cmp130_reg_1067 : STD_LOGIC_VECTOR (0 downto 0);
    signal cmp130_reg_1067_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal cmp130_reg_1067_pp0_iter4_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal cmp130_reg_1067_pp0_iter5_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal cmp130_reg_1067_pp0_iter6_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal cmp130_reg_1067_pp0_iter7_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal cmp134_fu_428_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal cmp134_reg_1073 : STD_LOGIC_VECTOR (0 downto 0);
    signal cmp134_reg_1073_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal cmp134_reg_1073_pp0_iter4_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal cmp134_reg_1073_pp0_iter5_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal cmp134_reg_1073_pp0_iter6_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal cmp134_reg_1073_pp0_iter7_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal din_keep_reg_1078 : STD_LOGIC_VECTOR (2 downto 0);
    signal din_keep_reg_1078_pp0_iter3_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal din_keep_reg_1078_pp0_iter4_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal din_keep_reg_1078_pp0_iter5_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal din_keep_reg_1078_pp0_iter6_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal din_keep_reg_1078_pp0_iter7_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal din_strb_reg_1083 : STD_LOGIC_VECTOR (2 downto 0);
    signal din_strb_reg_1083_pp0_iter3_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal din_strb_reg_1083_pp0_iter4_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal din_strb_reg_1083_pp0_iter5_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal din_strb_reg_1083_pp0_iter6_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal din_strb_reg_1083_pp0_iter7_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal din_id_reg_1088 : STD_LOGIC_VECTOR (0 downto 0);
    signal din_id_reg_1088_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal din_id_reg_1088_pp0_iter4_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal din_id_reg_1088_pp0_iter5_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal din_id_reg_1088_pp0_iter6_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal din_id_reg_1088_pp0_iter7_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal din_dest_reg_1093 : STD_LOGIC_VECTOR (0 downto 0);
    signal din_dest_reg_1093_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal din_dest_reg_1093_pp0_iter4_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal din_dest_reg_1093_pp0_iter5_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal din_dest_reg_1093_pp0_iter6_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal din_dest_reg_1093_pp0_iter7_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal g_reg_1098 : STD_LOGIC_VECTOR (7 downto 0);
    signal g_reg_1098_pp0_iter3_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal line1_addr_reg_1113 : STD_LOGIC_VECTOR (9 downto 0);
    signal line0_addr_reg_1118 : STD_LOGIC_VECTOR (9 downto 0);
    signal line0_addr_reg_1118_pp0_iter3_reg : STD_LOGIC_VECTOR (9 downto 0);
    signal line0_addr_reg_1118_pp0_iter4_reg : STD_LOGIC_VECTOR (9 downto 0);
    signal line0_addr_reg_1118_pp0_iter5_reg : STD_LOGIC_VECTOR (9 downto 0);
    signal and_ln102_fu_503_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln102_reg_1124 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln102_reg_1124_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln102_reg_1124_pp0_iter4_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln102_reg_1124_pp0_iter5_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln102_reg_1124_pp0_iter6_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln102_reg_1124_pp0_iter7_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal dout_last_fu_509_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal dout_last_reg_1131 : STD_LOGIC_VECTOR (0 downto 0);
    signal dout_last_reg_1131_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal dout_last_reg_1131_pp0_iter4_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal dout_last_reg_1131_pp0_iter5_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal dout_last_reg_1131_pp0_iter6_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal dout_last_reg_1131_pp0_iter7_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal line0_load_reg_1137 : STD_LOGIC_VECTOR (7 downto 0);
    signal line0_load_reg_1137_pp0_iter4_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal line0_load_reg_1137_pp0_iter5_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal mul_ln16_1_fu_533_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal line1_load_reg_1148 : STD_LOGIC_VECTOR (7 downto 0);
    signal line1_load_reg_1148_pp0_iter5_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal gray_reg_1154 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln104_fu_613_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal add_ln104_reg_1161 : STD_LOGIC_VECTOR (8 downto 0);
    signal sub_ln107_1_fu_659_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal sub_ln107_1_reg_1166 : STD_LOGIC_VECTOR (10 downto 0);
    signal trunc_ln112_fu_796_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal trunc_ln112_reg_1171 : STD_LOGIC_VECTOR (9 downto 0);
    signal trunc_ln113_fu_800_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal trunc_ln113_reg_1177 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_2_reg_1183 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_3_reg_1188 : STD_LOGIC_VECTOR (0 downto 0);
    signal edge_fu_867_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal edge_reg_1193 : STD_LOGIC_VECTOR (7 downto 0);
    signal icmp_ln120_fu_889_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln120_reg_1198 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_condition_exit_pp0_iter2_stage0 : STD_LOGIC;
    signal zext_ln72_fu_433_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal p_0_0_011261621_fu_142 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    signal select_ln65_4_fu_565_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_loop_init : STD_LOGIC;
    signal p_0_0_011251622_fu_146 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    signal p_0_0_011241623_fu_150 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    signal select_ln65_3_fu_690_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_0_0_011231624_fu_154 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    signal p_0_0_011221625_fu_158 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    signal select_ln65_1_fu_551_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_0_0_011211626_fu_162 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    signal x_fu_166 : STD_LOGIC_VECTOR (10 downto 0) := "00000000000";
    signal add_ln72_fu_514_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal y_fu_170 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000000000000";
    signal select_ln65_6_fu_376_p3 : STD_LOGIC_VECTOR (30 downto 0);
    signal indvar_flatten_fu_174 : STD_LOGIC_VECTOR (40 downto 0) := "00000000000000000000000000000000000000000";
    signal add_ln65_fu_332_p2 : STD_LOGIC_VECTOR (40 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal ap_block_pp0_stage0_01001_grp1 : BOOLEAN;
    signal line0_ce0_local : STD_LOGIC;
    signal line0_we1_local : STD_LOGIC;
    signal line0_ce1_local : STD_LOGIC;
    signal line1_ce1_local : STD_LOGIC;
    signal line1_we1_local : STD_LOGIC;
    signal zext_ln72_1_fu_346_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln65_1_fu_370_p2 : STD_LOGIC_VECTOR (30 downto 0);
    signal trunc_ln72_fu_358_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal select_ln65_7_fu_388_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal select_ln65_fu_362_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_fu_406_p4 : STD_LOGIC_VECTOR (29 downto 0);
    signal zext_ln65_fu_384_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal r_fu_459_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal b_fu_475_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_1_fu_487_p4 : STD_LOGIC_VECTOR (9 downto 0);
    signal icmp_fu_416_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln102_fu_497_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln65_7_cast_fu_396_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln16_1_fu_533_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal mul_ln16_1_fu_533_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal grp_fu_955_p3 : STD_LOGIC_VECTOR (12 downto 0);
    signal zext_ln16_2_fu_579_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_946_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal acc_fu_582_p2 : STD_LOGIC_VECTOR (15 downto 0);
    attribute use_dsp48 : string;
    attribute use_dsp48 of acc_fu_582_p2 : signal is "no";
    signal select_ln65_5_fu_572_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln65_2_fu_558_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln105_3_fu_609_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln103_1_fu_601_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal shl_ln1_fu_619_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal shl_ln2_fu_631_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln108_1_fu_639_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal zext_ln105_2_fu_605_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln108_fu_643_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal zext_ln107_fu_649_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal zext_ln108_fu_627_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal sub_ln107_fu_653_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal zext_ln104_fu_597_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal select_ln65_8_fu_700_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal shl_ln_fu_707_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal shl_ln104_1_fu_719_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln104_3_fu_736_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal zext_ln104_1_fu_715_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln104_1_fu_739_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal zext_ln103_fu_697_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal zext_ln104_4_fu_745_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal zext_ln105_fu_726_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal zext_ln104_2_fu_733_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln105_fu_755_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal zext_ln105_4_fu_761_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal sub_ln104_fu_749_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal sub_ln108_fu_771_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal zext_ln105_1_fu_730_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal gx_fu_765_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal gy_fu_776_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal gx_2_fu_782_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal gy_2_fu_789_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal ax_fu_829_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal ax_1_fu_834_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal ay_fu_844_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal ay_1_fu_849_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal trunc_ln116_fu_855_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln115_fu_840_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln118_1_fu_863_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal zext_ln118_fu_859_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal mag_fu_873_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_4_fu_879_p4 : STD_LOGIC_VECTOR (2 downto 0);
    signal edge_1_fu_895_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal or_ln123_1_fu_912_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln123_fu_908_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal border_fu_916_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal edge_2_fu_901_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal edge_3_fu_922_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_946_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_946_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal grp_fu_955_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_955_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_fu_955_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_946_ce : STD_LOGIC;
    signal grp_fu_955_ce : STD_LOGIC;
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_continue_int : STD_LOGIC;
    signal ap_done_int : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter2_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter3_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter4_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter5_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter6_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter7_reg : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_pp0 : BOOLEAN;
    signal ap_enable_operation_77 : BOOLEAN;
    signal ap_enable_state3_pp0_iter2_stage0 : BOOLEAN;
    signal ap_enable_operation_88 : BOOLEAN;
    signal ap_enable_state4_pp0_iter3_stage0 : BOOLEAN;
    signal ap_enable_operation_131 : BOOLEAN;
    signal ap_enable_state7_pp0_iter6_stage0 : BOOLEAN;
    signal ap_enable_operation_89 : BOOLEAN;
    signal ap_enable_operation_87 : BOOLEAN;
    signal ap_enable_operation_97 : BOOLEAN;
    signal ap_enable_state5_pp0_iter4_stage0 : BOOLEAN;
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_start_int : STD_LOGIC;
    signal ap_ready_sig : STD_LOGIC;
    signal ap_done_sig : STD_LOGIC;
    signal grp_fu_946_p00 : STD_LOGIC_VECTOR (14 downto 0);
    signal grp_fu_955_p00 : STD_LOGIC_VECTOR (12 downto 0);
    signal mul_ln16_1_fu_533_p00 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_ce_reg : STD_LOGIC;

    component sobel_rgb_axis_mul_8ns_9ns_16_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (7 downto 0);
        din1 : IN STD_LOGIC_VECTOR (8 downto 0);
        dout : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component sobel_rgb_axis_mac_muladd_8ns_7ns_16ns_16_4_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (7 downto 0);
        din1 : IN STD_LOGIC_VECTOR (6 downto 0);
        din2 : IN STD_LOGIC_VECTOR (15 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component sobel_rgb_axis_mac_muladd_8ns_5ns_8ns_13_4_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (7 downto 0);
        din1 : IN STD_LOGIC_VECTOR (4 downto 0);
        din2 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (12 downto 0) );
    end component;


    component sobel_rgb_axis_flow_control_loop_pipe_sequential_init IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_start_int : OUT STD_LOGIC;
        ap_loop_init : OUT STD_LOGIC;
        ap_ready_int : IN STD_LOGIC;
        ap_loop_exit_ready : IN STD_LOGIC;
        ap_loop_exit_done : IN STD_LOGIC;
        ap_continue_int : OUT STD_LOGIC;
        ap_done_int : IN STD_LOGIC );
    end component;



begin
    mul_8ns_9ns_16_1_1_U4 : component sobel_rgb_axis_mul_8ns_9ns_16_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 9,
        dout_WIDTH => 16)
    port map (
        din0 => mul_ln16_1_fu_533_p0,
        din1 => mul_ln16_1_fu_533_p1,
        dout => mul_ln16_1_fu_533_p2);

    mac_muladd_8ns_7ns_16ns_16_4_1_U5 : component sobel_rgb_axis_mac_muladd_8ns_7ns_16ns_16_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 8,
        din1_WIDTH => 7,
        din2_WIDTH => 16,
        dout_WIDTH => 16)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_946_p0,
        din1 => grp_fu_946_p1,
        din2 => mul_ln16_1_fu_533_p2,
        ce => grp_fu_946_ce,
        dout => grp_fu_946_p3);

    mac_muladd_8ns_5ns_8ns_13_4_1_U6 : component sobel_rgb_axis_mac_muladd_8ns_5ns_8ns_13_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 8,
        din1_WIDTH => 5,
        din2_WIDTH => 8,
        dout_WIDTH => 13)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_955_p0,
        din1 => grp_fu_955_p1,
        din2 => grp_fu_955_p2,
        ce => grp_fu_955_ce,
        dout => grp_fu_955_p3);

    flow_control_loop_pipe_sequential_init_U : component sobel_rgb_axis_flow_control_loop_pipe_sequential_init
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => ap_start,
        ap_ready => ap_ready_sig,
        ap_done => ap_done_sig,
        ap_start_int => ap_start_int,
        ap_loop_init => ap_loop_init,
        ap_ready_int => ap_ready_int,
        ap_loop_exit_ready => ap_condition_exit_pp0_iter1_stage0,
        ap_loop_exit_done => ap_done_int,
        ap_continue_int => ap_continue_int,
        ap_done_int => ap_done_int);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue_int = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_loop_exit_ready_pp0_iter7_reg = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_exit_pp0_iter1_stage0)) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter1 <= ap_start_int;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_exit_pp0_iter2_stage0)) then 
                    ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
                elsif ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter4 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter5_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter5 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter6_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter6 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter7_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter7 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter7 <= ap_enable_reg_pp0_iter6;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter8_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter8 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter8 <= ap_enable_reg_pp0_iter7;
                end if; 
            end if;
        end if;
    end process;


    indvar_flatten_fu_174_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    indvar_flatten_fu_174 <= ap_const_lv41_0;
                elsif (((icmp_ln65_fu_327_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
                    indvar_flatten_fu_174 <= add_ln65_fu_332_p2;
                end if;
            end if; 
        end if;
    end process;

    p_0_0_011211626_fu_162_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001_grp1)) then
                if (((ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    p_0_0_011211626_fu_162 <= ap_const_lv8_0;
                elsif ((ap_enable_reg_pp0_iter5 = ap_const_logic_1)) then 
                    p_0_0_011211626_fu_162 <= acc_fu_582_p2(15 downto 8);
                end if;
            end if; 
        end if;
    end process;

    p_0_0_011221625_fu_158_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001_grp1)) then
                if (((ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    p_0_0_011221625_fu_158 <= ap_const_lv8_0;
                elsif ((ap_enable_reg_pp0_iter5 = ap_const_logic_1)) then 
                    p_0_0_011221625_fu_158 <= select_ln65_1_fu_551_p3;
                end if;
            end if; 
        end if;
    end process;

    p_0_0_011231624_fu_154_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001_grp1)) then
                if (((ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    p_0_0_011231624_fu_154 <= ap_const_lv8_0;
                elsif ((ap_enable_reg_pp0_iter6 = ap_const_logic_1)) then 
                    p_0_0_011231624_fu_154 <= line0_load_reg_1137_pp0_iter5_reg;
                end if;
            end if; 
        end if;
    end process;

    p_0_0_011241623_fu_150_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001_grp1)) then
                if (((ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    p_0_0_011241623_fu_150 <= ap_const_lv8_0;
                elsif ((ap_enable_reg_pp0_iter6 = ap_const_logic_1)) then 
                    p_0_0_011241623_fu_150 <= select_ln65_3_fu_690_p3;
                end if;
            end if; 
        end if;
    end process;

    p_0_0_011251622_fu_146_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001_grp1)) then
                if (((ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    p_0_0_011251622_fu_146 <= ap_const_lv8_0;
                elsif ((ap_enable_reg_pp0_iter5 = ap_const_logic_1)) then 
                    p_0_0_011251622_fu_146 <= line1_load_reg_1148;
                end if;
            end if; 
        end if;
    end process;

    p_0_0_011261621_fu_142_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001_grp1)) then
                if (((ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    p_0_0_011261621_fu_142 <= ap_const_lv8_0;
                elsif ((ap_enable_reg_pp0_iter5 = ap_const_logic_1)) then 
                    p_0_0_011261621_fu_142 <= select_ln65_4_fu_565_p3;
                end if;
            end if; 
        end if;
    end process;

    x_fu_166_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001_grp1)) then
                if (((ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    x_fu_166 <= ap_const_lv11_0;
                elsif (((icmp_ln65_reg_1047 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
                    x_fu_166 <= add_ln72_fu_514_p2;
                end if;
            end if; 
        end if;
    end process;

    y_fu_170_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001_grp1)) then
                if (((ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    y_fu_170 <= ap_const_lv31_0;
                elsif (((icmp_ln65_reg_1047 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
                    y_fu_170 <= select_ln65_6_fu_376_p3;
                end if;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001_grp1)) then
                add_ln104_reg_1161 <= add_ln104_fu_613_p2;
                and_ln102_reg_1124 <= and_ln102_fu_503_p2;
                and_ln102_reg_1124_pp0_iter3_reg <= and_ln102_reg_1124;
                and_ln102_reg_1124_pp0_iter4_reg <= and_ln102_reg_1124_pp0_iter3_reg;
                and_ln102_reg_1124_pp0_iter5_reg <= and_ln102_reg_1124_pp0_iter4_reg;
                and_ln102_reg_1124_pp0_iter6_reg <= and_ln102_reg_1124_pp0_iter5_reg;
                and_ln102_reg_1124_pp0_iter7_reg <= and_ln102_reg_1124_pp0_iter6_reg;
                cmp130_reg_1067 <= cmp130_fu_422_p2;
                cmp130_reg_1067_pp0_iter3_reg <= cmp130_reg_1067;
                cmp130_reg_1067_pp0_iter4_reg <= cmp130_reg_1067_pp0_iter3_reg;
                cmp130_reg_1067_pp0_iter5_reg <= cmp130_reg_1067_pp0_iter4_reg;
                cmp130_reg_1067_pp0_iter6_reg <= cmp130_reg_1067_pp0_iter5_reg;
                cmp130_reg_1067_pp0_iter7_reg <= cmp130_reg_1067_pp0_iter6_reg;
                cmp134_reg_1073 <= cmp134_fu_428_p2;
                cmp134_reg_1073_pp0_iter3_reg <= cmp134_reg_1073;
                cmp134_reg_1073_pp0_iter4_reg <= cmp134_reg_1073_pp0_iter3_reg;
                cmp134_reg_1073_pp0_iter5_reg <= cmp134_reg_1073_pp0_iter4_reg;
                cmp134_reg_1073_pp0_iter6_reg <= cmp134_reg_1073_pp0_iter5_reg;
                cmp134_reg_1073_pp0_iter7_reg <= cmp134_reg_1073_pp0_iter6_reg;
                din_dest_reg_1093 <= in_axis_TDEST;
                din_dest_reg_1093_pp0_iter3_reg <= din_dest_reg_1093;
                din_dest_reg_1093_pp0_iter4_reg <= din_dest_reg_1093_pp0_iter3_reg;
                din_dest_reg_1093_pp0_iter5_reg <= din_dest_reg_1093_pp0_iter4_reg;
                din_dest_reg_1093_pp0_iter6_reg <= din_dest_reg_1093_pp0_iter5_reg;
                din_dest_reg_1093_pp0_iter7_reg <= din_dest_reg_1093_pp0_iter6_reg;
                din_id_reg_1088 <= in_axis_TID;
                din_id_reg_1088_pp0_iter3_reg <= din_id_reg_1088;
                din_id_reg_1088_pp0_iter4_reg <= din_id_reg_1088_pp0_iter3_reg;
                din_id_reg_1088_pp0_iter5_reg <= din_id_reg_1088_pp0_iter4_reg;
                din_id_reg_1088_pp0_iter6_reg <= din_id_reg_1088_pp0_iter5_reg;
                din_id_reg_1088_pp0_iter7_reg <= din_id_reg_1088_pp0_iter6_reg;
                din_keep_reg_1078 <= in_axis_TKEEP;
                din_keep_reg_1078_pp0_iter3_reg <= din_keep_reg_1078;
                din_keep_reg_1078_pp0_iter4_reg <= din_keep_reg_1078_pp0_iter3_reg;
                din_keep_reg_1078_pp0_iter5_reg <= din_keep_reg_1078_pp0_iter4_reg;
                din_keep_reg_1078_pp0_iter6_reg <= din_keep_reg_1078_pp0_iter5_reg;
                din_keep_reg_1078_pp0_iter7_reg <= din_keep_reg_1078_pp0_iter6_reg;
                din_strb_reg_1083 <= in_axis_TSTRB;
                din_strb_reg_1083_pp0_iter3_reg <= din_strb_reg_1083;
                din_strb_reg_1083_pp0_iter4_reg <= din_strb_reg_1083_pp0_iter3_reg;
                din_strb_reg_1083_pp0_iter5_reg <= din_strb_reg_1083_pp0_iter4_reg;
                din_strb_reg_1083_pp0_iter6_reg <= din_strb_reg_1083_pp0_iter5_reg;
                din_strb_reg_1083_pp0_iter7_reg <= din_strb_reg_1083_pp0_iter6_reg;
                dout_last_reg_1131 <= dout_last_fu_509_p2;
                dout_last_reg_1131_pp0_iter3_reg <= dout_last_reg_1131;
                dout_last_reg_1131_pp0_iter4_reg <= dout_last_reg_1131_pp0_iter3_reg;
                dout_last_reg_1131_pp0_iter5_reg <= dout_last_reg_1131_pp0_iter4_reg;
                dout_last_reg_1131_pp0_iter6_reg <= dout_last_reg_1131_pp0_iter5_reg;
                dout_last_reg_1131_pp0_iter7_reg <= dout_last_reg_1131_pp0_iter6_reg;
                edge_reg_1193 <= edge_fu_867_p2;
                first_iter_0_reg_1061 <= first_iter_0_fu_400_p2;
                first_iter_0_reg_1061_pp0_iter3_reg <= first_iter_0_reg_1061;
                first_iter_0_reg_1061_pp0_iter4_reg <= first_iter_0_reg_1061_pp0_iter3_reg;
                first_iter_0_reg_1061_pp0_iter5_reg <= first_iter_0_reg_1061_pp0_iter4_reg;
                first_iter_0_reg_1061_pp0_iter6_reg <= first_iter_0_reg_1061_pp0_iter5_reg;
                first_iter_0_reg_1061_pp0_iter7_reg <= first_iter_0_reg_1061_pp0_iter6_reg;
                g_reg_1098 <= in_axis_TDATA(15 downto 8);
                g_reg_1098_pp0_iter3_reg <= g_reg_1098;
                gray_reg_1154 <= acc_fu_582_p2(15 downto 8);
                icmp_ln120_reg_1198 <= icmp_ln120_fu_889_p2;
                icmp_ln72_reg_1051 <= icmp_ln72_fu_350_p2;
                icmp_ln72_reg_1051_pp0_iter3_reg <= icmp_ln72_reg_1051;
                icmp_ln72_reg_1051_pp0_iter4_reg <= icmp_ln72_reg_1051_pp0_iter3_reg;
                icmp_ln72_reg_1051_pp0_iter5_reg <= icmp_ln72_reg_1051_pp0_iter4_reg;
                line0_addr_reg_1118 <= zext_ln72_fu_433_p1(10 - 1 downto 0);
                line0_addr_reg_1118_pp0_iter3_reg <= line0_addr_reg_1118;
                line0_addr_reg_1118_pp0_iter4_reg <= line0_addr_reg_1118_pp0_iter3_reg;
                line0_addr_reg_1118_pp0_iter5_reg <= line0_addr_reg_1118_pp0_iter4_reg;
                line0_load_reg_1137_pp0_iter4_reg <= line0_load_reg_1137;
                line0_load_reg_1137_pp0_iter5_reg <= line0_load_reg_1137_pp0_iter4_reg;
                line1_addr_reg_1113 <= zext_ln72_fu_433_p1(10 - 1 downto 0);
                line1_load_reg_1148_pp0_iter5_reg <= line1_load_reg_1148;
                sub_ln107_1_reg_1166 <= sub_ln107_1_fu_659_p2;
                tmp_2_reg_1183 <= gx_2_fu_782_p3(10 downto 10);
                tmp_3_reg_1188 <= gy_2_fu_789_p3(10 downto 10);
                trunc_ln112_reg_1171 <= trunc_ln112_fu_796_p1;
                trunc_ln113_reg_1177 <= trunc_ln113_fu_800_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready;
                icmp_ln65_reg_1047 <= icmp_ln65_fu_327_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                ap_loop_exit_ready_pp0_iter3_reg <= ap_loop_exit_ready_pp0_iter2_reg;
                ap_loop_exit_ready_pp0_iter4_reg <= ap_loop_exit_ready_pp0_iter3_reg;
                ap_loop_exit_ready_pp0_iter5_reg <= ap_loop_exit_ready_pp0_iter4_reg;
                ap_loop_exit_ready_pp0_iter6_reg <= ap_loop_exit_ready_pp0_iter5_reg;
                ap_loop_exit_ready_pp0_iter7_reg <= ap_loop_exit_ready_pp0_iter6_reg;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001_grp1) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1))) then
                line0_load_reg_1137 <= line0_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001_grp1) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1))) then
                line1_load_reg_1148 <= line1_q1;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_CS_fsm)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;
    acc_fu_582_p2 <= std_logic_vector(unsigned(zext_ln16_2_fu_579_p1) + unsigned(grp_fu_946_p3));
    add_ln104_1_fu_739_p2 <= std_logic_vector(unsigned(zext_ln104_3_fu_736_p1) + unsigned(zext_ln104_1_fu_715_p1));
    add_ln104_fu_613_p2 <= std_logic_vector(unsigned(zext_ln105_3_fu_609_p1) + unsigned(zext_ln103_1_fu_601_p1));
    add_ln105_fu_755_p2 <= std_logic_vector(unsigned(zext_ln105_fu_726_p1) + unsigned(zext_ln104_2_fu_733_p1));
    add_ln108_fu_643_p2 <= std_logic_vector(unsigned(zext_ln108_1_fu_639_p1) + unsigned(zext_ln105_2_fu_605_p1));
    add_ln65_1_fu_370_p2 <= std_logic_vector(unsigned(y_fu_170) + unsigned(ap_const_lv31_1));
    add_ln65_fu_332_p2 <= std_logic_vector(unsigned(indvar_flatten_fu_174) + unsigned(ap_const_lv41_1));
    add_ln72_fu_514_p2 <= std_logic_vector(unsigned(select_ln65_fu_362_p3) + unsigned(ap_const_lv11_1));
    and_ln102_fu_503_p2 <= (icmp_ln102_fu_497_p2 and icmp_fu_416_p2);
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);

    ap_block_pp0_assign_proc : process(ap_CS_fsm, ap_block_pp0_stage0_subdone)
    begin
                ap_block_pp0 <= ((ap_ST_fsm_pp0_stage0 = ap_CS_fsm) and (ap_const_boolean_1 = ap_block_pp0_stage0_subdone));
    end process;

        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_01001_grp1_assign_proc : process(ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter8, out_axis_TREADY, ap_block_state3_pp0_stage0_iter2_grp1)
    begin
                ap_block_pp0_stage0_01001_grp1 <= (((out_axis_TREADY = ap_const_logic_0) and (ap_enable_reg_pp0_iter8 = ap_const_logic_1)) or ((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state3_pp0_stage0_iter2_grp1)));
    end process;


    ap_block_pp0_stage0_11001_assign_proc : process(ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter8, out_axis_TREADY, ap_block_state3_pp0_stage0_iter2_grp1)
    begin
                ap_block_pp0_stage0_11001 <= (((out_axis_TREADY = ap_const_logic_0) and (ap_enable_reg_pp0_iter8 = ap_const_logic_1)) or ((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state3_pp0_stage0_iter2_grp1)));
    end process;

        ap_block_pp0_stage0_11001_grp0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_11001_grp1_assign_proc : process(ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter8, out_axis_TREADY, ap_block_state3_pp0_stage0_iter2_grp1)
    begin
                ap_block_pp0_stage0_11001_grp1 <= (((out_axis_TREADY = ap_const_logic_0) and (ap_enable_reg_pp0_iter8 = ap_const_logic_1)) or ((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state3_pp0_stage0_iter2_grp1)));
    end process;

        ap_block_pp0_stage0_grp1 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_subdone_assign_proc : process(ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter8, out_axis_TREADY, ap_block_state3_pp0_stage0_iter2_grp1)
    begin
                ap_block_pp0_stage0_subdone <= (((out_axis_TREADY = ap_const_logic_0) and (ap_enable_reg_pp0_iter8 = ap_const_logic_1)) or ((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state3_pp0_stage0_iter2_grp1)));
    end process;

        ap_block_pp0_stage0_subdone_grp0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state3_pp0_stage0_iter2_grp1_assign_proc : process(in_axis_TVALID, icmp_ln65_reg_1047)
    begin
                ap_block_state3_pp0_stage0_iter2_grp1 <= ((icmp_ln65_reg_1047 = ap_const_lv1_0) and (in_axis_TVALID = ap_const_logic_0));
    end process;


    ap_condition_exit_pp0_iter1_stage0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_subdone, icmp_ln65_fu_327_p2)
    begin
        if (((icmp_ln65_fu_327_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_condition_exit_pp0_iter1_stage0 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter1_stage0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_condition_exit_pp0_iter2_stage0_assign_proc : process(ap_enable_reg_pp0_iter2, icmp_ln65_reg_1047, ap_block_pp0_stage0_subdone)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (icmp_ln65_reg_1047 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            ap_condition_exit_pp0_iter2_stage0 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter2_stage0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_done <= ap_done_sig;

    ap_done_int_assign_proc : process(ap_block_pp0_stage0_subdone, ap_done_reg, ap_loop_exit_ready_pp0_iter7_reg)
    begin
        if (((ap_loop_exit_ready_pp0_iter7_reg = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
            ap_done_int <= ap_const_logic_1;
        else 
            ap_done_int <= ap_done_reg;
        end if; 
    end process;

        ap_enable_operation_131 <= (ap_const_boolean_1 = ap_const_boolean_1);

    ap_enable_operation_77_assign_proc : process(icmp_ln65_reg_1047)
    begin
                ap_enable_operation_77 <= (icmp_ln65_reg_1047 = ap_const_lv1_0);
    end process;

        ap_enable_operation_87 <= (ap_const_boolean_1 = ap_const_boolean_1);
        ap_enable_operation_88 <= (ap_const_boolean_1 = ap_const_boolean_1);
        ap_enable_operation_89 <= (ap_const_boolean_1 = ap_const_boolean_1);
        ap_enable_operation_97 <= (ap_const_boolean_1 = ap_const_boolean_1);
    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_reg_pp0_iter0 <= ap_start_int;

    ap_enable_state3_pp0_iter2_stage0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter2)
    begin
                ap_enable_state3_pp0_iter2_stage0 <= ((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0));
    end process;


    ap_enable_state4_pp0_iter3_stage0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter3)
    begin
                ap_enable_state4_pp0_iter3_stage0 <= ((ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0));
    end process;


    ap_enable_state5_pp0_iter4_stage0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter4)
    begin
                ap_enable_state5_pp0_iter4_stage0 <= ((ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0));
    end process;


    ap_enable_state7_pp0_iter6_stage0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter6)
    begin
                ap_enable_state7_pp0_iter6_stage0 <= ((ap_enable_reg_pp0_iter6 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0));
    end process;


    ap_idle_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_idle_pp0, ap_start_int)
    begin
        if (((ap_start_int = ap_const_logic_0) and (ap_idle_pp0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter5, ap_enable_reg_pp0_iter6, ap_enable_reg_pp0_iter7, ap_enable_reg_pp0_iter8)
    begin
        if (((ap_enable_reg_pp0_iter8 = ap_const_logic_0) and (ap_enable_reg_pp0_iter7 = ap_const_logic_0) and (ap_enable_reg_pp0_iter6 = ap_const_logic_0) and (ap_enable_reg_pp0_iter5 = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_loop_exit_ready <= ap_condition_exit_pp0_iter1_stage0;
    ap_ready <= ap_ready_sig;

    ap_ready_int_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_ready_int <= ap_const_logic_1;
        else 
            ap_ready_int <= ap_const_logic_0;
        end if; 
    end process;

    ax_1_fu_834_p3 <= 
        ax_fu_829_p2 when (tmp_2_reg_1183(0) = '1') else 
        trunc_ln112_reg_1171;
    ax_fu_829_p2 <= std_logic_vector(unsigned(ap_const_lv10_0) - unsigned(trunc_ln112_reg_1171));
    ay_1_fu_849_p3 <= 
        ay_fu_844_p2 when (tmp_3_reg_1188(0) = '1') else 
        trunc_ln113_reg_1177;
    ay_fu_844_p2 <= std_logic_vector(unsigned(ap_const_lv10_0) - unsigned(trunc_ln113_reg_1177));
    b_fu_475_p1 <= in_axis_TDATA(8 - 1 downto 0);
    border_fu_916_p2 <= (or_ln123_fu_908_p2 or or_ln123_1_fu_912_p2);
    cmp130_fu_422_p2 <= "1" when (select_ln65_6_fu_376_p3 = ap_const_lv31_0) else "0";
    cmp134_fu_428_p2 <= "1" when (zext_ln65_fu_384_p1 = sub133) else "0";
    dout_last_fu_509_p2 <= "1" when (select_ln65_7_cast_fu_396_p1 = sub) else "0";
    edge_1_fu_895_p3 <= 
        ap_const_lv8_FF when (icmp_ln120_reg_1198(0) = '1') else 
        edge_reg_1193;
    edge_2_fu_901_p3 <= 
        edge_1_fu_895_p3 when (and_ln102_reg_1124_pp0_iter7_reg(0) = '1') else 
        ap_const_lv8_0;
    edge_3_fu_922_p3 <= 
        ap_const_lv8_0 when (border_fu_916_p2(0) = '1') else 
        edge_2_fu_901_p3;
    edge_fu_867_p2 <= std_logic_vector(unsigned(trunc_ln116_fu_855_p1) + unsigned(trunc_ln115_fu_840_p1));
    first_iter_0_fu_400_p2 <= "1" when (select_ln65_fu_362_p3 = ap_const_lv11_0) else "0";

    grp_fu_946_ce_assign_proc : process(ap_block_pp0_stage0_11001_grp1)
    begin
        if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001_grp1)) then 
            grp_fu_946_ce <= ap_const_logic_1;
        else 
            grp_fu_946_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_946_p0 <= grp_fu_946_p00(8 - 1 downto 0);
    grp_fu_946_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(r_fu_459_p3),15));
    grp_fu_946_p1 <= ap_const_lv15_4D(7 - 1 downto 0);

    grp_fu_955_ce_assign_proc : process(ap_block_pp0_stage0_11001_grp1)
    begin
        if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001_grp1)) then 
            grp_fu_955_ce <= ap_const_logic_1;
        else 
            grp_fu_955_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_955_p0 <= grp_fu_955_p00(8 - 1 downto 0);
    grp_fu_955_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(b_fu_475_p1),13));
    grp_fu_955_p1 <= ap_const_lv13_1D(5 - 1 downto 0);
    grp_fu_955_p2 <= ap_const_lv13_80(8 - 1 downto 0);
    gx_2_fu_782_p3 <= 
        gx_fu_765_p2 when (and_ln102_reg_1124_pp0_iter5_reg(0) = '1') else 
        ap_const_lv11_0;
    gx_fu_765_p2 <= std_logic_vector(unsigned(zext_ln105_4_fu_761_p1) + unsigned(sub_ln104_fu_749_p2));
    gy_2_fu_789_p3 <= 
        gy_fu_776_p2 when (and_ln102_reg_1124_pp0_iter5_reg(0) = '1') else 
        ap_const_lv11_0;
    gy_fu_776_p2 <= std_logic_vector(unsigned(sub_ln108_fu_771_p2) + unsigned(zext_ln105_1_fu_730_p1));
    icmp_fu_416_p2 <= "0" when (tmp_fu_406_p4 = ap_const_lv30_0) else "1";
    icmp_ln102_fu_497_p2 <= "0" when (tmp_1_fu_487_p4 = ap_const_lv10_0) else "1";
    icmp_ln120_fu_889_p2 <= "0" when (tmp_4_fu_879_p4 = ap_const_lv3_0) else "1";
    icmp_ln65_fu_327_p2 <= "1" when (indvar_flatten_fu_174 = bound) else "0";
    icmp_ln72_fu_350_p2 <= "1" when (signed(zext_ln72_1_fu_346_p1) < signed(width)) else "0";

    in_axis_TDATA_blk_n_assign_proc : process(ap_enable_reg_pp0_iter2, in_axis_TVALID, icmp_ln65_reg_1047, ap_block_pp0_stage0_grp1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_grp1) and (icmp_ln65_reg_1047 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            in_axis_TDATA_blk_n <= in_axis_TVALID;
        else 
            in_axis_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    in_axis_TREADY_assign_proc : process(ap_enable_reg_pp0_iter2, icmp_ln65_reg_1047, ap_block_pp0_stage0_11001_grp1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001_grp1) and (icmp_ln65_reg_1047 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            in_axis_TREADY <= ap_const_logic_1;
        else 
            in_axis_TREADY <= ap_const_logic_0;
        end if; 
    end process;

    line0_address0 <= zext_ln72_fu_433_p1(10 - 1 downto 0);
    line0_address1 <= line0_addr_reg_1118_pp0_iter5_reg;
    line0_ce0 <= line0_ce0_local;

    line0_ce0_local_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001_grp1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001_grp1) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            line0_ce0_local <= ap_const_logic_1;
        else 
            line0_ce0_local <= ap_const_logic_0;
        end if; 
    end process;

    line0_ce1 <= line0_ce1_local;

    line0_ce1_local_assign_proc : process(ap_enable_reg_pp0_iter6, ap_block_pp0_stage0_11001_grp1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001_grp1) and (ap_enable_reg_pp0_iter6 = ap_const_logic_1))) then 
            line0_ce1_local <= ap_const_logic_1;
        else 
            line0_ce1_local <= ap_const_logic_0;
        end if; 
    end process;

    line0_d1 <= gray_reg_1154;
    line0_we1 <= line0_we1_local;

    line0_we1_local_assign_proc : process(ap_enable_reg_pp0_iter6, ap_block_pp0_stage0_11001_grp1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001_grp1) and (ap_enable_reg_pp0_iter6 = ap_const_logic_1))) then 
            line0_we1_local <= ap_const_logic_1;
        else 
            line0_we1_local <= ap_const_logic_0;
        end if; 
    end process;

    line1_address1 <= line1_addr_reg_1113;
    line1_ce1 <= line1_ce1_local;

    line1_ce1_local_assign_proc : process(ap_enable_reg_pp0_iter3, ap_block_pp0_stage0_11001_grp1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001_grp1) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1))) then 
            line1_ce1_local <= ap_const_logic_1;
        else 
            line1_ce1_local <= ap_const_logic_0;
        end if; 
    end process;

    line1_d1 <= line0_q0;
    line1_we1 <= line1_we1_local;

    line1_we1_local_assign_proc : process(ap_enable_reg_pp0_iter3, ap_block_pp0_stage0_11001_grp1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001_grp1) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1))) then 
            line1_we1_local <= ap_const_logic_1;
        else 
            line1_we1_local <= ap_const_logic_0;
        end if; 
    end process;

    mag_fu_873_p2 <= std_logic_vector(unsigned(zext_ln118_1_fu_863_p1) + unsigned(zext_ln118_fu_859_p1));
    mul_ln16_1_fu_533_p0 <= mul_ln16_1_fu_533_p00(8 - 1 downto 0);
    mul_ln16_1_fu_533_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(g_reg_1098_pp0_iter3_reg),16));
    mul_ln16_1_fu_533_p1 <= ap_const_lv16_96(9 - 1 downto 0);
    or_ln123_1_fu_912_p2 <= (dout_last_reg_1131_pp0_iter7_reg or cmp134_reg_1073_pp0_iter7_reg);
    or_ln123_fu_908_p2 <= (first_iter_0_reg_1061_pp0_iter7_reg or cmp130_reg_1067_pp0_iter7_reg);
    out_axis_TDATA <= ((edge_3_fu_922_p3 & edge_3_fu_922_p3) & edge_3_fu_922_p3);

    out_axis_TDATA_blk_n_assign_proc : process(ap_enable_reg_pp0_iter8, out_axis_TREADY, ap_block_pp0_stage0_grp1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_grp1) and (ap_enable_reg_pp0_iter8 = ap_const_logic_1))) then 
            out_axis_TDATA_blk_n <= out_axis_TREADY;
        else 
            out_axis_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    out_axis_TDEST <= din_dest_reg_1093_pp0_iter7_reg;
    out_axis_TID <= din_id_reg_1088_pp0_iter7_reg;
    out_axis_TKEEP <= din_keep_reg_1078_pp0_iter7_reg;
    out_axis_TLAST <= dout_last_reg_1131_pp0_iter7_reg;
    out_axis_TSTRB <= din_strb_reg_1083_pp0_iter7_reg;
    out_axis_TUSER <= (first_iter_0_reg_1061_pp0_iter7_reg and cmp130_reg_1067_pp0_iter7_reg);

    out_axis_TVALID_assign_proc : process(ap_enable_reg_pp0_iter8, ap_block_pp0_stage0_11001_grp1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001_grp1) and (ap_enable_reg_pp0_iter8 = ap_const_logic_1))) then 
            out_axis_TVALID <= ap_const_logic_1;
        else 
            out_axis_TVALID <= ap_const_logic_0;
        end if; 
    end process;

    r_fu_459_p3 <= in_axis_TDATA(23 downto 16);
    select_ln65_1_fu_551_p3 <= 
        p_0_0_011211626_fu_162 when (icmp_ln72_reg_1051_pp0_iter4_reg(0) = '1') else 
        ap_const_lv8_0;
    select_ln65_2_fu_558_p3 <= 
        p_0_0_011221625_fu_158 when (icmp_ln72_reg_1051_pp0_iter4_reg(0) = '1') else 
        ap_const_lv8_0;
    select_ln65_3_fu_690_p3 <= 
        p_0_0_011231624_fu_154 when (icmp_ln72_reg_1051_pp0_iter5_reg(0) = '1') else 
        ap_const_lv8_0;
    select_ln65_4_fu_565_p3 <= 
        p_0_0_011251622_fu_146 when (icmp_ln72_reg_1051_pp0_iter4_reg(0) = '1') else 
        ap_const_lv8_0;
    select_ln65_5_fu_572_p3 <= 
        p_0_0_011261621_fu_142 when (icmp_ln72_reg_1051_pp0_iter4_reg(0) = '1') else 
        ap_const_lv8_0;
    select_ln65_6_fu_376_p3 <= 
        y_fu_170 when (icmp_ln72_fu_350_p2(0) = '1') else 
        add_ln65_1_fu_370_p2;
    select_ln65_7_cast_fu_396_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln65_7_fu_388_p3),32));
    select_ln65_7_fu_388_p3 <= 
        trunc_ln72_fu_358_p1 when (icmp_ln72_fu_350_p2(0) = '1') else 
        ap_const_lv10_0;
    select_ln65_8_fu_700_p3 <= 
        p_0_0_011241623_fu_150 when (icmp_ln72_reg_1051_pp0_iter5_reg(0) = '1') else 
        ap_const_lv8_0;
    select_ln65_fu_362_p3 <= 
        x_fu_166 when (icmp_ln72_fu_350_p2(0) = '1') else 
        ap_const_lv11_0;
    shl_ln104_1_fu_719_p3 <= (line0_load_reg_1137_pp0_iter5_reg & ap_const_lv1_0);
    shl_ln1_fu_619_p3 <= (select_ln65_4_fu_565_p3 & ap_const_lv1_0);
    shl_ln2_fu_631_p3 <= (select_ln65_1_fu_551_p3 & ap_const_lv1_0);
    shl_ln_fu_707_p3 <= (select_ln65_8_fu_700_p3 & ap_const_lv1_0);
    sub_ln104_fu_749_p2 <= std_logic_vector(unsigned(zext_ln103_fu_697_p1) - unsigned(zext_ln104_4_fu_745_p1));
    sub_ln107_1_fu_659_p2 <= std_logic_vector(unsigned(sub_ln107_fu_653_p2) - unsigned(zext_ln104_fu_597_p1));
    sub_ln107_fu_653_p2 <= std_logic_vector(unsigned(zext_ln107_fu_649_p1) - unsigned(zext_ln108_fu_627_p1));
    sub_ln108_fu_771_p2 <= std_logic_vector(unsigned(sub_ln107_1_reg_1166) - unsigned(zext_ln103_fu_697_p1));
    tmp_1_fu_487_p4 <= select_ln65_fu_362_p3(10 downto 1);
    tmp_4_fu_879_p4 <= mag_fu_873_p2(10 downto 8);
    tmp_fu_406_p4 <= select_ln65_6_fu_376_p3(30 downto 1);
    trunc_ln112_fu_796_p1 <= gx_2_fu_782_p3(10 - 1 downto 0);
    trunc_ln113_fu_800_p1 <= gy_2_fu_789_p3(10 - 1 downto 0);
    trunc_ln115_fu_840_p1 <= ax_1_fu_834_p3(8 - 1 downto 0);
    trunc_ln116_fu_855_p1 <= ay_1_fu_849_p3(8 - 1 downto 0);
    trunc_ln72_fu_358_p1 <= x_fu_166(10 - 1 downto 0);
    zext_ln103_1_fu_601_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln65_5_fu_572_p3),9));
    zext_ln103_fu_697_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(line1_load_reg_1148_pp0_iter5_reg),11));
    zext_ln104_1_fu_715_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln_fu_707_p3),10));
    zext_ln104_2_fu_733_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(gray_reg_1154),10));
    zext_ln104_3_fu_736_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln104_reg_1161),10));
    zext_ln104_4_fu_745_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln104_1_fu_739_p2),11));
    zext_ln104_fu_597_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln65_5_fu_572_p3),11));
    zext_ln105_1_fu_730_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(gray_reg_1154),11));
    zext_ln105_2_fu_605_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln65_2_fu_558_p3),10));
    zext_ln105_3_fu_609_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln65_2_fu_558_p3),9));
    zext_ln105_4_fu_761_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln105_fu_755_p2),11));
    zext_ln105_fu_726_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln104_1_fu_719_p3),10));
    zext_ln107_fu_649_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln108_fu_643_p2),11));
    zext_ln108_1_fu_639_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln2_fu_631_p3),10));
    zext_ln108_fu_627_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln1_fu_619_p3),11));
    zext_ln118_1_fu_863_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ay_1_fu_849_p3),11));
    zext_ln118_fu_859_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ax_1_fu_834_p3),11));
    zext_ln16_2_fu_579_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(grp_fu_955_p3),16));
    zext_ln65_fu_384_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln65_6_fu_376_p3),32));
    zext_ln72_1_fu_346_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(x_fu_166),32));
    zext_ln72_fu_433_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln65_fu_362_p3),64));
end behav;
