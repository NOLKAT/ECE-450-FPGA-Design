-- ==============================================================
-- Generated by Vitis HLS v2025.1
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2025 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity sobel_rgb_axis is
generic (
    C_S_AXI_CTRL_ADDR_WIDTH : INTEGER := 5;
    C_S_AXI_CTRL_DATA_WIDTH : INTEGER := 32 );
port (
    ap_clk : IN STD_LOGIC;
    ap_rst_n : IN STD_LOGIC;
    in_axis_TDATA : IN STD_LOGIC_VECTOR (23 downto 0);
    in_axis_TVALID : IN STD_LOGIC;
    in_axis_TREADY : OUT STD_LOGIC;
    in_axis_TKEEP : IN STD_LOGIC_VECTOR (2 downto 0);
    in_axis_TSTRB : IN STD_LOGIC_VECTOR (2 downto 0);
    in_axis_TUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    in_axis_TLAST : IN STD_LOGIC_VECTOR (0 downto 0);
    in_axis_TID : IN STD_LOGIC_VECTOR (0 downto 0);
    in_axis_TDEST : IN STD_LOGIC_VECTOR (0 downto 0);
    out_axis_TDATA : OUT STD_LOGIC_VECTOR (23 downto 0);
    out_axis_TVALID : OUT STD_LOGIC;
    out_axis_TREADY : IN STD_LOGIC;
    out_axis_TKEEP : OUT STD_LOGIC_VECTOR (2 downto 0);
    out_axis_TSTRB : OUT STD_LOGIC_VECTOR (2 downto 0);
    out_axis_TUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    out_axis_TLAST : OUT STD_LOGIC_VECTOR (0 downto 0);
    out_axis_TID : OUT STD_LOGIC_VECTOR (0 downto 0);
    out_axis_TDEST : OUT STD_LOGIC_VECTOR (0 downto 0);
    s_axi_CTRL_AWVALID : IN STD_LOGIC;
    s_axi_CTRL_AWREADY : OUT STD_LOGIC;
    s_axi_CTRL_AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_CTRL_ADDR_WIDTH-1 downto 0);
    s_axi_CTRL_WVALID : IN STD_LOGIC;
    s_axi_CTRL_WREADY : OUT STD_LOGIC;
    s_axi_CTRL_WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_CTRL_DATA_WIDTH-1 downto 0);
    s_axi_CTRL_WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_CTRL_DATA_WIDTH/8-1 downto 0);
    s_axi_CTRL_ARVALID : IN STD_LOGIC;
    s_axi_CTRL_ARREADY : OUT STD_LOGIC;
    s_axi_CTRL_ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_CTRL_ADDR_WIDTH-1 downto 0);
    s_axi_CTRL_RVALID : OUT STD_LOGIC;
    s_axi_CTRL_RREADY : IN STD_LOGIC;
    s_axi_CTRL_RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_CTRL_DATA_WIDTH-1 downto 0);
    s_axi_CTRL_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    s_axi_CTRL_BVALID : OUT STD_LOGIC;
    s_axi_CTRL_BREADY : IN STD_LOGIC;
    s_axi_CTRL_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    interrupt : OUT STD_LOGIC );
end;


architecture behav of sobel_rgb_axis is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "sobel_rgb_axis_sobel_rgb_axis,hls_ip_2025_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7a35t-cpg236-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=7.343125,HLS_SYN_LAT=-1,HLS_SYN_TPT=none,HLS_SYN_MEM=2,HLS_SYN_DSP=0,HLS_SYN_FF=1580,HLS_SYN_LUT=2091,HLS_VERSION=2025_1}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (5 downto 0) := "000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (5 downto 0) := "000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (5 downto 0) := "001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (5 downto 0) := "010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (5 downto 0) := "100000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant C_S_AXI_DATA_WIDTH : INTEGER := 32;
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv31_0 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000000000000";
    constant ap_const_lv11_0 : STD_LOGIC_VECTOR (10 downto 0) := "00000000000";
    constant ap_const_lv32_FFFFFFFF : STD_LOGIC_VECTOR (31 downto 0) := "11111111111111111111111111111111";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";

    signal ap_rst_n_inv : STD_LOGIC;
    signal ap_start : STD_LOGIC;
    signal ap_done : STD_LOGIC;
    signal ap_idle : STD_LOGIC;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal ap_ready : STD_LOGIC;
    signal width : STD_LOGIC_VECTOR (31 downto 0);
    signal height : STD_LOGIC_VECTOR (31 downto 0);
    signal line0_ce0 : STD_LOGIC;
    signal line0_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal line0_address1 : STD_LOGIC_VECTOR (9 downto 0);
    signal line0_ce1 : STD_LOGIC;
    signal line0_we1 : STD_LOGIC;
    signal line0_d1 : STD_LOGIC_VECTOR (7 downto 0);
    signal line1_address1 : STD_LOGIC_VECTOR (9 downto 0);
    signal line1_ce1 : STD_LOGIC;
    signal line1_we1 : STD_LOGIC;
    signal line1_d1 : STD_LOGIC_VECTOR (7 downto 0);
    signal line1_q1 : STD_LOGIC_VECTOR (7 downto 0);
    signal height_read_reg_212 : STD_LOGIC_VECTOR (31 downto 0);
    signal width_read_reg_217 : STD_LOGIC_VECTOR (31 downto 0);
    signal smax_fu_170_p3 : STD_LOGIC_VECTOR (30 downto 0);
    signal smax_reg_224 : STD_LOGIC_VECTOR (30 downto 0);
    signal smax1_fu_184_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal smax1_reg_229 : STD_LOGIC_VECTOR (10 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal grp_fu_152_p2 : STD_LOGIC_VECTOR (40 downto 0);
    signal bound_reg_244 : STD_LOGIC_VECTOR (40 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal sub_fu_200_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal sub_reg_249 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal sub133_fu_206_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal sub133_reg_254 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_sobel_rgb_axis_Pipeline_init_cols_fu_102_ap_start : STD_LOGIC;
    signal grp_sobel_rgb_axis_Pipeline_init_cols_fu_102_ap_done : STD_LOGIC;
    signal grp_sobel_rgb_axis_Pipeline_init_cols_fu_102_ap_idle : STD_LOGIC;
    signal grp_sobel_rgb_axis_Pipeline_init_cols_fu_102_ap_ready : STD_LOGIC;
    signal grp_sobel_rgb_axis_Pipeline_init_cols_fu_102_line0_address1 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_sobel_rgb_axis_Pipeline_init_cols_fu_102_line0_ce1 : STD_LOGIC;
    signal grp_sobel_rgb_axis_Pipeline_init_cols_fu_102_line0_we1 : STD_LOGIC;
    signal grp_sobel_rgb_axis_Pipeline_init_cols_fu_102_line0_d1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_sobel_rgb_axis_Pipeline_init_cols_fu_102_line1_address1 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_sobel_rgb_axis_Pipeline_init_cols_fu_102_line1_ce1 : STD_LOGIC;
    signal grp_sobel_rgb_axis_Pipeline_init_cols_fu_102_line1_we1 : STD_LOGIC;
    signal grp_sobel_rgb_axis_Pipeline_init_cols_fu_102_line1_d1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_sobel_rgb_axis_Pipeline_row_loop_col_loop_fu_112_ap_start : STD_LOGIC;
    signal grp_sobel_rgb_axis_Pipeline_row_loop_col_loop_fu_112_ap_done : STD_LOGIC;
    signal grp_sobel_rgb_axis_Pipeline_row_loop_col_loop_fu_112_ap_idle : STD_LOGIC;
    signal grp_sobel_rgb_axis_Pipeline_row_loop_col_loop_fu_112_ap_ready : STD_LOGIC;
    signal grp_sobel_rgb_axis_Pipeline_row_loop_col_loop_fu_112_out_axis_TREADY : STD_LOGIC;
    signal grp_sobel_rgb_axis_Pipeline_row_loop_col_loop_fu_112_in_axis_TREADY : STD_LOGIC;
    signal grp_sobel_rgb_axis_Pipeline_row_loop_col_loop_fu_112_out_axis_TDATA : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_sobel_rgb_axis_Pipeline_row_loop_col_loop_fu_112_out_axis_TVALID : STD_LOGIC;
    signal grp_sobel_rgb_axis_Pipeline_row_loop_col_loop_fu_112_out_axis_TKEEP : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_sobel_rgb_axis_Pipeline_row_loop_col_loop_fu_112_out_axis_TSTRB : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_sobel_rgb_axis_Pipeline_row_loop_col_loop_fu_112_out_axis_TUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_sobel_rgb_axis_Pipeline_row_loop_col_loop_fu_112_out_axis_TLAST : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_sobel_rgb_axis_Pipeline_row_loop_col_loop_fu_112_out_axis_TID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_sobel_rgb_axis_Pipeline_row_loop_col_loop_fu_112_out_axis_TDEST : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_sobel_rgb_axis_Pipeline_row_loop_col_loop_fu_112_line1_address1 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_sobel_rgb_axis_Pipeline_row_loop_col_loop_fu_112_line1_ce1 : STD_LOGIC;
    signal grp_sobel_rgb_axis_Pipeline_row_loop_col_loop_fu_112_line1_we1 : STD_LOGIC;
    signal grp_sobel_rgb_axis_Pipeline_row_loop_col_loop_fu_112_line1_d1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_sobel_rgb_axis_Pipeline_row_loop_col_loop_fu_112_line0_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_sobel_rgb_axis_Pipeline_row_loop_col_loop_fu_112_line0_ce0 : STD_LOGIC;
    signal grp_sobel_rgb_axis_Pipeline_row_loop_col_loop_fu_112_line0_address1 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_sobel_rgb_axis_Pipeline_row_loop_col_loop_fu_112_line0_ce1 : STD_LOGIC;
    signal grp_sobel_rgb_axis_Pipeline_row_loop_col_loop_fu_112_line0_we1 : STD_LOGIC;
    signal grp_sobel_rgb_axis_Pipeline_row_loop_col_loop_fu_112_line0_d1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_sobel_rgb_axis_Pipeline_init_cols_fu_102_ap_start_reg : STD_LOGIC := '0';
    signal grp_sobel_rgb_axis_Pipeline_row_loop_col_loop_fu_112_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal out_axis_TDATA_reg : STD_LOGIC_VECTOR (23 downto 0);
    signal out_axis_TKEEP_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal out_axis_TSTRB_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal out_axis_TUSER_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal out_axis_TLAST_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal out_axis_TID_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal out_axis_TDEST_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_152_p0 : STD_LOGIC_VECTOR (30 downto 0);
    signal grp_fu_152_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal empty_fu_164_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln21_1_fu_160_p1 : STD_LOGIC_VECTOR (30 downto 0);
    signal empty_22_fu_178_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln21_fu_156_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal grp_fu_152_ce : STD_LOGIC;
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal regslice_both_out_axis_V_data_V_U_apdone_blk : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_ST_fsm_state1_blk : STD_LOGIC;
    signal ap_ST_fsm_state2_blk : STD_LOGIC;
    signal ap_ST_fsm_state3_blk : STD_LOGIC;
    signal ap_ST_fsm_state4_blk : STD_LOGIC;
    signal ap_ST_fsm_state5_blk : STD_LOGIC;
    signal ap_ST_fsm_state6_blk : STD_LOGIC;
    signal regslice_both_in_axis_V_data_V_U_apdone_blk : STD_LOGIC;
    signal in_axis_TDATA_int_regslice : STD_LOGIC_VECTOR (23 downto 0);
    signal in_axis_TVALID_int_regslice : STD_LOGIC;
    signal in_axis_TREADY_int_regslice : STD_LOGIC;
    signal regslice_both_in_axis_V_data_V_U_ack_in : STD_LOGIC;
    signal regslice_both_in_axis_V_keep_V_U_apdone_blk : STD_LOGIC;
    signal in_axis_TKEEP_int_regslice : STD_LOGIC_VECTOR (2 downto 0);
    signal regslice_both_in_axis_V_keep_V_U_vld_out : STD_LOGIC;
    signal regslice_both_in_axis_V_keep_V_U_ack_in : STD_LOGIC;
    signal regslice_both_in_axis_V_strb_V_U_apdone_blk : STD_LOGIC;
    signal in_axis_TSTRB_int_regslice : STD_LOGIC_VECTOR (2 downto 0);
    signal regslice_both_in_axis_V_strb_V_U_vld_out : STD_LOGIC;
    signal regslice_both_in_axis_V_strb_V_U_ack_in : STD_LOGIC;
    signal regslice_both_in_axis_V_user_V_U_apdone_blk : STD_LOGIC;
    signal in_axis_TUSER_int_regslice : STD_LOGIC_VECTOR (0 downto 0);
    signal regslice_both_in_axis_V_user_V_U_vld_out : STD_LOGIC;
    signal regslice_both_in_axis_V_user_V_U_ack_in : STD_LOGIC;
    signal regslice_both_in_axis_V_last_V_U_apdone_blk : STD_LOGIC;
    signal in_axis_TLAST_int_regslice : STD_LOGIC_VECTOR (0 downto 0);
    signal regslice_both_in_axis_V_last_V_U_vld_out : STD_LOGIC;
    signal regslice_both_in_axis_V_last_V_U_ack_in : STD_LOGIC;
    signal regslice_both_in_axis_V_id_V_U_apdone_blk : STD_LOGIC;
    signal in_axis_TID_int_regslice : STD_LOGIC_VECTOR (0 downto 0);
    signal regslice_both_in_axis_V_id_V_U_vld_out : STD_LOGIC;
    signal regslice_both_in_axis_V_id_V_U_ack_in : STD_LOGIC;
    signal regslice_both_in_axis_V_dest_V_U_apdone_blk : STD_LOGIC;
    signal in_axis_TDEST_int_regslice : STD_LOGIC_VECTOR (0 downto 0);
    signal regslice_both_in_axis_V_dest_V_U_vld_out : STD_LOGIC;
    signal regslice_both_in_axis_V_dest_V_U_ack_in : STD_LOGIC;
    signal out_axis_TDATA_int_regslice : STD_LOGIC_VECTOR (23 downto 0);
    signal out_axis_TVALID_int_regslice : STD_LOGIC;
    signal out_axis_TREADY_int_regslice : STD_LOGIC;
    signal regslice_both_out_axis_V_data_V_U_vld_out : STD_LOGIC;
    signal regslice_both_out_axis_V_keep_V_U_apdone_blk : STD_LOGIC;
    signal out_axis_TKEEP_int_regslice : STD_LOGIC_VECTOR (2 downto 0);
    signal regslice_both_out_axis_V_keep_V_U_ack_in_dummy : STD_LOGIC;
    signal regslice_both_out_axis_V_keep_V_U_vld_out : STD_LOGIC;
    signal regslice_both_out_axis_V_strb_V_U_apdone_blk : STD_LOGIC;
    signal out_axis_TSTRB_int_regslice : STD_LOGIC_VECTOR (2 downto 0);
    signal regslice_both_out_axis_V_strb_V_U_ack_in_dummy : STD_LOGIC;
    signal regslice_both_out_axis_V_strb_V_U_vld_out : STD_LOGIC;
    signal regslice_both_out_axis_V_user_V_U_apdone_blk : STD_LOGIC;
    signal out_axis_TUSER_int_regslice : STD_LOGIC_VECTOR (0 downto 0);
    signal regslice_both_out_axis_V_user_V_U_ack_in_dummy : STD_LOGIC;
    signal regslice_both_out_axis_V_user_V_U_vld_out : STD_LOGIC;
    signal regslice_both_out_axis_V_last_V_U_apdone_blk : STD_LOGIC;
    signal out_axis_TLAST_int_regslice : STD_LOGIC_VECTOR (0 downto 0);
    signal regslice_both_out_axis_V_last_V_U_ack_in_dummy : STD_LOGIC;
    signal regslice_both_out_axis_V_last_V_U_vld_out : STD_LOGIC;
    signal regslice_both_out_axis_V_id_V_U_apdone_blk : STD_LOGIC;
    signal out_axis_TID_int_regslice : STD_LOGIC_VECTOR (0 downto 0);
    signal regslice_both_out_axis_V_id_V_U_ack_in_dummy : STD_LOGIC;
    signal regslice_both_out_axis_V_id_V_U_vld_out : STD_LOGIC;
    signal regslice_both_out_axis_V_dest_V_U_apdone_blk : STD_LOGIC;
    signal out_axis_TDEST_int_regslice : STD_LOGIC_VECTOR (0 downto 0);
    signal regslice_both_out_axis_V_dest_V_U_ack_in_dummy : STD_LOGIC;
    signal regslice_both_out_axis_V_dest_V_U_vld_out : STD_LOGIC;
    signal grp_fu_152_p00 : STD_LOGIC_VECTOR (40 downto 0);
    signal grp_fu_152_p10 : STD_LOGIC_VECTOR (40 downto 0);
    signal ap_ce_reg : STD_LOGIC;

    component sobel_rgb_axis_sobel_rgb_axis_Pipeline_init_cols IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        width : IN STD_LOGIC_VECTOR (31 downto 0);
        line0_address1 : OUT STD_LOGIC_VECTOR (9 downto 0);
        line0_ce1 : OUT STD_LOGIC;
        line0_we1 : OUT STD_LOGIC;
        line0_d1 : OUT STD_LOGIC_VECTOR (7 downto 0);
        line1_address1 : OUT STD_LOGIC_VECTOR (9 downto 0);
        line1_ce1 : OUT STD_LOGIC;
        line1_we1 : OUT STD_LOGIC;
        line1_d1 : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;


    component sobel_rgb_axis_sobel_rgb_axis_Pipeline_row_loop_col_loop IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        in_axis_TVALID : IN STD_LOGIC;
        out_axis_TREADY : IN STD_LOGIC;
        width : IN STD_LOGIC_VECTOR (31 downto 0);
        bound : IN STD_LOGIC_VECTOR (40 downto 0);
        sub133 : IN STD_LOGIC_VECTOR (31 downto 0);
        in_axis_TDATA : IN STD_LOGIC_VECTOR (23 downto 0);
        in_axis_TREADY : OUT STD_LOGIC;
        in_axis_TKEEP : IN STD_LOGIC_VECTOR (2 downto 0);
        in_axis_TSTRB : IN STD_LOGIC_VECTOR (2 downto 0);
        in_axis_TUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        in_axis_TLAST : IN STD_LOGIC_VECTOR (0 downto 0);
        in_axis_TID : IN STD_LOGIC_VECTOR (0 downto 0);
        in_axis_TDEST : IN STD_LOGIC_VECTOR (0 downto 0);
        sub : IN STD_LOGIC_VECTOR (31 downto 0);
        out_axis_TDATA : OUT STD_LOGIC_VECTOR (23 downto 0);
        out_axis_TVALID : OUT STD_LOGIC;
        out_axis_TKEEP : OUT STD_LOGIC_VECTOR (2 downto 0);
        out_axis_TSTRB : OUT STD_LOGIC_VECTOR (2 downto 0);
        out_axis_TUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        out_axis_TLAST : OUT STD_LOGIC_VECTOR (0 downto 0);
        out_axis_TID : OUT STD_LOGIC_VECTOR (0 downto 0);
        out_axis_TDEST : OUT STD_LOGIC_VECTOR (0 downto 0);
        line1_address1 : OUT STD_LOGIC_VECTOR (9 downto 0);
        line1_ce1 : OUT STD_LOGIC;
        line1_we1 : OUT STD_LOGIC;
        line1_d1 : OUT STD_LOGIC_VECTOR (7 downto 0);
        line1_q1 : IN STD_LOGIC_VECTOR (7 downto 0);
        line0_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
        line0_ce0 : OUT STD_LOGIC;
        line0_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
        line0_address1 : OUT STD_LOGIC_VECTOR (9 downto 0);
        line0_ce1 : OUT STD_LOGIC;
        line0_we1 : OUT STD_LOGIC;
        line0_d1 : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;


    component sobel_rgb_axis_mul_31ns_11ns_41_2_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (30 downto 0);
        din1 : IN STD_LOGIC_VECTOR (10 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (40 downto 0) );
    end component;


    component sobel_rgb_axis_line0_RAM_2P_BRAM_1R1W IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (9 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        address1 : IN STD_LOGIC_VECTOR (9 downto 0);
        ce1 : IN STD_LOGIC;
        we1 : IN STD_LOGIC;
        d1 : IN STD_LOGIC_VECTOR (7 downto 0) );
    end component;


    component sobel_rgb_axis_line1_RAM_2P_BRAM_1R1W IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address1 : IN STD_LOGIC_VECTOR (9 downto 0);
        ce1 : IN STD_LOGIC;
        we1 : IN STD_LOGIC;
        d1 : IN STD_LOGIC_VECTOR (7 downto 0);
        q1 : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;


    component sobel_rgb_axis_CTRL_s_axi IS
    generic (
        C_S_AXI_ADDR_WIDTH : INTEGER;
        C_S_AXI_DATA_WIDTH : INTEGER );
    port (
        AWVALID : IN STD_LOGIC;
        AWREADY : OUT STD_LOGIC;
        AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        WVALID : IN STD_LOGIC;
        WREADY : OUT STD_LOGIC;
        WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH/8-1 downto 0);
        ARVALID : IN STD_LOGIC;
        ARREADY : OUT STD_LOGIC;
        ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        RVALID : OUT STD_LOGIC;
        RREADY : IN STD_LOGIC;
        RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        BVALID : OUT STD_LOGIC;
        BREADY : IN STD_LOGIC;
        BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        width : OUT STD_LOGIC_VECTOR (31 downto 0);
        height : OUT STD_LOGIC_VECTOR (31 downto 0);
        ap_start : OUT STD_LOGIC;
        interrupt : OUT STD_LOGIC;
        ap_ready : IN STD_LOGIC;
        ap_done : IN STD_LOGIC;
        ap_idle : IN STD_LOGIC );
    end component;


    component sobel_rgb_axis_regslice_both IS
    generic (
        DataWidth : INTEGER );
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        data_in : IN STD_LOGIC_VECTOR (DataWidth-1 downto 0);
        vld_in : IN STD_LOGIC;
        ack_in : OUT STD_LOGIC;
        data_out : OUT STD_LOGIC_VECTOR (DataWidth-1 downto 0);
        vld_out : OUT STD_LOGIC;
        ack_out : IN STD_LOGIC;
        apdone_blk : OUT STD_LOGIC );
    end component;



begin
    line0_U : component sobel_rgb_axis_line0_RAM_2P_BRAM_1R1W
    generic map (
        DataWidth => 8,
        AddressRange => 1024,
        AddressWidth => 10)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_sobel_rgb_axis_Pipeline_row_loop_col_loop_fu_112_line0_address0,
        ce0 => line0_ce0,
        q0 => line0_q0,
        address1 => line0_address1,
        ce1 => line0_ce1,
        we1 => line0_we1,
        d1 => line0_d1);

    line1_U : component sobel_rgb_axis_line1_RAM_2P_BRAM_1R1W
    generic map (
        DataWidth => 8,
        AddressRange => 1024,
        AddressWidth => 10)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address1 => line1_address1,
        ce1 => line1_ce1,
        we1 => line1_we1,
        d1 => line1_d1,
        q1 => line1_q1);

    grp_sobel_rgb_axis_Pipeline_init_cols_fu_102 : component sobel_rgb_axis_sobel_rgb_axis_Pipeline_init_cols
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => grp_sobel_rgb_axis_Pipeline_init_cols_fu_102_ap_start,
        ap_done => grp_sobel_rgb_axis_Pipeline_init_cols_fu_102_ap_done,
        ap_idle => grp_sobel_rgb_axis_Pipeline_init_cols_fu_102_ap_idle,
        ap_ready => grp_sobel_rgb_axis_Pipeline_init_cols_fu_102_ap_ready,
        width => width_read_reg_217,
        line0_address1 => grp_sobel_rgb_axis_Pipeline_init_cols_fu_102_line0_address1,
        line0_ce1 => grp_sobel_rgb_axis_Pipeline_init_cols_fu_102_line0_ce1,
        line0_we1 => grp_sobel_rgb_axis_Pipeline_init_cols_fu_102_line0_we1,
        line0_d1 => grp_sobel_rgb_axis_Pipeline_init_cols_fu_102_line0_d1,
        line1_address1 => grp_sobel_rgb_axis_Pipeline_init_cols_fu_102_line1_address1,
        line1_ce1 => grp_sobel_rgb_axis_Pipeline_init_cols_fu_102_line1_ce1,
        line1_we1 => grp_sobel_rgb_axis_Pipeline_init_cols_fu_102_line1_we1,
        line1_d1 => grp_sobel_rgb_axis_Pipeline_init_cols_fu_102_line1_d1);

    grp_sobel_rgb_axis_Pipeline_row_loop_col_loop_fu_112 : component sobel_rgb_axis_sobel_rgb_axis_Pipeline_row_loop_col_loop
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => grp_sobel_rgb_axis_Pipeline_row_loop_col_loop_fu_112_ap_start,
        ap_done => grp_sobel_rgb_axis_Pipeline_row_loop_col_loop_fu_112_ap_done,
        ap_idle => grp_sobel_rgb_axis_Pipeline_row_loop_col_loop_fu_112_ap_idle,
        ap_ready => grp_sobel_rgb_axis_Pipeline_row_loop_col_loop_fu_112_ap_ready,
        in_axis_TVALID => in_axis_TVALID_int_regslice,
        out_axis_TREADY => grp_sobel_rgb_axis_Pipeline_row_loop_col_loop_fu_112_out_axis_TREADY,
        width => width_read_reg_217,
        bound => bound_reg_244,
        sub133 => sub133_reg_254,
        in_axis_TDATA => in_axis_TDATA_int_regslice,
        in_axis_TREADY => grp_sobel_rgb_axis_Pipeline_row_loop_col_loop_fu_112_in_axis_TREADY,
        in_axis_TKEEP => in_axis_TKEEP_int_regslice,
        in_axis_TSTRB => in_axis_TSTRB_int_regslice,
        in_axis_TUSER => in_axis_TUSER_int_regslice,
        in_axis_TLAST => in_axis_TLAST_int_regslice,
        in_axis_TID => in_axis_TID_int_regslice,
        in_axis_TDEST => in_axis_TDEST_int_regslice,
        sub => sub_reg_249,
        out_axis_TDATA => grp_sobel_rgb_axis_Pipeline_row_loop_col_loop_fu_112_out_axis_TDATA,
        out_axis_TVALID => grp_sobel_rgb_axis_Pipeline_row_loop_col_loop_fu_112_out_axis_TVALID,
        out_axis_TKEEP => grp_sobel_rgb_axis_Pipeline_row_loop_col_loop_fu_112_out_axis_TKEEP,
        out_axis_TSTRB => grp_sobel_rgb_axis_Pipeline_row_loop_col_loop_fu_112_out_axis_TSTRB,
        out_axis_TUSER => grp_sobel_rgb_axis_Pipeline_row_loop_col_loop_fu_112_out_axis_TUSER,
        out_axis_TLAST => grp_sobel_rgb_axis_Pipeline_row_loop_col_loop_fu_112_out_axis_TLAST,
        out_axis_TID => grp_sobel_rgb_axis_Pipeline_row_loop_col_loop_fu_112_out_axis_TID,
        out_axis_TDEST => grp_sobel_rgb_axis_Pipeline_row_loop_col_loop_fu_112_out_axis_TDEST,
        line1_address1 => grp_sobel_rgb_axis_Pipeline_row_loop_col_loop_fu_112_line1_address1,
        line1_ce1 => grp_sobel_rgb_axis_Pipeline_row_loop_col_loop_fu_112_line1_ce1,
        line1_we1 => grp_sobel_rgb_axis_Pipeline_row_loop_col_loop_fu_112_line1_we1,
        line1_d1 => grp_sobel_rgb_axis_Pipeline_row_loop_col_loop_fu_112_line1_d1,
        line1_q1 => line1_q1,
        line0_address0 => grp_sobel_rgb_axis_Pipeline_row_loop_col_loop_fu_112_line0_address0,
        line0_ce0 => grp_sobel_rgb_axis_Pipeline_row_loop_col_loop_fu_112_line0_ce0,
        line0_q0 => line0_q0,
        line0_address1 => grp_sobel_rgb_axis_Pipeline_row_loop_col_loop_fu_112_line0_address1,
        line0_ce1 => grp_sobel_rgb_axis_Pipeline_row_loop_col_loop_fu_112_line0_ce1,
        line0_we1 => grp_sobel_rgb_axis_Pipeline_row_loop_col_loop_fu_112_line0_we1,
        line0_d1 => grp_sobel_rgb_axis_Pipeline_row_loop_col_loop_fu_112_line0_d1);

    CTRL_s_axi_U : component sobel_rgb_axis_CTRL_s_axi
    generic map (
        C_S_AXI_ADDR_WIDTH => C_S_AXI_CTRL_ADDR_WIDTH,
        C_S_AXI_DATA_WIDTH => C_S_AXI_CTRL_DATA_WIDTH)
    port map (
        AWVALID => s_axi_CTRL_AWVALID,
        AWREADY => s_axi_CTRL_AWREADY,
        AWADDR => s_axi_CTRL_AWADDR,
        WVALID => s_axi_CTRL_WVALID,
        WREADY => s_axi_CTRL_WREADY,
        WDATA => s_axi_CTRL_WDATA,
        WSTRB => s_axi_CTRL_WSTRB,
        ARVALID => s_axi_CTRL_ARVALID,
        ARREADY => s_axi_CTRL_ARREADY,
        ARADDR => s_axi_CTRL_ARADDR,
        RVALID => s_axi_CTRL_RVALID,
        RREADY => s_axi_CTRL_RREADY,
        RDATA => s_axi_CTRL_RDATA,
        RRESP => s_axi_CTRL_RRESP,
        BVALID => s_axi_CTRL_BVALID,
        BREADY => s_axi_CTRL_BREADY,
        BRESP => s_axi_CTRL_BRESP,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        width => width,
        height => height,
        ap_start => ap_start,
        interrupt => interrupt,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_idle => ap_idle);

    mul_31ns_11ns_41_2_1_U30 : component sobel_rgb_axis_mul_31ns_11ns_41_2_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 31,
        din1_WIDTH => 11,
        dout_WIDTH => 41)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => grp_fu_152_p0,
        din1 => grp_fu_152_p1,
        ce => grp_fu_152_ce,
        dout => grp_fu_152_p2);

    regslice_both_in_axis_V_data_V_U : component sobel_rgb_axis_regslice_both
    generic map (
        DataWidth => 24)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => in_axis_TDATA,
        vld_in => in_axis_TVALID,
        ack_in => regslice_both_in_axis_V_data_V_U_ack_in,
        data_out => in_axis_TDATA_int_regslice,
        vld_out => in_axis_TVALID_int_regslice,
        ack_out => in_axis_TREADY_int_regslice,
        apdone_blk => regslice_both_in_axis_V_data_V_U_apdone_blk);

    regslice_both_in_axis_V_keep_V_U : component sobel_rgb_axis_regslice_both
    generic map (
        DataWidth => 3)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => in_axis_TKEEP,
        vld_in => in_axis_TVALID,
        ack_in => regslice_both_in_axis_V_keep_V_U_ack_in,
        data_out => in_axis_TKEEP_int_regslice,
        vld_out => regslice_both_in_axis_V_keep_V_U_vld_out,
        ack_out => in_axis_TREADY_int_regslice,
        apdone_blk => regslice_both_in_axis_V_keep_V_U_apdone_blk);

    regslice_both_in_axis_V_strb_V_U : component sobel_rgb_axis_regslice_both
    generic map (
        DataWidth => 3)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => in_axis_TSTRB,
        vld_in => in_axis_TVALID,
        ack_in => regslice_both_in_axis_V_strb_V_U_ack_in,
        data_out => in_axis_TSTRB_int_regslice,
        vld_out => regslice_both_in_axis_V_strb_V_U_vld_out,
        ack_out => in_axis_TREADY_int_regslice,
        apdone_blk => regslice_both_in_axis_V_strb_V_U_apdone_blk);

    regslice_both_in_axis_V_user_V_U : component sobel_rgb_axis_regslice_both
    generic map (
        DataWidth => 1)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => in_axis_TUSER,
        vld_in => in_axis_TVALID,
        ack_in => regslice_both_in_axis_V_user_V_U_ack_in,
        data_out => in_axis_TUSER_int_regslice,
        vld_out => regslice_both_in_axis_V_user_V_U_vld_out,
        ack_out => in_axis_TREADY_int_regslice,
        apdone_blk => regslice_both_in_axis_V_user_V_U_apdone_blk);

    regslice_both_in_axis_V_last_V_U : component sobel_rgb_axis_regslice_both
    generic map (
        DataWidth => 1)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => in_axis_TLAST,
        vld_in => in_axis_TVALID,
        ack_in => regslice_both_in_axis_V_last_V_U_ack_in,
        data_out => in_axis_TLAST_int_regslice,
        vld_out => regslice_both_in_axis_V_last_V_U_vld_out,
        ack_out => in_axis_TREADY_int_regslice,
        apdone_blk => regslice_both_in_axis_V_last_V_U_apdone_blk);

    regslice_both_in_axis_V_id_V_U : component sobel_rgb_axis_regslice_both
    generic map (
        DataWidth => 1)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => in_axis_TID,
        vld_in => in_axis_TVALID,
        ack_in => regslice_both_in_axis_V_id_V_U_ack_in,
        data_out => in_axis_TID_int_regslice,
        vld_out => regslice_both_in_axis_V_id_V_U_vld_out,
        ack_out => in_axis_TREADY_int_regslice,
        apdone_blk => regslice_both_in_axis_V_id_V_U_apdone_blk);

    regslice_both_in_axis_V_dest_V_U : component sobel_rgb_axis_regslice_both
    generic map (
        DataWidth => 1)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => in_axis_TDEST,
        vld_in => in_axis_TVALID,
        ack_in => regslice_both_in_axis_V_dest_V_U_ack_in,
        data_out => in_axis_TDEST_int_regslice,
        vld_out => regslice_both_in_axis_V_dest_V_U_vld_out,
        ack_out => in_axis_TREADY_int_regslice,
        apdone_blk => regslice_both_in_axis_V_dest_V_U_apdone_blk);

    regslice_both_out_axis_V_data_V_U : component sobel_rgb_axis_regslice_both
    generic map (
        DataWidth => 24)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => out_axis_TDATA_int_regslice,
        vld_in => grp_sobel_rgb_axis_Pipeline_row_loop_col_loop_fu_112_out_axis_TVALID,
        ack_in => out_axis_TREADY_int_regslice,
        data_out => out_axis_TDATA,
        vld_out => regslice_both_out_axis_V_data_V_U_vld_out,
        ack_out => out_axis_TREADY,
        apdone_blk => regslice_both_out_axis_V_data_V_U_apdone_blk);

    regslice_both_out_axis_V_keep_V_U : component sobel_rgb_axis_regslice_both
    generic map (
        DataWidth => 3)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => out_axis_TKEEP_int_regslice,
        vld_in => grp_sobel_rgb_axis_Pipeline_row_loop_col_loop_fu_112_out_axis_TVALID,
        ack_in => regslice_both_out_axis_V_keep_V_U_ack_in_dummy,
        data_out => out_axis_TKEEP,
        vld_out => regslice_both_out_axis_V_keep_V_U_vld_out,
        ack_out => out_axis_TREADY,
        apdone_blk => regslice_both_out_axis_V_keep_V_U_apdone_blk);

    regslice_both_out_axis_V_strb_V_U : component sobel_rgb_axis_regslice_both
    generic map (
        DataWidth => 3)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => out_axis_TSTRB_int_regslice,
        vld_in => grp_sobel_rgb_axis_Pipeline_row_loop_col_loop_fu_112_out_axis_TVALID,
        ack_in => regslice_both_out_axis_V_strb_V_U_ack_in_dummy,
        data_out => out_axis_TSTRB,
        vld_out => regslice_both_out_axis_V_strb_V_U_vld_out,
        ack_out => out_axis_TREADY,
        apdone_blk => regslice_both_out_axis_V_strb_V_U_apdone_blk);

    regslice_both_out_axis_V_user_V_U : component sobel_rgb_axis_regslice_both
    generic map (
        DataWidth => 1)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => out_axis_TUSER_int_regslice,
        vld_in => grp_sobel_rgb_axis_Pipeline_row_loop_col_loop_fu_112_out_axis_TVALID,
        ack_in => regslice_both_out_axis_V_user_V_U_ack_in_dummy,
        data_out => out_axis_TUSER,
        vld_out => regslice_both_out_axis_V_user_V_U_vld_out,
        ack_out => out_axis_TREADY,
        apdone_blk => regslice_both_out_axis_V_user_V_U_apdone_blk);

    regslice_both_out_axis_V_last_V_U : component sobel_rgb_axis_regslice_both
    generic map (
        DataWidth => 1)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => out_axis_TLAST_int_regslice,
        vld_in => grp_sobel_rgb_axis_Pipeline_row_loop_col_loop_fu_112_out_axis_TVALID,
        ack_in => regslice_both_out_axis_V_last_V_U_ack_in_dummy,
        data_out => out_axis_TLAST,
        vld_out => regslice_both_out_axis_V_last_V_U_vld_out,
        ack_out => out_axis_TREADY,
        apdone_blk => regslice_both_out_axis_V_last_V_U_apdone_blk);

    regslice_both_out_axis_V_id_V_U : component sobel_rgb_axis_regslice_both
    generic map (
        DataWidth => 1)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => out_axis_TID_int_regslice,
        vld_in => grp_sobel_rgb_axis_Pipeline_row_loop_col_loop_fu_112_out_axis_TVALID,
        ack_in => regslice_both_out_axis_V_id_V_U_ack_in_dummy,
        data_out => out_axis_TID,
        vld_out => regslice_both_out_axis_V_id_V_U_vld_out,
        ack_out => out_axis_TREADY,
        apdone_blk => regslice_both_out_axis_V_id_V_U_apdone_blk);

    regslice_both_out_axis_V_dest_V_U : component sobel_rgb_axis_regslice_both
    generic map (
        DataWidth => 1)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => out_axis_TDEST_int_regslice,
        vld_in => grp_sobel_rgb_axis_Pipeline_row_loop_col_loop_fu_112_out_axis_TVALID,
        ack_in => regslice_both_out_axis_V_dest_V_U_ack_in_dummy,
        data_out => out_axis_TDEST,
        vld_out => regslice_both_out_axis_V_dest_V_U_vld_out,
        ack_out => out_axis_TREADY,
        apdone_blk => regslice_both_out_axis_V_dest_V_U_apdone_blk);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    grp_sobel_rgb_axis_Pipeline_init_cols_fu_102_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                grp_sobel_rgb_axis_Pipeline_init_cols_fu_102_ap_start_reg <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                    grp_sobel_rgb_axis_Pipeline_init_cols_fu_102_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_sobel_rgb_axis_Pipeline_init_cols_fu_102_ap_ready = ap_const_logic_1)) then 
                    grp_sobel_rgb_axis_Pipeline_init_cols_fu_102_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_sobel_rgb_axis_Pipeline_row_loop_col_loop_fu_112_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                grp_sobel_rgb_axis_Pipeline_row_loop_col_loop_fu_112_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
                    grp_sobel_rgb_axis_Pipeline_row_loop_col_loop_fu_112_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_sobel_rgb_axis_Pipeline_row_loop_col_loop_fu_112_ap_ready = ap_const_logic_1)) then 
                    grp_sobel_rgb_axis_Pipeline_row_loop_col_loop_fu_112_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;

    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                bound_reg_244 <= grp_fu_152_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state1)) then
                height_read_reg_212 <= height;
                smax1_reg_229 <= smax1_fu_184_p3;
                smax_reg_224 <= smax_fu_170_p3;
                width_read_reg_217 <= width;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state5) and (grp_sobel_rgb_axis_Pipeline_row_loop_col_loop_fu_112_out_axis_TVALID = ap_const_logic_1))) then
                out_axis_TDATA_reg <= grp_sobel_rgb_axis_Pipeline_row_loop_col_loop_fu_112_out_axis_TDATA;
                out_axis_TDEST_reg <= grp_sobel_rgb_axis_Pipeline_row_loop_col_loop_fu_112_out_axis_TDEST;
                out_axis_TID_reg <= grp_sobel_rgb_axis_Pipeline_row_loop_col_loop_fu_112_out_axis_TID;
                out_axis_TKEEP_reg <= grp_sobel_rgb_axis_Pipeline_row_loop_col_loop_fu_112_out_axis_TKEEP;
                out_axis_TLAST_reg <= grp_sobel_rgb_axis_Pipeline_row_loop_col_loop_fu_112_out_axis_TLAST;
                out_axis_TSTRB_reg <= grp_sobel_rgb_axis_Pipeline_row_loop_col_loop_fu_112_out_axis_TSTRB;
                out_axis_TUSER_reg <= grp_sobel_rgb_axis_Pipeline_row_loop_col_loop_fu_112_out_axis_TUSER;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then
                sub133_reg_254 <= sub133_fu_206_p2;
                sub_reg_249 <= sub_fu_200_p2;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, grp_sobel_rgb_axis_Pipeline_init_cols_fu_102_ap_done, grp_sobel_rgb_axis_Pipeline_row_loop_col_loop_fu_112_ap_done, ap_CS_fsm_state5, ap_CS_fsm_state6, regslice_both_out_axis_V_data_V_U_apdone_blk)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state2) and (grp_sobel_rgb_axis_Pipeline_init_cols_fu_102_ap_done = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state2;
                end if;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state5) and (grp_sobel_rgb_axis_Pipeline_row_loop_col_loop_fu_112_ap_done = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state6;
                else
                    ap_NS_fsm <= ap_ST_fsm_state5;
                end if;
            when ap_ST_fsm_state6 => 
                if (((regslice_both_out_axis_V_data_V_U_apdone_blk = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state6))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state6;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXXX";
        end case;
    end process;
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);

    ap_ST_fsm_state1_blk_assign_proc : process(ap_start)
    begin
        if ((ap_start = ap_const_logic_0)) then 
            ap_ST_fsm_state1_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state1_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_ST_fsm_state2_blk_assign_proc : process(grp_sobel_rgb_axis_Pipeline_init_cols_fu_102_ap_done)
    begin
        if ((grp_sobel_rgb_axis_Pipeline_init_cols_fu_102_ap_done = ap_const_logic_0)) then 
            ap_ST_fsm_state2_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state2_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state3_blk <= ap_const_logic_0;
    ap_ST_fsm_state4_blk <= ap_const_logic_0;

    ap_ST_fsm_state5_blk_assign_proc : process(grp_sobel_rgb_axis_Pipeline_row_loop_col_loop_fu_112_ap_done)
    begin
        if ((grp_sobel_rgb_axis_Pipeline_row_loop_col_loop_fu_112_ap_done = ap_const_logic_0)) then 
            ap_ST_fsm_state5_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state5_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_ST_fsm_state6_blk_assign_proc : process(regslice_both_out_axis_V_data_V_U_apdone_blk)
    begin
        if ((regslice_both_out_axis_V_data_V_U_apdone_blk = ap_const_logic_1)) then 
            ap_ST_fsm_state6_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state6_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(ap_CS_fsm_state6, regslice_both_out_axis_V_data_V_U_apdone_blk)
    begin
        if (((regslice_both_out_axis_V_data_V_U_apdone_blk = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state6))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state6, regslice_both_out_axis_V_data_V_U_apdone_blk)
    begin
        if (((regslice_both_out_axis_V_data_V_U_apdone_blk = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state6))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_rst_n_inv_assign_proc : process(ap_rst_n)
    begin
                ap_rst_n_inv <= not(ap_rst_n);
    end process;

    empty_22_fu_178_p2 <= "1" when (signed(width) > signed(ap_const_lv32_0)) else "0";
    empty_fu_164_p2 <= "1" when (signed(height) > signed(ap_const_lv32_0)) else "0";

    grp_fu_152_ce_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state3, grp_sobel_rgb_axis_Pipeline_init_cols_fu_102_ap_done)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state3) or ((ap_const_logic_1 = ap_CS_fsm_state2) and (grp_sobel_rgb_axis_Pipeline_init_cols_fu_102_ap_done = ap_const_logic_1)))) then 
            grp_fu_152_ce <= ap_const_logic_1;
        else 
            grp_fu_152_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_152_p0 <= grp_fu_152_p00(31 - 1 downto 0);
    grp_fu_152_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(smax_reg_224),41));
    grp_fu_152_p1 <= grp_fu_152_p10(11 - 1 downto 0);
    grp_fu_152_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(smax1_reg_229),41));
    grp_sobel_rgb_axis_Pipeline_init_cols_fu_102_ap_start <= grp_sobel_rgb_axis_Pipeline_init_cols_fu_102_ap_start_reg;
    grp_sobel_rgb_axis_Pipeline_row_loop_col_loop_fu_112_ap_start <= grp_sobel_rgb_axis_Pipeline_row_loop_col_loop_fu_112_ap_start_reg;
    grp_sobel_rgb_axis_Pipeline_row_loop_col_loop_fu_112_out_axis_TREADY <= (out_axis_TREADY_int_regslice and ap_CS_fsm_state5);
    in_axis_TREADY <= regslice_both_in_axis_V_data_V_U_ack_in;

    in_axis_TREADY_int_regslice_assign_proc : process(grp_sobel_rgb_axis_Pipeline_row_loop_col_loop_fu_112_in_axis_TREADY, ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            in_axis_TREADY_int_regslice <= grp_sobel_rgb_axis_Pipeline_row_loop_col_loop_fu_112_in_axis_TREADY;
        else 
            in_axis_TREADY_int_regslice <= ap_const_logic_0;
        end if; 
    end process;


    line0_address1_assign_proc : process(ap_CS_fsm_state2, grp_sobel_rgb_axis_Pipeline_init_cols_fu_102_line0_address1, grp_sobel_rgb_axis_Pipeline_row_loop_col_loop_fu_112_line0_address1, ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            line0_address1 <= grp_sobel_rgb_axis_Pipeline_row_loop_col_loop_fu_112_line0_address1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            line0_address1 <= grp_sobel_rgb_axis_Pipeline_init_cols_fu_102_line0_address1;
        else 
            line0_address1 <= "XXXXXXXXXX";
        end if; 
    end process;


    line0_ce0_assign_proc : process(grp_sobel_rgb_axis_Pipeline_row_loop_col_loop_fu_112_line0_ce0, ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            line0_ce0 <= grp_sobel_rgb_axis_Pipeline_row_loop_col_loop_fu_112_line0_ce0;
        else 
            line0_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    line0_ce1_assign_proc : process(ap_CS_fsm_state2, grp_sobel_rgb_axis_Pipeline_init_cols_fu_102_line0_ce1, grp_sobel_rgb_axis_Pipeline_row_loop_col_loop_fu_112_line0_ce1, ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            line0_ce1 <= grp_sobel_rgb_axis_Pipeline_row_loop_col_loop_fu_112_line0_ce1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            line0_ce1 <= grp_sobel_rgb_axis_Pipeline_init_cols_fu_102_line0_ce1;
        else 
            line0_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    line0_d1_assign_proc : process(ap_CS_fsm_state2, grp_sobel_rgb_axis_Pipeline_init_cols_fu_102_line0_d1, grp_sobel_rgb_axis_Pipeline_row_loop_col_loop_fu_112_line0_d1, ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            line0_d1 <= grp_sobel_rgb_axis_Pipeline_row_loop_col_loop_fu_112_line0_d1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            line0_d1 <= grp_sobel_rgb_axis_Pipeline_init_cols_fu_102_line0_d1;
        else 
            line0_d1 <= "XXXXXXXX";
        end if; 
    end process;


    line0_we1_assign_proc : process(ap_CS_fsm_state2, grp_sobel_rgb_axis_Pipeline_init_cols_fu_102_line0_we1, grp_sobel_rgb_axis_Pipeline_row_loop_col_loop_fu_112_line0_we1, ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            line0_we1 <= grp_sobel_rgb_axis_Pipeline_row_loop_col_loop_fu_112_line0_we1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            line0_we1 <= grp_sobel_rgb_axis_Pipeline_init_cols_fu_102_line0_we1;
        else 
            line0_we1 <= ap_const_logic_0;
        end if; 
    end process;


    line1_address1_assign_proc : process(ap_CS_fsm_state2, grp_sobel_rgb_axis_Pipeline_init_cols_fu_102_line1_address1, grp_sobel_rgb_axis_Pipeline_row_loop_col_loop_fu_112_line1_address1, ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            line1_address1 <= grp_sobel_rgb_axis_Pipeline_row_loop_col_loop_fu_112_line1_address1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            line1_address1 <= grp_sobel_rgb_axis_Pipeline_init_cols_fu_102_line1_address1;
        else 
            line1_address1 <= "XXXXXXXXXX";
        end if; 
    end process;


    line1_ce1_assign_proc : process(ap_CS_fsm_state2, grp_sobel_rgb_axis_Pipeline_init_cols_fu_102_line1_ce1, grp_sobel_rgb_axis_Pipeline_row_loop_col_loop_fu_112_line1_ce1, ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            line1_ce1 <= grp_sobel_rgb_axis_Pipeline_row_loop_col_loop_fu_112_line1_ce1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            line1_ce1 <= grp_sobel_rgb_axis_Pipeline_init_cols_fu_102_line1_ce1;
        else 
            line1_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    line1_d1_assign_proc : process(ap_CS_fsm_state2, grp_sobel_rgb_axis_Pipeline_init_cols_fu_102_line1_d1, grp_sobel_rgb_axis_Pipeline_row_loop_col_loop_fu_112_line1_d1, ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            line1_d1 <= grp_sobel_rgb_axis_Pipeline_row_loop_col_loop_fu_112_line1_d1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            line1_d1 <= grp_sobel_rgb_axis_Pipeline_init_cols_fu_102_line1_d1;
        else 
            line1_d1 <= "XXXXXXXX";
        end if; 
    end process;


    line1_we1_assign_proc : process(ap_CS_fsm_state2, grp_sobel_rgb_axis_Pipeline_init_cols_fu_102_line1_we1, grp_sobel_rgb_axis_Pipeline_row_loop_col_loop_fu_112_line1_we1, ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            line1_we1 <= grp_sobel_rgb_axis_Pipeline_row_loop_col_loop_fu_112_line1_we1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            line1_we1 <= grp_sobel_rgb_axis_Pipeline_init_cols_fu_102_line1_we1;
        else 
            line1_we1 <= ap_const_logic_0;
        end if; 
    end process;


    out_axis_TDATA_int_regslice_assign_proc : process(grp_sobel_rgb_axis_Pipeline_row_loop_col_loop_fu_112_out_axis_TDATA, grp_sobel_rgb_axis_Pipeline_row_loop_col_loop_fu_112_out_axis_TVALID, ap_CS_fsm_state5, out_axis_TDATA_reg)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state5) and (grp_sobel_rgb_axis_Pipeline_row_loop_col_loop_fu_112_out_axis_TVALID = ap_const_logic_1))) then 
            out_axis_TDATA_int_regslice <= grp_sobel_rgb_axis_Pipeline_row_loop_col_loop_fu_112_out_axis_TDATA;
        else 
            out_axis_TDATA_int_regslice <= out_axis_TDATA_reg;
        end if; 
    end process;


    out_axis_TDEST_int_regslice_assign_proc : process(grp_sobel_rgb_axis_Pipeline_row_loop_col_loop_fu_112_out_axis_TVALID, grp_sobel_rgb_axis_Pipeline_row_loop_col_loop_fu_112_out_axis_TDEST, ap_CS_fsm_state5, out_axis_TDEST_reg)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state5) and (grp_sobel_rgb_axis_Pipeline_row_loop_col_loop_fu_112_out_axis_TVALID = ap_const_logic_1))) then 
            out_axis_TDEST_int_regslice <= grp_sobel_rgb_axis_Pipeline_row_loop_col_loop_fu_112_out_axis_TDEST;
        else 
            out_axis_TDEST_int_regslice <= out_axis_TDEST_reg;
        end if; 
    end process;


    out_axis_TID_int_regslice_assign_proc : process(grp_sobel_rgb_axis_Pipeline_row_loop_col_loop_fu_112_out_axis_TVALID, grp_sobel_rgb_axis_Pipeline_row_loop_col_loop_fu_112_out_axis_TID, ap_CS_fsm_state5, out_axis_TID_reg)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state5) and (grp_sobel_rgb_axis_Pipeline_row_loop_col_loop_fu_112_out_axis_TVALID = ap_const_logic_1))) then 
            out_axis_TID_int_regslice <= grp_sobel_rgb_axis_Pipeline_row_loop_col_loop_fu_112_out_axis_TID;
        else 
            out_axis_TID_int_regslice <= out_axis_TID_reg;
        end if; 
    end process;


    out_axis_TKEEP_int_regslice_assign_proc : process(grp_sobel_rgb_axis_Pipeline_row_loop_col_loop_fu_112_out_axis_TVALID, grp_sobel_rgb_axis_Pipeline_row_loop_col_loop_fu_112_out_axis_TKEEP, ap_CS_fsm_state5, out_axis_TKEEP_reg)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state5) and (grp_sobel_rgb_axis_Pipeline_row_loop_col_loop_fu_112_out_axis_TVALID = ap_const_logic_1))) then 
            out_axis_TKEEP_int_regslice <= grp_sobel_rgb_axis_Pipeline_row_loop_col_loop_fu_112_out_axis_TKEEP;
        else 
            out_axis_TKEEP_int_regslice <= out_axis_TKEEP_reg;
        end if; 
    end process;


    out_axis_TLAST_int_regslice_assign_proc : process(grp_sobel_rgb_axis_Pipeline_row_loop_col_loop_fu_112_out_axis_TVALID, grp_sobel_rgb_axis_Pipeline_row_loop_col_loop_fu_112_out_axis_TLAST, ap_CS_fsm_state5, out_axis_TLAST_reg)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state5) and (grp_sobel_rgb_axis_Pipeline_row_loop_col_loop_fu_112_out_axis_TVALID = ap_const_logic_1))) then 
            out_axis_TLAST_int_regslice <= grp_sobel_rgb_axis_Pipeline_row_loop_col_loop_fu_112_out_axis_TLAST;
        else 
            out_axis_TLAST_int_regslice <= out_axis_TLAST_reg;
        end if; 
    end process;


    out_axis_TSTRB_int_regslice_assign_proc : process(grp_sobel_rgb_axis_Pipeline_row_loop_col_loop_fu_112_out_axis_TVALID, grp_sobel_rgb_axis_Pipeline_row_loop_col_loop_fu_112_out_axis_TSTRB, ap_CS_fsm_state5, out_axis_TSTRB_reg)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state5) and (grp_sobel_rgb_axis_Pipeline_row_loop_col_loop_fu_112_out_axis_TVALID = ap_const_logic_1))) then 
            out_axis_TSTRB_int_regslice <= grp_sobel_rgb_axis_Pipeline_row_loop_col_loop_fu_112_out_axis_TSTRB;
        else 
            out_axis_TSTRB_int_regslice <= out_axis_TSTRB_reg;
        end if; 
    end process;


    out_axis_TUSER_int_regslice_assign_proc : process(grp_sobel_rgb_axis_Pipeline_row_loop_col_loop_fu_112_out_axis_TVALID, grp_sobel_rgb_axis_Pipeline_row_loop_col_loop_fu_112_out_axis_TUSER, ap_CS_fsm_state5, out_axis_TUSER_reg)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state5) and (grp_sobel_rgb_axis_Pipeline_row_loop_col_loop_fu_112_out_axis_TVALID = ap_const_logic_1))) then 
            out_axis_TUSER_int_regslice <= grp_sobel_rgb_axis_Pipeline_row_loop_col_loop_fu_112_out_axis_TUSER;
        else 
            out_axis_TUSER_int_regslice <= out_axis_TUSER_reg;
        end if; 
    end process;

    out_axis_TVALID <= regslice_both_out_axis_V_data_V_U_vld_out;
    out_axis_TVALID_int_regslice <= grp_sobel_rgb_axis_Pipeline_row_loop_col_loop_fu_112_out_axis_TVALID;
    smax1_fu_184_p3 <= 
        trunc_ln21_fu_156_p1 when (empty_22_fu_178_p2(0) = '1') else 
        ap_const_lv11_0;
    smax_fu_170_p3 <= 
        trunc_ln21_1_fu_160_p1 when (empty_fu_164_p2(0) = '1') else 
        ap_const_lv31_0;
    sub133_fu_206_p2 <= std_logic_vector(unsigned(height_read_reg_212) + unsigned(ap_const_lv32_FFFFFFFF));
    sub_fu_200_p2 <= std_logic_vector(unsigned(width_read_reg_217) + unsigned(ap_const_lv32_FFFFFFFF));
    trunc_ln21_1_fu_160_p1 <= height(31 - 1 downto 0);
    trunc_ln21_fu_156_p1 <= width(11 - 1 downto 0);
end behav;
