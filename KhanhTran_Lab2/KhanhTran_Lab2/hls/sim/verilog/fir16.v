// ==============================================================
// Generated by Vitis HLS v2025.1
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2025 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="fir16_fir16,hls_ip_2025_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7a35t-cpg236-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=6.398750,HLS_SYN_LAT=260,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=408,HLS_SYN_LUT=498,HLS_VERSION=2025_1}" *)

module fir16 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        x_address0,
        x_ce0,
        x_q0,
        y_address0,
        y_ce0,
        y_we0,
        y_d0
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [7:0] x_address0;
output   x_ce0;
input  [15:0] x_q0;
output  [7:0] y_address0;
output   y_ce0;
output   y_we0;
output  [23:0] y_d0;

reg ap_idle;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_enable_reg_pp0_iter3;
reg    ap_idle_pp0;
wire    ap_block_pp0_stage0_subdone;
wire   [0:0] icmp_ln18_fu_227_p2;
reg    ap_condition_exit_pp0_iter0_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
wire   [63:0] zext_ln18_fu_216_p1;
reg   [63:0] zext_ln18_reg_635;
wire    ap_block_pp0_stage0_11001;
reg   [63:0] zext_ln18_reg_635_pp0_iter1_reg;
reg   [63:0] zext_ln18_reg_635_pp0_iter2_reg;
wire   [16:0] tmp_fu_312_p2;
reg   [16:0] tmp_reg_649;
wire   [20:0] tmp7_fu_400_p2;
reg   [20:0] tmp7_reg_654;
wire   [19:0] add_ln35_fu_406_p2;
reg   [19:0] add_ln35_reg_659;
wire   [16:0] add_ln35_2_fu_412_p2;
reg   [16:0] add_ln35_2_reg_664;
wire   [20:0] add_ln35_4_fu_520_p2;
reg   [20:0] add_ln35_4_reg_669;
wire    ap_block_pp0_stage0;
reg   [15:0] shift_reg_131_fu_52;
wire    ap_loop_init;
reg   [7:0] i16_fu_56;
wire   [7:0] i_fu_221_p2;
reg   [7:0] ap_sig_allocacmp_i16_load;
reg   [15:0] shift_reg_fu_60;
reg   [15:0] shift_reg_1_fu_64;
reg   [15:0] shift_reg_2_fu_68;
reg   [15:0] shift_reg_3_fu_72;
reg   [15:0] shift_reg_4_fu_76;
reg   [15:0] shift_reg_5_fu_80;
reg   [15:0] shift_reg_6_fu_84;
reg   [15:0] shift_reg_7_fu_88;
reg   [15:0] shift_reg_8_fu_92;
reg   [15:0] shift_reg_9_fu_96;
reg   [15:0] shift_reg_10_fu_100;
reg   [15:0] shift_reg_11_fu_104;
reg   [15:0] shift_reg15_fu_108;
reg    x_ce0_local;
reg    y_we0_local;
wire  signed [23:0] sext_ln35_8_fu_526_p1;
reg    y_ce0_local;
wire  signed [15:0] shift_reg_14_cast_fu_280_p0;
wire  signed [15:0] sext_ln35_fu_284_p0;
wire  signed [15:0] sext_ln35_1_fu_288_p0;
wire  signed [15:0] sext_ln35_2_fu_292_p0;
wire  signed [15:0] shift_reg_7_cast_fu_296_p0;
wire  signed [15:0] sext_ln35_3_fu_300_p0;
wire  signed [15:0] sext_ln35_4_fu_304_p0;
wire  signed [15:0] shift_reg_13_cast_fu_308_p0;
wire  signed [16:0] sext_ln35_fu_284_p1;
wire  signed [16:0] sext_ln35_3_fu_300_p1;
wire  signed [16:0] sext_ln35_1_fu_288_p1;
wire  signed [16:0] sext_ln35_4_fu_304_p1;
wire  signed [16:0] tmp2_fu_318_p2;
wire   [18:0] tmp_3_fu_328_p3;
wire  signed [19:0] tmp2_cast_fu_324_p1;
wire  signed [19:0] p_shl29_fu_336_p1;
wire  signed [15:0] shift_reg_12_cast_fu_346_p0;
wire  signed [15:0] shift_reg_4_cast_fu_350_p0;
wire  signed [16:0] shift_reg_4_cast_fu_350_p1;
wire  signed [16:0] shift_reg_12_cast_fu_346_p1;
wire   [16:0] tmp41_fu_354_p2;
wire   [18:0] tmp_2_fu_360_p3;
wire  signed [16:0] sext_ln35_2_fu_292_p1;
wire  signed [16:0] shift_reg_13_cast_fu_308_p1;
wire  signed [16:0] tmp6_fu_372_p2;
wire   [18:0] tmp_4_fu_382_p3;
wire  signed [20:0] p_shl_fu_390_p1;
wire   [20:0] p_neg_fu_394_p2;
wire  signed [20:0] tmp6_cast_fu_378_p1;
wire  signed [19:0] tmp_2_cast_fu_368_p1;
wire   [19:0] tmp3_fu_340_p2;
wire  signed [16:0] shift_reg_7_cast_fu_296_p1;
wire  signed [16:0] shift_reg_14_cast_fu_280_p1;
wire   [17:0] tmp_1_fu_488_p3;
wire  signed [20:0] sext_ln35_5_fu_499_p1;
wire  signed [18:0] sext_ln35_6_fu_507_p1;
wire  signed [18:0] tmp_1_cast_fu_495_p1;
wire   [18:0] add_ln35_3_fu_510_p2;
wire  signed [20:0] sext_ln35_7_fu_516_p1;
wire   [20:0] add_ln35_1_fu_502_p2;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg    ap_loop_exit_ready_pp0_iter1_reg;
reg    ap_loop_exit_ready_pp0_iter2_reg;
reg    ap_loop_exit_ready_pp0_iter3_reg;
reg   [0:0] ap_NS_fsm;
wire    ap_enable_pp0;
wire    ap_start_int;
wire    ap_ready_sig;
wire    ap_done_sig;
reg    ap_condition_105;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
#0 shift_reg_131_fu_52 = 16'd0;
#0 i16_fu_56 = 8'd0;
#0 shift_reg_fu_60 = 16'd0;
#0 shift_reg_1_fu_64 = 16'd0;
#0 shift_reg_2_fu_68 = 16'd0;
#0 shift_reg_3_fu_72 = 16'd0;
#0 shift_reg_4_fu_76 = 16'd0;
#0 shift_reg_5_fu_80 = 16'd0;
#0 shift_reg_6_fu_84 = 16'd0;
#0 shift_reg_7_fu_88 = 16'd0;
#0 shift_reg_8_fu_92 = 16'd0;
#0 shift_reg_9_fu_96 = 16'd0;
#0 shift_reg_10_fu_100 = 16'd0;
#0 shift_reg_11_fu_104 = 16'd0;
#0 shift_reg15_fu_108 = 16'd0;
#0 ap_done_reg = 1'b0;
end

fir16_flow_control_loop_pipe flow_control_loop_pipe_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready_sig),
    .ap_done(ap_done_sig),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int),
    .ap_continue(1'b1)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_loop_exit_ready_pp0_iter3_reg == 1'b1))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_loop_exit_ready_pp0_iter2_reg == 1'b0))) begin
        ap_loop_exit_ready_pp0_iter3_reg <= 1'b0;
    end else if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        ap_loop_exit_ready_pp0_iter3_reg <= ap_loop_exit_ready_pp0_iter2_reg;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_condition_105)) begin
        i16_fu_56 <= i_fu_221_p2;
    end
end

always @ (posedge ap_clk) begin
if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (ap_loop_init == 1'b1))) begin
        shift_reg15_fu_108 <= 16'd0;
    end else if ((ap_enable_reg_pp0_iter1 == 1'b1)) begin
        shift_reg15_fu_108 <= x_q0;
    end
end
end

always @ (posedge ap_clk) begin
if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (ap_loop_init == 1'b1))) begin
        shift_reg_10_fu_100 <= 16'd0;
    end else if ((ap_enable_reg_pp0_iter1 == 1'b1)) begin
        shift_reg_10_fu_100 <= shift_reg_11_fu_104;
    end
end
end

always @ (posedge ap_clk) begin
if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (ap_loop_init == 1'b1))) begin
        shift_reg_11_fu_104 <= 16'd0;
    end else if ((ap_enable_reg_pp0_iter1 == 1'b1)) begin
        shift_reg_11_fu_104 <= shift_reg15_fu_108;
    end
end
end

always @ (posedge ap_clk) begin
if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (ap_loop_init == 1'b1))) begin
        shift_reg_131_fu_52 <= 16'd0;
    end else if ((ap_enable_reg_pp0_iter1 == 1'b1)) begin
        shift_reg_131_fu_52 <= shift_reg_fu_60;
    end
end
end

always @ (posedge ap_clk) begin
if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (ap_loop_init == 1'b1))) begin
        shift_reg_1_fu_64 <= 16'd0;
    end else if ((ap_enable_reg_pp0_iter1 == 1'b1)) begin
        shift_reg_1_fu_64 <= shift_reg_2_fu_68;
    end
end
end

always @ (posedge ap_clk) begin
if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (ap_loop_init == 1'b1))) begin
        shift_reg_2_fu_68 <= 16'd0;
    end else if ((ap_enable_reg_pp0_iter1 == 1'b1)) begin
        shift_reg_2_fu_68 <= shift_reg_3_fu_72;
    end
end
end

always @ (posedge ap_clk) begin
if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (ap_loop_init == 1'b1))) begin
        shift_reg_3_fu_72 <= 16'd0;
    end else if ((ap_enable_reg_pp0_iter1 == 1'b1)) begin
        shift_reg_3_fu_72 <= shift_reg_4_fu_76;
    end
end
end

always @ (posedge ap_clk) begin
if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (ap_loop_init == 1'b1))) begin
        shift_reg_4_fu_76 <= 16'd0;
    end else if ((ap_enable_reg_pp0_iter1 == 1'b1)) begin
        shift_reg_4_fu_76 <= shift_reg_5_fu_80;
    end
end
end

always @ (posedge ap_clk) begin
if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (ap_loop_init == 1'b1))) begin
        shift_reg_5_fu_80 <= 16'd0;
    end else if ((ap_enable_reg_pp0_iter1 == 1'b1)) begin
        shift_reg_5_fu_80 <= shift_reg_6_fu_84;
    end
end
end

always @ (posedge ap_clk) begin
if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (ap_loop_init == 1'b1))) begin
        shift_reg_6_fu_84 <= 16'd0;
    end else if ((ap_enable_reg_pp0_iter1 == 1'b1)) begin
        shift_reg_6_fu_84 <= shift_reg_7_fu_88;
    end
end
end

always @ (posedge ap_clk) begin
if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (ap_loop_init == 1'b1))) begin
        shift_reg_7_fu_88 <= 16'd0;
    end else if ((ap_enable_reg_pp0_iter1 == 1'b1)) begin
        shift_reg_7_fu_88 <= shift_reg_8_fu_92;
    end
end
end

always @ (posedge ap_clk) begin
if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (ap_loop_init == 1'b1))) begin
        shift_reg_8_fu_92 <= 16'd0;
    end else if ((ap_enable_reg_pp0_iter1 == 1'b1)) begin
        shift_reg_8_fu_92 <= shift_reg_9_fu_96;
    end
end
end

always @ (posedge ap_clk) begin
if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (ap_loop_init == 1'b1))) begin
        shift_reg_9_fu_96 <= 16'd0;
    end else if ((ap_enable_reg_pp0_iter1 == 1'b1)) begin
        shift_reg_9_fu_96 <= shift_reg_10_fu_100;
    end
end
end

always @ (posedge ap_clk) begin
if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (ap_loop_init == 1'b1))) begin
        shift_reg_fu_60 <= 16'd0;
    end else if ((ap_enable_reg_pp0_iter1 == 1'b1)) begin
        shift_reg_fu_60 <= shift_reg_1_fu_64;
    end
end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        add_ln35_2_reg_664 <= add_ln35_2_fu_412_p2;
        add_ln35_reg_659 <= add_ln35_fu_406_p2;
        ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
        ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready_pp0_iter1_reg;
        tmp7_reg_654 <= tmp7_fu_400_p2;
        tmp_reg_649 <= tmp_fu_312_p2;
        zext_ln18_reg_635[7 : 0] <= zext_ln18_fu_216_p1[7 : 0];
        zext_ln18_reg_635_pp0_iter1_reg[7 : 0] <= zext_ln18_reg_635[7 : 0];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        add_ln35_4_reg_669 <= add_ln35_4_fu_520_p2;
        zext_ln18_reg_635_pp0_iter2_reg[7 : 0] <= zext_ln18_reg_635_pp0_iter1_reg[7 : 0];
    end
end

always @ (*) begin
    if (((icmp_ln18_fu_227_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_loop_exit_ready_pp0_iter3_reg == 1'b1))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b0) & (ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init == 1'b1))) begin
        ap_sig_allocacmp_i16_load = 8'd0;
    end else begin
        ap_sig_allocacmp_i16_load = i16_fu_56;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        x_ce0_local = 1'b1;
    end else begin
        x_ce0_local = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        y_ce0_local = 1'b1;
    end else begin
        y_ce0_local = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        y_we0_local = 1'b1;
    end else begin
        y_we0_local = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln35_1_fu_502_p2 = ($signed(sext_ln35_5_fu_499_p1) + $signed(tmp7_reg_654));

assign add_ln35_2_fu_412_p2 = ($signed(shift_reg_7_cast_fu_296_p1) + $signed(shift_reg_14_cast_fu_280_p1));

assign add_ln35_3_fu_510_p2 = ($signed(sext_ln35_6_fu_507_p1) + $signed(tmp_1_cast_fu_495_p1));

assign add_ln35_4_fu_520_p2 = ($signed(sext_ln35_7_fu_516_p1) + $signed(add_ln35_1_fu_502_p2));

assign add_ln35_fu_406_p2 = ($signed(tmp_2_cast_fu_368_p1) + $signed(tmp3_fu_340_p2));

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_condition_105 = ((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0));
end

assign ap_done = ap_done_sig;

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start_int;

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage0;

assign ap_ready = ap_ready_sig;

assign i_fu_221_p2 = (ap_sig_allocacmp_i16_load + 8'd1);

assign icmp_ln18_fu_227_p2 = ((ap_sig_allocacmp_i16_load == 8'd255) ? 1'b1 : 1'b0);

assign p_neg_fu_394_p2 = ($signed(21'd0) - $signed(p_shl_fu_390_p1));

assign p_shl29_fu_336_p1 = $signed(tmp_3_fu_328_p3);

assign p_shl_fu_390_p1 = $signed(tmp_4_fu_382_p3);

assign sext_ln35_1_fu_288_p0 = shift_reg_10_fu_100;

assign sext_ln35_1_fu_288_p1 = sext_ln35_1_fu_288_p0;

assign sext_ln35_2_fu_292_p0 = shift_reg_7_fu_88;

assign sext_ln35_2_fu_292_p1 = sext_ln35_2_fu_292_p0;

assign sext_ln35_3_fu_300_p0 = shift_reg_4_fu_76;

assign sext_ln35_3_fu_300_p1 = sext_ln35_3_fu_300_p0;

assign sext_ln35_4_fu_304_p0 = shift_reg_2_fu_68;

assign sext_ln35_4_fu_304_p1 = sext_ln35_4_fu_304_p0;

assign sext_ln35_5_fu_499_p1 = $signed(add_ln35_reg_659);

assign sext_ln35_6_fu_507_p1 = $signed(add_ln35_2_reg_664);

assign sext_ln35_7_fu_516_p1 = $signed(add_ln35_3_fu_510_p2);

assign sext_ln35_8_fu_526_p1 = $signed(add_ln35_4_reg_669);

assign sext_ln35_fu_284_p0 = shift_reg15_fu_108;

assign sext_ln35_fu_284_p1 = sext_ln35_fu_284_p0;

assign shift_reg_12_cast_fu_346_p0 = shift_reg_fu_60;

assign shift_reg_12_cast_fu_346_p1 = shift_reg_12_cast_fu_346_p0;

assign shift_reg_13_cast_fu_308_p0 = shift_reg_131_fu_52;

assign shift_reg_13_cast_fu_308_p1 = shift_reg_13_cast_fu_308_p0;

assign shift_reg_14_cast_fu_280_p0 = x_q0;

assign shift_reg_14_cast_fu_280_p1 = shift_reg_14_cast_fu_280_p0;

assign shift_reg_4_cast_fu_350_p0 = shift_reg_8_fu_92;

assign shift_reg_4_cast_fu_350_p1 = shift_reg_4_cast_fu_350_p0;

assign shift_reg_7_cast_fu_296_p0 = shift_reg_5_fu_80;

assign shift_reg_7_cast_fu_296_p1 = shift_reg_7_cast_fu_296_p0;

assign tmp2_cast_fu_324_p1 = tmp2_fu_318_p2;

assign tmp2_fu_318_p2 = ($signed(sext_ln35_1_fu_288_p1) + $signed(sext_ln35_4_fu_304_p1));

assign tmp3_fu_340_p2 = ($signed(tmp2_cast_fu_324_p1) - $signed(p_shl29_fu_336_p1));

assign tmp41_fu_354_p2 = ($signed(shift_reg_4_cast_fu_350_p1) + $signed(shift_reg_12_cast_fu_346_p1));

assign tmp6_cast_fu_378_p1 = tmp6_fu_372_p2;

assign tmp6_fu_372_p2 = ($signed(sext_ln35_2_fu_292_p1) + $signed(shift_reg_13_cast_fu_308_p1));

assign tmp7_fu_400_p2 = ($signed(p_neg_fu_394_p2) - $signed(tmp6_cast_fu_378_p1));

assign tmp_1_cast_fu_495_p1 = $signed(tmp_1_fu_488_p3);

assign tmp_1_fu_488_p3 = {{tmp_reg_649}, {1'd0}};

assign tmp_2_cast_fu_368_p1 = $signed(tmp_2_fu_360_p3);

assign tmp_2_fu_360_p3 = {{tmp41_fu_354_p2}, {2'd0}};

assign tmp_3_fu_328_p3 = {{tmp2_fu_318_p2}, {2'd0}};

assign tmp_4_fu_382_p3 = {{tmp6_fu_372_p2}, {2'd0}};

assign tmp_fu_312_p2 = ($signed(sext_ln35_fu_284_p1) - $signed(sext_ln35_3_fu_300_p1));

assign x_address0 = zext_ln18_fu_216_p1;

assign x_ce0 = x_ce0_local;

assign y_address0 = zext_ln18_reg_635_pp0_iter2_reg;

assign y_ce0 = y_ce0_local;

assign y_d0 = sext_ln35_8_fu_526_p1;

assign y_we0 = y_we0_local;

assign zext_ln18_fu_216_p1 = ap_sig_allocacmp_i16_load;

always @ (posedge ap_clk) begin
    zext_ln18_reg_635[63:8] <= 56'b00000000000000000000000000000000000000000000000000000000;
    zext_ln18_reg_635_pp0_iter1_reg[63:8] <= 56'b00000000000000000000000000000000000000000000000000000000;
    zext_ln18_reg_635_pp0_iter2_reg[63:8] <= 56'b00000000000000000000000000000000000000000000000000000000;
end

endmodule //fir16
