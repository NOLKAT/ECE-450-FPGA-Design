-- ==============================================================
-- Generated by Vitis HLS v2025.1
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2025 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity fir16 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    x_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    x_ce0 : OUT STD_LOGIC;
    x_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
    y_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    y_ce0 : OUT STD_LOGIC;
    y_we0 : OUT STD_LOGIC;
    y_d0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
end;


architecture behav of fir16 is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "fir16_fir16,hls_ip_2025_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7a35t-cpg236-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=6.398750,HLS_SYN_LAT=260,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=408,HLS_SYN_LUT=498,HLS_VERSION=2025_1}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv16_0 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv8_1 : STD_LOGIC_VECTOR (7 downto 0) := "00000001";
    constant ap_const_lv8_FF : STD_LOGIC_VECTOR (7 downto 0) := "11111111";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv21_0 : STD_LOGIC_VECTOR (20 downto 0) := "000000000000000000000";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";

    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal icmp_ln18_fu_227_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_condition_exit_pp0_iter0_stage0 : STD_LOGIC;
    signal ap_loop_exit_ready : STD_LOGIC;
    signal ap_ready_int : STD_LOGIC;
    signal zext_ln18_fu_216_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln18_reg_635 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal zext_ln18_reg_635_pp0_iter1_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln18_reg_635_pp0_iter2_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_fu_312_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp_reg_649 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp7_fu_400_p2 : STD_LOGIC_VECTOR (20 downto 0);
    signal tmp7_reg_654 : STD_LOGIC_VECTOR (20 downto 0);
    signal add_ln35_fu_406_p2 : STD_LOGIC_VECTOR (19 downto 0);
    signal add_ln35_reg_659 : STD_LOGIC_VECTOR (19 downto 0);
    signal add_ln35_2_fu_412_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal add_ln35_2_reg_664 : STD_LOGIC_VECTOR (16 downto 0);
    signal add_ln35_4_fu_520_p2 : STD_LOGIC_VECTOR (20 downto 0);
    signal add_ln35_4_reg_669 : STD_LOGIC_VECTOR (20 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal shift_reg_131_fu_52 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    signal ap_loop_init : STD_LOGIC;
    signal i16_fu_56 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    signal i_fu_221_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_sig_allocacmp_i16_load : STD_LOGIC_VECTOR (7 downto 0);
    signal shift_reg_fu_60 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    signal shift_reg_1_fu_64 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    signal shift_reg_2_fu_68 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    signal shift_reg_3_fu_72 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    signal shift_reg_4_fu_76 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    signal shift_reg_5_fu_80 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    signal shift_reg_6_fu_84 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    signal shift_reg_7_fu_88 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    signal shift_reg_8_fu_92 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    signal shift_reg_9_fu_96 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    signal shift_reg_10_fu_100 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    signal shift_reg_11_fu_104 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    signal shift_reg15_fu_108 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    signal x_ce0_local : STD_LOGIC;
    signal y_we0_local : STD_LOGIC;
    signal sext_ln35_8_fu_526_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal y_ce0_local : STD_LOGIC;
    signal shift_reg_14_cast_fu_280_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal sext_ln35_fu_284_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal sext_ln35_1_fu_288_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal sext_ln35_2_fu_292_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal shift_reg_7_cast_fu_296_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal sext_ln35_3_fu_300_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal sext_ln35_4_fu_304_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal shift_reg_13_cast_fu_308_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal sext_ln35_fu_284_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal sext_ln35_3_fu_300_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal sext_ln35_1_fu_288_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal sext_ln35_4_fu_304_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp2_fu_318_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp_3_fu_328_p3 : STD_LOGIC_VECTOR (18 downto 0);
    signal tmp2_cast_fu_324_p1 : STD_LOGIC_VECTOR (19 downto 0);
    signal p_shl29_fu_336_p1 : STD_LOGIC_VECTOR (19 downto 0);
    signal shift_reg_12_cast_fu_346_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal shift_reg_4_cast_fu_350_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal shift_reg_4_cast_fu_350_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal shift_reg_12_cast_fu_346_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp41_fu_354_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp_2_fu_360_p3 : STD_LOGIC_VECTOR (18 downto 0);
    signal sext_ln35_2_fu_292_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal shift_reg_13_cast_fu_308_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp6_fu_372_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp_4_fu_382_p3 : STD_LOGIC_VECTOR (18 downto 0);
    signal p_shl_fu_390_p1 : STD_LOGIC_VECTOR (20 downto 0);
    signal p_neg_fu_394_p2 : STD_LOGIC_VECTOR (20 downto 0);
    signal tmp6_cast_fu_378_p1 : STD_LOGIC_VECTOR (20 downto 0);
    signal tmp_2_cast_fu_368_p1 : STD_LOGIC_VECTOR (19 downto 0);
    signal tmp3_fu_340_p2 : STD_LOGIC_VECTOR (19 downto 0);
    signal shift_reg_7_cast_fu_296_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal shift_reg_14_cast_fu_280_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp_1_fu_488_p3 : STD_LOGIC_VECTOR (17 downto 0);
    signal sext_ln35_5_fu_499_p1 : STD_LOGIC_VECTOR (20 downto 0);
    signal sext_ln35_6_fu_507_p1 : STD_LOGIC_VECTOR (18 downto 0);
    signal tmp_1_cast_fu_495_p1 : STD_LOGIC_VECTOR (18 downto 0);
    signal add_ln35_3_fu_510_p2 : STD_LOGIC_VECTOR (18 downto 0);
    signal sext_ln35_7_fu_516_p1 : STD_LOGIC_VECTOR (20 downto 0);
    signal add_ln35_1_fu_502_p2 : STD_LOGIC_VECTOR (20 downto 0);
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_continue_int : STD_LOGIC;
    signal ap_done_int : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter1_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter2_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter3_reg : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_start_int : STD_LOGIC;
    signal ap_ready_sig : STD_LOGIC;
    signal ap_done_sig : STD_LOGIC;
    signal ap_condition_105 : BOOLEAN;
    signal ap_ce_reg : STD_LOGIC;

    component fir16_flow_control_loop_pipe IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_start_int : OUT STD_LOGIC;
        ap_loop_init : OUT STD_LOGIC;
        ap_ready_int : IN STD_LOGIC;
        ap_loop_exit_ready : IN STD_LOGIC;
        ap_loop_exit_done : IN STD_LOGIC;
        ap_continue_int : OUT STD_LOGIC;
        ap_done_int : IN STD_LOGIC;
        ap_continue : IN STD_LOGIC );
    end component;



begin
    flow_control_loop_pipe_U : component fir16_flow_control_loop_pipe
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => ap_start,
        ap_ready => ap_ready_sig,
        ap_done => ap_done_sig,
        ap_start_int => ap_start_int,
        ap_loop_init => ap_loop_init,
        ap_ready_int => ap_ready_int,
        ap_loop_exit_ready => ap_condition_exit_pp0_iter0_stage0,
        ap_loop_exit_done => ap_done_int,
        ap_continue_int => ap_continue_int,
        ap_done_int => ap_done_int,
        ap_continue => ap_const_logic_1);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue_int = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_loop_exit_ready_pp0_iter3_reg = ap_const_logic_1))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter1 <= ap_start_int;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_loop_exit_ready_pp0_iter3_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_loop_exit_ready_pp0_iter2_reg = ap_const_logic_0))) then 
                ap_loop_exit_ready_pp0_iter3_reg <= ap_const_logic_0;
            elsif ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then 
                ap_loop_exit_ready_pp0_iter3_reg <= ap_loop_exit_ready_pp0_iter2_reg;
            end if; 
        end if;
    end process;

    i16_fu_56_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_1 = ap_condition_105)) then
                i16_fu_56 <= i_fu_221_p2;
            end if;
        end if;
    end process;

    shift_reg15_fu_108_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_loop_init = ap_const_logic_1))) then 
                    shift_reg15_fu_108 <= ap_const_lv16_0;
                elsif ((ap_enable_reg_pp0_iter1 = ap_const_logic_1)) then 
                    shift_reg15_fu_108 <= x_q0;
                end if;
            end if; 
        end if;
    end process;

    shift_reg_10_fu_100_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_loop_init = ap_const_logic_1))) then 
                    shift_reg_10_fu_100 <= ap_const_lv16_0;
                elsif ((ap_enable_reg_pp0_iter1 = ap_const_logic_1)) then 
                    shift_reg_10_fu_100 <= shift_reg_11_fu_104;
                end if;
            end if; 
        end if;
    end process;

    shift_reg_11_fu_104_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_loop_init = ap_const_logic_1))) then 
                    shift_reg_11_fu_104 <= ap_const_lv16_0;
                elsif ((ap_enable_reg_pp0_iter1 = ap_const_logic_1)) then 
                    shift_reg_11_fu_104 <= shift_reg15_fu_108;
                end if;
            end if; 
        end if;
    end process;

    shift_reg_131_fu_52_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_loop_init = ap_const_logic_1))) then 
                    shift_reg_131_fu_52 <= ap_const_lv16_0;
                elsif ((ap_enable_reg_pp0_iter1 = ap_const_logic_1)) then 
                    shift_reg_131_fu_52 <= shift_reg_fu_60;
                end if;
            end if; 
        end if;
    end process;

    shift_reg_1_fu_64_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_loop_init = ap_const_logic_1))) then 
                    shift_reg_1_fu_64 <= ap_const_lv16_0;
                elsif ((ap_enable_reg_pp0_iter1 = ap_const_logic_1)) then 
                    shift_reg_1_fu_64 <= shift_reg_2_fu_68;
                end if;
            end if; 
        end if;
    end process;

    shift_reg_2_fu_68_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_loop_init = ap_const_logic_1))) then 
                    shift_reg_2_fu_68 <= ap_const_lv16_0;
                elsif ((ap_enable_reg_pp0_iter1 = ap_const_logic_1)) then 
                    shift_reg_2_fu_68 <= shift_reg_3_fu_72;
                end if;
            end if; 
        end if;
    end process;

    shift_reg_3_fu_72_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_loop_init = ap_const_logic_1))) then 
                    shift_reg_3_fu_72 <= ap_const_lv16_0;
                elsif ((ap_enable_reg_pp0_iter1 = ap_const_logic_1)) then 
                    shift_reg_3_fu_72 <= shift_reg_4_fu_76;
                end if;
            end if; 
        end if;
    end process;

    shift_reg_4_fu_76_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_loop_init = ap_const_logic_1))) then 
                    shift_reg_4_fu_76 <= ap_const_lv16_0;
                elsif ((ap_enable_reg_pp0_iter1 = ap_const_logic_1)) then 
                    shift_reg_4_fu_76 <= shift_reg_5_fu_80;
                end if;
            end if; 
        end if;
    end process;

    shift_reg_5_fu_80_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_loop_init = ap_const_logic_1))) then 
                    shift_reg_5_fu_80 <= ap_const_lv16_0;
                elsif ((ap_enable_reg_pp0_iter1 = ap_const_logic_1)) then 
                    shift_reg_5_fu_80 <= shift_reg_6_fu_84;
                end if;
            end if; 
        end if;
    end process;

    shift_reg_6_fu_84_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_loop_init = ap_const_logic_1))) then 
                    shift_reg_6_fu_84 <= ap_const_lv16_0;
                elsif ((ap_enable_reg_pp0_iter1 = ap_const_logic_1)) then 
                    shift_reg_6_fu_84 <= shift_reg_7_fu_88;
                end if;
            end if; 
        end if;
    end process;

    shift_reg_7_fu_88_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_loop_init = ap_const_logic_1))) then 
                    shift_reg_7_fu_88 <= ap_const_lv16_0;
                elsif ((ap_enable_reg_pp0_iter1 = ap_const_logic_1)) then 
                    shift_reg_7_fu_88 <= shift_reg_8_fu_92;
                end if;
            end if; 
        end if;
    end process;

    shift_reg_8_fu_92_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_loop_init = ap_const_logic_1))) then 
                    shift_reg_8_fu_92 <= ap_const_lv16_0;
                elsif ((ap_enable_reg_pp0_iter1 = ap_const_logic_1)) then 
                    shift_reg_8_fu_92 <= shift_reg_9_fu_96;
                end if;
            end if; 
        end if;
    end process;

    shift_reg_9_fu_96_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_loop_init = ap_const_logic_1))) then 
                    shift_reg_9_fu_96 <= ap_const_lv16_0;
                elsif ((ap_enable_reg_pp0_iter1 = ap_const_logic_1)) then 
                    shift_reg_9_fu_96 <= shift_reg_10_fu_100;
                end if;
            end if; 
        end if;
    end process;

    shift_reg_fu_60_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_loop_init = ap_const_logic_1))) then 
                    shift_reg_fu_60 <= ap_const_lv16_0;
                elsif ((ap_enable_reg_pp0_iter1 = ap_const_logic_1)) then 
                    shift_reg_fu_60 <= shift_reg_1_fu_64;
                end if;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                add_ln35_2_reg_664 <= add_ln35_2_fu_412_p2;
                add_ln35_reg_659 <= add_ln35_fu_406_p2;
                ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
                ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready_pp0_iter1_reg;
                tmp7_reg_654 <= tmp7_fu_400_p2;
                tmp_reg_649 <= tmp_fu_312_p2;
                    zext_ln18_reg_635(7 downto 0) <= zext_ln18_fu_216_p1(7 downto 0);
                    zext_ln18_reg_635_pp0_iter1_reg(7 downto 0) <= zext_ln18_reg_635(7 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                add_ln35_4_reg_669 <= add_ln35_4_fu_520_p2;
                    zext_ln18_reg_635_pp0_iter2_reg(7 downto 0) <= zext_ln18_reg_635_pp0_iter1_reg(7 downto 0);
            end if;
        end if;
    end process;
    zext_ln18_reg_635(63 downto 8) <= "00000000000000000000000000000000000000000000000000000000";
    zext_ln18_reg_635_pp0_iter1_reg(63 downto 8) <= "00000000000000000000000000000000000000000000000000000000";
    zext_ln18_reg_635_pp0_iter2_reg(63 downto 8) <= "00000000000000000000000000000000000000000000000000000000";

    ap_NS_fsm_assign_proc : process (ap_CS_fsm)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;
    add_ln35_1_fu_502_p2 <= std_logic_vector(signed(sext_ln35_5_fu_499_p1) + signed(tmp7_reg_654));
    add_ln35_2_fu_412_p2 <= std_logic_vector(signed(shift_reg_7_cast_fu_296_p1) + signed(shift_reg_14_cast_fu_280_p1));
    add_ln35_3_fu_510_p2 <= std_logic_vector(signed(sext_ln35_6_fu_507_p1) + signed(tmp_1_cast_fu_495_p1));
    add_ln35_4_fu_520_p2 <= std_logic_vector(signed(sext_ln35_7_fu_516_p1) + signed(add_ln35_1_fu_502_p2));
    add_ln35_fu_406_p2 <= std_logic_vector(signed(tmp_2_cast_fu_368_p1) + signed(tmp3_fu_340_p2));
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_105_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
                ap_condition_105 <= ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0));
    end process;


    ap_condition_exit_pp0_iter0_stage0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone, icmp_ln18_fu_227_p2)
    begin
        if (((icmp_ln18_fu_227_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_done <= ap_done_sig;

    ap_done_int_assign_proc : process(ap_block_pp0_stage0_subdone, ap_done_reg, ap_loop_exit_ready_pp0_iter3_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_loop_exit_ready_pp0_iter3_reg = ap_const_logic_1))) then 
            ap_done_int <= ap_const_logic_1;
        else 
            ap_done_int <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_reg_pp0_iter0 <= ap_start_int;

    ap_idle_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_idle_pp0, ap_start_int)
    begin
        if (((ap_start_int = ap_const_logic_0) and (ap_idle_pp0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3)
    begin
        if (((ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_loop_exit_ready <= ap_condition_exit_pp0_iter0_stage0;
    ap_ready <= ap_ready_sig;

    ap_ready_int_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_ready_int <= ap_const_logic_1;
        else 
            ap_ready_int <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_allocacmp_i16_load_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0, ap_loop_init, i16_fu_56)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_loop_init = ap_const_logic_1))) then 
            ap_sig_allocacmp_i16_load <= ap_const_lv8_0;
        else 
            ap_sig_allocacmp_i16_load <= i16_fu_56;
        end if; 
    end process;

    i_fu_221_p2 <= std_logic_vector(unsigned(ap_sig_allocacmp_i16_load) + unsigned(ap_const_lv8_1));
    icmp_ln18_fu_227_p2 <= "1" when (ap_sig_allocacmp_i16_load = ap_const_lv8_FF) else "0";
    p_neg_fu_394_p2 <= std_logic_vector(unsigned(ap_const_lv21_0) - unsigned(p_shl_fu_390_p1));
        p_shl29_fu_336_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_3_fu_328_p3),20));

        p_shl_fu_390_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_4_fu_382_p3),21));

    sext_ln35_1_fu_288_p0 <= shift_reg_10_fu_100;
        sext_ln35_1_fu_288_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sext_ln35_1_fu_288_p0),17));

    sext_ln35_2_fu_292_p0 <= shift_reg_7_fu_88;
        sext_ln35_2_fu_292_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sext_ln35_2_fu_292_p0),17));

    sext_ln35_3_fu_300_p0 <= shift_reg_4_fu_76;
        sext_ln35_3_fu_300_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sext_ln35_3_fu_300_p0),17));

    sext_ln35_4_fu_304_p0 <= shift_reg_2_fu_68;
        sext_ln35_4_fu_304_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sext_ln35_4_fu_304_p0),17));

        sext_ln35_5_fu_499_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln35_reg_659),21));

        sext_ln35_6_fu_507_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln35_2_reg_664),19));

        sext_ln35_7_fu_516_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln35_3_fu_510_p2),21));

        sext_ln35_8_fu_526_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln35_4_reg_669),24));

    sext_ln35_fu_284_p0 <= shift_reg15_fu_108;
        sext_ln35_fu_284_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sext_ln35_fu_284_p0),17));

    shift_reg_12_cast_fu_346_p0 <= shift_reg_fu_60;
        shift_reg_12_cast_fu_346_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(shift_reg_12_cast_fu_346_p0),17));

    shift_reg_13_cast_fu_308_p0 <= shift_reg_131_fu_52;
        shift_reg_13_cast_fu_308_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(shift_reg_13_cast_fu_308_p0),17));

    shift_reg_14_cast_fu_280_p0 <= x_q0;
        shift_reg_14_cast_fu_280_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(shift_reg_14_cast_fu_280_p0),17));

    shift_reg_4_cast_fu_350_p0 <= shift_reg_8_fu_92;
        shift_reg_4_cast_fu_350_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(shift_reg_4_cast_fu_350_p0),17));

    shift_reg_7_cast_fu_296_p0 <= shift_reg_5_fu_80;
        shift_reg_7_cast_fu_296_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(shift_reg_7_cast_fu_296_p0),17));

        tmp2_cast_fu_324_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp2_fu_318_p2),20));

    tmp2_fu_318_p2 <= std_logic_vector(signed(sext_ln35_1_fu_288_p1) + signed(sext_ln35_4_fu_304_p1));
    tmp3_fu_340_p2 <= std_logic_vector(signed(tmp2_cast_fu_324_p1) - signed(p_shl29_fu_336_p1));
    tmp41_fu_354_p2 <= std_logic_vector(signed(shift_reg_4_cast_fu_350_p1) + signed(shift_reg_12_cast_fu_346_p1));
        tmp6_cast_fu_378_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp6_fu_372_p2),21));

    tmp6_fu_372_p2 <= std_logic_vector(signed(sext_ln35_2_fu_292_p1) + signed(shift_reg_13_cast_fu_308_p1));
    tmp7_fu_400_p2 <= std_logic_vector(unsigned(p_neg_fu_394_p2) - unsigned(tmp6_cast_fu_378_p1));
        tmp_1_cast_fu_495_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_1_fu_488_p3),19));

    tmp_1_fu_488_p3 <= (tmp_reg_649 & ap_const_lv1_0);
        tmp_2_cast_fu_368_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_2_fu_360_p3),20));

    tmp_2_fu_360_p3 <= (tmp41_fu_354_p2 & ap_const_lv2_0);
    tmp_3_fu_328_p3 <= (tmp2_fu_318_p2 & ap_const_lv2_0);
    tmp_4_fu_382_p3 <= (tmp6_fu_372_p2 & ap_const_lv2_0);
    tmp_fu_312_p2 <= std_logic_vector(signed(sext_ln35_fu_284_p1) - signed(sext_ln35_3_fu_300_p1));
    x_address0 <= zext_ln18_fu_216_p1(8 - 1 downto 0);
    x_ce0 <= x_ce0_local;

    x_ce0_local_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            x_ce0_local <= ap_const_logic_1;
        else 
            x_ce0_local <= ap_const_logic_0;
        end if; 
    end process;

    y_address0 <= zext_ln18_reg_635_pp0_iter2_reg(8 - 1 downto 0);
    y_ce0 <= y_ce0_local;

    y_ce0_local_assign_proc : process(ap_enable_reg_pp0_iter3, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1))) then 
            y_ce0_local <= ap_const_logic_1;
        else 
            y_ce0_local <= ap_const_logic_0;
        end if; 
    end process;

    y_d0 <= sext_ln35_8_fu_526_p1;
    y_we0 <= y_we0_local;

    y_we0_local_assign_proc : process(ap_enable_reg_pp0_iter3, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1))) then 
            y_we0_local <= ap_const_logic_1;
        else 
            y_we0_local <= ap_const_logic_0;
        end if; 
    end process;

    zext_ln18_fu_216_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ap_sig_allocacmp_i16_load),64));
end behav;
